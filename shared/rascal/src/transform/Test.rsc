@contributor{Super Awesome Automated XBGF Test Suite Synchroniser}
@contributor{Vadim Zaytsev - vadim@grammarware.net - SWAT, CWI}
module transform::Test

import IO;
import language::BGF;
import language::XBGF;
import language::XScope;
import transform::XBGF;
import diff::GDT;
import export::BNF;
import export::XBNF;

map[str,tuple[XBGFSequence,BGFGrammar,BGFGrammar]] test_data = (
"abridge": <[abridge(production("bracket","expr",nonterminal("expr")))],grammar([],[production("constant","expr",nonterminal("int")),production("neg","expr",nonterminal("expr")),production("bracket","expr",nonterminal("expr"))]),grammar([],[production("constant","expr",nonterminal("int")),production("neg","expr",nonterminal("expr"))])>,
"abstractize": <[abstractize(production("","A",sequence([nonterminal("b"),marked(terminal("x")),nonterminal("c"),terminal("y")])))],grammar([],[production("","A",sequence([nonterminal("b"),terminal("x"),nonterminal("c"),terminal("y")]))]),grammar([],[production("","A",sequence([nonterminal("b"),nonterminal("c"),terminal("y")]))])>,
"add_horizontal": <[addH(production("","N",choice([marked(terminal("x")),nonterminal("a"),nonterminal("b")])))],grammar([],[production("","N",choice([nonterminal("a"),nonterminal("b")]))]),grammar([],[production("","N",choice([terminal("x"),nonterminal("a"),nonterminal("b")]))])>,
"add_inside": <[addH(production("","expr",sequence([optional(choice([marked(terminal("+")),terminal("-")])),nonterminal("int")])))],grammar([],[production("","expr",sequence([optional(terminal("-")),nonterminal("int")]))]),grammar([],[production("","expr",sequence([optional(choice([terminal("+"),terminal("-")])),nonterminal("int")]))])>,
"add_vertical": <[addV(production("","expr",nonterminal("id")))],grammar([],[production("","expr",nonterminal("int"))]),grammar([],[production("","expr",nonterminal("int")),production("","expr",nonterminal("id"))])>,
"add_vertical_middle": <[addV(production("","expr",nonterminal("id")))],grammar([],[production("","foo",nonterminal("bar")),production("","expr",nonterminal("int")),production("","bar",nonterminal("foo"))]),grammar([],[production("","foo",nonterminal("bar")),production("","expr",nonterminal("int")),production("","expr",nonterminal("id")),production("","bar",nonterminal("foo"))])>,
"add_vertical_scattered": <[addV(production("","expr",nonterminal("id")))],grammar([],[production("","foo",terminal("1")),production("","expr",nonterminal("int")),production("","bar",terminal("2")),production("","expr",nonterminal("real")),production("","wez",terminal("3"))]),grammar([],[production("","foo",terminal("1")),production("","expr",nonterminal("int")),production("","expr",nonterminal("real")),production("","expr",nonterminal("id")),production("","bar",terminal("2")),production("","wez",terminal("3"))])>,
"anonymize_multiple": <[anonymize(production("","A",sequence([selectable("first",terminal("a")),marked(selectable("second",terminal("a"))),marked(selectable("third",terminal("a")))])))],grammar([],[production("","A",sequence([selectable("first",terminal("a")),selectable("second",terminal("a")),selectable("third",terminal("a"))]))]),grammar([],[production("","A",sequence([selectable("first",terminal("a")),terminal("a"),terminal("a")]))])>,
"anonymize_single": <[anonymize(production("unary","expr",sequence([marked(selectable("op",nonterminal("unary_op"))),nonterminal("expr")])))],grammar([],[production("binary","expr",sequence([terminal("("),nonterminal("expr"),selectable("op",nonterminal("binary_op")),nonterminal("expr"),terminal(")")])),production("unary","expr",sequence([selectable("op",nonterminal("unary_op")),nonterminal("expr")]))]),grammar([],[production("binary","expr",sequence([terminal("("),nonterminal("expr"),selectable("op",nonterminal("binary_op")),nonterminal("expr"),terminal(")")])),production("unary","expr",sequence([nonterminal("unary_op"),nonterminal("expr")]))])>,
"appear_q": <[appear(production("","foo",sequence([nonterminal("bar"),marked(optional(nonterminal("qux")))])))],grammar([],[production("","foo",nonterminal("bar"))]),grammar([],[production("","foo",sequence([nonterminal("bar"),optional(nonterminal("qux"))]))])>,
"appear_s": <[appear(production("","foo",sequence([nonterminal("bar"),marked(star(nonterminal("qux")))])))],grammar([],[production("","foo",nonterminal("bar"))]),grammar([],[production("","foo",sequence([nonterminal("bar"),star(nonterminal("qux"))]))])>,
"chain_l": <[chain(production("binary","expr",nonterminal("binexpr")))],grammar([],[production("constant","expr",nonterminal("int")),production("binary","expr",sequence([nonterminal("expr"),nonterminal("op"),nonterminal("expr")]))]),grammar([],[production("constant","expr",nonterminal("int")),production("binary","expr",nonterminal("binexpr")),production("","binexpr",sequence([nonterminal("expr"),nonterminal("op"),nonterminal("expr")]))])>,
"chain_n": <[chain(production("","ClassDeclaration",nonterminal("NormalClassDeclaration")))],grammar([],[production("","ClassDeclaration",sequence([terminal("class"),nonterminal("Identifier"),nonterminal("ClassBody")])),production("","ClassBody",sequence([terminal("{"),optional(nonterminal("ClassBodyDeclarations")),terminal("}")]))]),grammar([],[production("","ClassDeclaration",nonterminal("NormalClassDeclaration")),production("","NormalClassDeclaration",sequence([terminal("class"),nonterminal("Identifier"),nonterminal("ClassBody")])),production("","ClassBody",sequence([terminal("{"),optional(nonterminal("ClassBodyDeclarations")),terminal("}")]))])>,
"concretize": <[concretize(production("","A",sequence([nonterminal("b"),marked(terminal("x")),nonterminal("c")])))],grammar([],[production("","A",sequence([nonterminal("b"),nonterminal("c")]))]),grammar([],[production("","A",sequence([nonterminal("b"),terminal("x"),nonterminal("c")]))])>,
"deanonymize_multiple": <[deanonymize(production("","A",sequence([selectable("first",terminal("a")),marked(selectable("second",terminal("a"))),marked(selectable("third",terminal("a")))])))],grammar([],[production("","A",sequence([selectable("first",terminal("a")),terminal("a"),terminal("a")]))]),grammar([],[production("","A",sequence([selectable("first",terminal("a")),selectable("second",terminal("a")),selectable("third",terminal("a"))]))])>,
"deanonymize_single": <[deanonymize(production("unary","expr",sequence([marked(selectable("op",nonterminal("unary_op"))),nonterminal("expr")])))],grammar([],[production("constant","expr",selectable("value",nonterminal("int"))),production("binary","expr",sequence([terminal("("),nonterminal("expr"),selectable("op",nonterminal("binary_op")),nonterminal("expr"),terminal(")")])),production("unary","expr",sequence([nonterminal("unary_op"),nonterminal("expr")]))]),grammar([],[production("constant","expr",selectable("value",nonterminal("int"))),production("binary","expr",sequence([terminal("("),nonterminal("expr"),selectable("op",nonterminal("binary_op")),nonterminal("expr"),terminal(")")])),production("unary","expr",sequence([selectable("op",nonterminal("unary_op")),nonterminal("expr")]))])>,
"define": <[define([production("","op",terminal("+")),production("","op",terminal("-"))])],grammar([],[production("","expr",nonterminal("int")),production("","expr",sequence([nonterminal("expr"),nonterminal("op"),nonterminal("expr")]))]),grammar([],[production("","expr",nonterminal("int")),production("","expr",sequence([nonterminal("expr"),nonterminal("op"),nonterminal("expr")])),production("","op",terminal("+")),production("","op",terminal("-"))])>,
"designate": <[designate(production("intexpr","expr",nonterminal("int")))],grammar([],[production("","expr",nonterminal("int"))]),grammar([],[production("intexpr","expr",nonterminal("int"))])>,
"detour": <[detour(production("bracket","expr",nonterminal("expr")))],grammar([],[production("constant","expr",nonterminal("int")),production("neg","expr",nonterminal("expr"))]),grammar([],[production("constant","expr",nonterminal("int")),production("neg","expr",nonterminal("expr")),production("bracket","expr",nonterminal("expr"))])>,
"deyaccify_eps": <[deyaccify("foo")],grammar([],[production("","foo",epsilon()),production("","foo",sequence([nonterminal("bar"),nonterminal("foo")]))]),grammar([],[production("","foo",star(nonterminal("bar")))])>,
"deyaccify_left": <[deyaccify("foo")],grammar([],[production("","foo",nonterminal("bar")),production("","foo",sequence([nonterminal("foo"),nonterminal("wez")]))]),grammar([],[production("","foo",sequence([nonterminal("bar"),star(nonterminal("wez"))]))])>,
"deyaccify_left_plus": <[deyaccify("foo")],grammar([],[production("","foo",nonterminal("bar")),production("","foo",sequence([nonterminal("foo"),nonterminal("bar")]))]),grammar([],[production("","foo",plus(nonterminal("bar")))])>,
"deyaccify_right": <[deyaccify("foo")],grammar([],[production("","foo",nonterminal("bar")),production("","foo",sequence([nonterminal("wez"),nonterminal("foo")]))]),grammar([],[production("","foo",sequence([star(nonterminal("wez")),nonterminal("bar")]))])>,
"deyaccify_right_plus": <[deyaccify("foo")],grammar([],[production("","foo",nonterminal("bar")),production("","foo",sequence([nonterminal("bar"),nonterminal("foo")]))]),grammar([],[production("","foo",plus(nonterminal("bar")))])>,
"disappear_q": <[disappear(production("","foo",sequence([nonterminal("bar"),marked(optional(nonterminal("qux")))])))],grammar([],[production("","foo",sequence([nonterminal("bar"),optional(nonterminal("qux"))]))]),grammar([],[production("","foo",nonterminal("bar"))])>,
"disappear_s": <[disappear(production("","foo",sequence([nonterminal("bar"),marked(star(nonterminal("wez"))),nonterminal("qux")])))],grammar([],[production("","foo",sequence([nonterminal("bar"),star(nonterminal("wez")),nonterminal("qux")]))]),grammar([],[production("","foo",sequence([nonterminal("bar"),nonterminal("qux")]))])>,
"distribute_l": <[distribute(inlabel("bcd"))],grammar([],[production("bcd","a",sequence([nonterminal("b"),choice([nonterminal("c"),nonterminal("d")])])),production("efg","a",sequence([nonterminal("e"),choice([nonterminal("f"),nonterminal("g")])]))]),grammar([],[production("bcd","a",choice([sequence([nonterminal("b"),nonterminal("c")]),sequence([nonterminal("b"),nonterminal("d")])])),production("efg","a",sequence([nonterminal("e"),choice([nonterminal("f"),nonterminal("g")])]))])>,
"distribute_nt": <[distribute(innt("foo"))],grammar([],[production("","foo",sequence([nonterminal("bar"),choice([nonterminal("qux"),nonterminal("wez")])]))]),grammar([],[production("","foo",choice([sequence([nonterminal("bar"),nonterminal("qux")]),sequence([nonterminal("bar"),nonterminal("wez")])]))])>,
"downgrade": <[downgrade(production("","a",sequence([marked(nonterminal("b")),nonterminal("c")])),production("","b",sequence([nonterminal("d"),nonterminal("e")])))],grammar([],[production("","a",sequence([nonterminal("b"),nonterminal("c")])),production("","b",sequence([nonterminal("d"),nonterminal("e")])),production("","b",sequence([nonterminal("f"),nonterminal("g")]))]),grammar([],[production("","a",sequence([nonterminal("d"),nonterminal("e"),nonterminal("c")])),production("","b",sequence([nonterminal("d"),nonterminal("e")])),production("","b",sequence([nonterminal("f"),nonterminal("g")]))])>,
"eliminate": <[eliminate("intexpr")],grammar([],[production("","expr",nonterminal("int")),production("","intexpr",nonterminal("int"))]),grammar([],[production("","expr",nonterminal("int"))])>,
"equate1": <[equate("foo","bar")],grammar([],[production("","foo",nonterminal("wez")),production("","bar",nonterminal("wez"))]),grammar([],[production("","bar",nonterminal("wez"))])>,
"equate2": <[equate("foo","bar")],grammar([],[production("","foo",choice([star(nonterminal("wez")),terminal("x")])),production("","bar",choice([terminal("x"),star(nonterminal("wez"))]))]),grammar([],[production("","bar",choice([terminal("x"),star(nonterminal("wez"))]))])>,
"equate3": <[equate("foo","bar")],grammar([],[production("","foo",star(nonterminal("wez"))),production("","foo",terminal("x")),production("","bar",terminal("x")),production("","bar",star(nonterminal("wez")))]),grammar([],[production("","bar",star(nonterminal("wez"))),production("","bar",terminal("x"))])>,
"equate4": <[equate("foo","bar")],grammar([],[production("","foo",choice([star(nonterminal("wez")),terminal("x")])),production("","bar",choice([terminal("x"),star(nonterminal("wez"))])),production("go","wez",sequence([nonterminal("foo"),terminal("!")])),production("stay","wez",sequence([nonterminal("bar"),nonterminal("wez")]))]),grammar([],[production("","bar",choice([terminal("x"),star(nonterminal("wez"))])),production("go","wez",sequence([nonterminal("bar"),terminal("!")])),production("stay","wez",sequence([nonterminal("bar"),nonterminal("wez")]))])>,
"extract_l": <[extract(production("","xs",star(nonterminal("x"))),inlabel("l2"))],grammar([],[production("l1","a",star(nonterminal("x"))),production("l2","b",star(nonterminal("x")))]),grammar([],[production("l1","a",star(nonterminal("x"))),production("l2","b",nonterminal("xs")),production("","xs",star(nonterminal("x")))])>,
"extract_nt": <[extract(production("","xs",star(nonterminal("x"))),innt("a"))],grammar([],[production("","a",star(nonterminal("x"))),production("","b",star(nonterminal("x")))]),grammar([],[production("","a",nonterminal("xs")),production("","xs",star(nonterminal("x"))),production("","b",star(nonterminal("x")))])>,
"extract_subch": <[extract(production("","ClassOrInterfaceDeclaration",choice([nonterminal("ClassDeclaration"),nonterminal("InterfaceDeclaration")])),globally())],grammar([],[production("","TypeDeclaration",choice([nonterminal("ClassDeclaration"),nonterminal("InterfaceDeclaration"),terminal(";")]))]),grammar([],[production("","TypeDeclaration",choice([nonterminal("ClassOrInterfaceDeclaration"),terminal(";")])),production("","ClassOrInterfaceDeclaration",choice([nonterminal("ClassDeclaration"),nonterminal("InterfaceDeclaration")]))])>,
"extract_subseq_multiple": <[extract(production("","qux",sequence([nonterminal("bar"),nonterminal("wez")])),globally())],grammar([],[production("","foo",sequence([star(sequence([nonterminal("bar"),nonterminal("wez")])),nonterminal("bar"),nonterminal("wez")]))]),grammar([],[production("","foo",sequence([star(nonterminal("qux")),nonterminal("qux")])),production("","qux",sequence([nonterminal("bar"),nonterminal("wez")]))])>,
"extract_subseq_single": <[extract(production("","ParExpression",sequence([terminal("("),nonterminal("Expression"),terminal(")")])),globally())],grammar([],[production("","IfThenStatement",sequence([terminal("if"),terminal("("),nonterminal("Expression"),terminal(")"),nonterminal("Statement")]))]),grammar([],[production("","IfThenStatement",sequence([terminal("if"),nonterminal("ParExpression"),nonterminal("Statement")])),production("","ParExpression",sequence([terminal("("),nonterminal("Expression"),terminal(")")]))])>,
"factor_eps": <[factor(choice([nonterminal("b"),sequence([nonterminal("b"),nonterminal("c")])]),sequence([nonterminal("b"),choice([epsilon(),nonterminal("c")])]),globally())],grammar([],[production("","a",choice([nonterminal("b"),sequence([nonterminal("b"),nonterminal("c")])]))]),grammar([],[production("","a",sequence([nonterminal("b"),choice([epsilon(),nonterminal("c")])]))])>,
"factor_global": <[factor(choice([sequence([nonterminal("b"),nonterminal("c")]),sequence([nonterminal("b"),nonterminal("d")])]),sequence([nonterminal("b"),choice([nonterminal("d"),nonterminal("c")])]),globally())],grammar([],[production("","a",choice([sequence([nonterminal("b"),nonterminal("c")]),sequence([nonterminal("b"),nonterminal("d")])]))]),grammar([],[production("","a",sequence([nonterminal("b"),choice([nonterminal("c"),nonterminal("d")])]))])>,
"factor_local": <[factor(choice([sequence([nonterminal("c"),nonterminal("d"),nonterminal("e")]),sequence([nonterminal("c"),nonterminal("f"),nonterminal("g")])]),sequence([nonterminal("c"),choice([sequence([nonterminal("d"),nonterminal("e")]),sequence([nonterminal("f"),nonterminal("g")])])]),globally())],grammar([],[production("","a",choice([nonterminal("a"),nonterminal("b"),sequence([nonterminal("c"),nonterminal("d"),nonterminal("e")]),sequence([nonterminal("c"),nonterminal("f"),nonterminal("g")]),nonterminal("h"),nonterminal("i")]))]),grammar([],[production("","a",choice([nonterminal("a"),nonterminal("b"),sequence([nonterminal("c"),choice([sequence([nonterminal("d"),nonterminal("e")]),sequence([nonterminal("f"),nonterminal("g")])])]),nonterminal("h"),nonterminal("i")]))])>,
"factor_nt": <[factor(choice([sequence([nonterminal("b"),nonterminal("c")]),sequence([nonterminal("b"),nonterminal("d")])]),sequence([nonterminal("b"),choice([nonterminal("c"),nonterminal("d")])]),innt("a"))],grammar([],[production("","a",choice([sequence([nonterminal("b"),nonterminal("c")]),sequence([nonterminal("b"),nonterminal("d")])]))]),grammar([],[production("","a",sequence([nonterminal("b"),choice([nonterminal("c"),nonterminal("d")])]))])>,
"fold": <[fold("bar",globally())],grammar([],[production("l1","foo",star(nonterminal("wez"))),production("l2","qux",star(nonterminal("wez"))),production("","bar",star(nonterminal("wez")))]),grammar([],[production("l1","foo",nonterminal("bar")),production("l2","qux",nonterminal("bar")),production("","bar",star(nonterminal("wez")))])>,
"fold_l": <[fold("bar",inlabel("l1"))],grammar([],[production("l1","foo",star(nonterminal("wez"))),production("l2","qux",star(nonterminal("wez"))),production("","bar",star(nonterminal("wez")))]),grammar([],[production("l1","foo",nonterminal("bar")),production("l2","qux",star(nonterminal("wez"))),production("","bar",star(nonterminal("wez")))])>,
"fold_nt": <[fold("bar",innt("foo"))],grammar([],[production("l1","foo",star(nonterminal("wez"))),production("l2","qux",star(nonterminal("wez"))),production("","bar",star(nonterminal("wez")))]),grammar([],[production("l1","foo",nonterminal("bar")),production("l2","qux",star(nonterminal("wez"))),production("","bar",star(nonterminal("wez")))])>,
"horizontal_l": <[horizontal(innt("decs"))],grammar([],[production("onedec","decs",nonterminal("dec")),production("moredecs","decs",sequence([nonterminal("dec"),nonterminal("decs")]))]),grammar([],[production("","decs",choice([selectable("onedec",nonterminal("dec")),selectable("moredecs",sequence([nonterminal("dec"),nonterminal("decs")]))]))])>,
"horizontal_n": <[horizontal(innt("decs"))],grammar([],[production("","decs",nonterminal("dec")),production("","decs",sequence([nonterminal("dec"),nonterminal("decs")]))]),grammar([],[production("","decs",choice([nonterminal("dec"),sequence([nonterminal("dec"),nonterminal("decs")])]))])>,
"import": <[importG([production("","A",sequence([nonterminal("B"),nonterminal("X")])),production("","B",choice([nonterminal("A"),epsilon()]))])],grammar([],[production("","X",sequence([terminal("a"),terminal("b")]))]),grammar([],[production("","X",sequence([terminal("a"),terminal("b")])),production("","A",sequence([nonterminal("B"),nonterminal("X")])),production("","B",choice([nonterminal("A"),epsilon()]))])>,
"inject": <[inject(production("","a",sequence([nonterminal("b"),marked(nonterminal("c")),nonterminal("d")])))],grammar([],[production("","a",sequence([nonterminal("b"),nonterminal("d")]))]),grammar([],[production("","a",sequence([nonterminal("b"),nonterminal("c"),nonterminal("d")]))])>,
"inline": <[inline("wez")],grammar([],[production("","foo",nonterminal("wez")),production("","bar",sequence([nonterminal("wez"),terminal(".."),nonterminal("wez")])),production("","wez",star(nonterminal("qux")))]),grammar([],[production("","foo",star(nonterminal("qux"))),production("","bar",sequence([star(nonterminal("qux")),terminal(".."),star(nonterminal("qux"))]))])>,
"introduce": <[introduce([production("","c",nonterminal("a")),production("","c",nonterminal("b"))])],grammar([],[production("","a",nonterminal("b")),production("","b",epsilon())]),grammar([],[production("","a",nonterminal("b")),production("","b",epsilon()),production("","c",nonterminal("a")),production("","c",nonterminal("b"))])>,
"iterate_l": <[iterate(production("binary","expr",sequence([star(sequence([nonterminal("expr"),nonterminal("op")])),nonterminal("expr")])))],grammar([],[production("constant","expr",nonterminal("int")),production("binary","expr",sequence([nonterminal("expr"),nonterminal("op"),nonterminal("expr")]))]),grammar([],[production("constant","expr",nonterminal("int")),production("binary","expr",sequence([star(sequence([nonterminal("expr"),nonterminal("op")])),nonterminal("expr")]))])>,
"iterate_p": <[iterate(production("sequence","expr",plus(nonterminal("expr"))))],grammar([],[production("terminal","expr",val(string())),production("sequence","expr",sequence([nonterminal("expr"),nonterminal("expr")]))]),grammar([],[production("terminal","expr",val(string())),production("sequence","expr",plus(nonterminal("expr")))])>,
"iterate_r": <[iterate(production("binary","expr",sequence([nonterminal("expr"),star(sequence([nonterminal("op"),nonterminal("expr")]))])))],grammar([],[production("constant","expr",nonterminal("int")),production("binary","expr",sequence([nonterminal("expr"),nonterminal("op"),nonterminal("expr")]))]),grammar([],[production("constant","expr",nonterminal("int")),production("binary","expr",sequence([nonterminal("expr"),star(sequence([nonterminal("op"),nonterminal("expr")]))]))])>,
"lassoc_l": <[lassoc(production("binary","expr",sequence([nonterminal("expr"),nonterminal("op"),nonterminal("expr")])))],grammar([],[production("constant","expr",nonterminal("int")),production("binary","expr",sequence([star(sequence([nonterminal("expr"),nonterminal("op")])),nonterminal("expr")]))]),grammar([],[production("constant","expr",nonterminal("int")),production("binary","expr",sequence([nonterminal("expr"),nonterminal("op"),nonterminal("expr")]))])>,
"lassoc_p": <[lassoc(production("sequence","expr",sequence([nonterminal("expr"),nonterminal("expr")])))],grammar([],[production("terminal","expr",val(string())),production("sequence","expr",plus(nonterminal("expr")))]),grammar([],[production("terminal","expr",val(string())),production("sequence","expr",sequence([nonterminal("expr"),nonterminal("expr")]))])>,
"lassoc_r": <[lassoc(production("binary","expr",sequence([nonterminal("expr"),nonterminal("op"),nonterminal("expr")])))],grammar([],[production("constant","expr",nonterminal("int")),production("binary","expr",sequence([nonterminal("expr"),star(sequence([nonterminal("op"),nonterminal("expr")]))]))]),grammar([],[production("constant","expr",nonterminal("int")),production("binary","expr",sequence([nonterminal("expr"),nonterminal("op"),nonterminal("expr")]))])>,
"massage_assoc_p": <[massage(sequence([plus(sequence([nonterminal("a"),nonterminal("b")])),nonterminal("a")]),sequence([nonterminal("a"),plus(sequence([nonterminal("b"),nonterminal("a")]))]),globally())],grammar([],[production("","N",sequence([plus(sequence([nonterminal("a"),nonterminal("b")])),nonterminal("a")]))]),grammar([],[production("","N",sequence([nonterminal("a"),plus(sequence([nonterminal("b"),nonterminal("a")]))]))])>,
"massage_assoc_q": <[massage(sequence([optional(sequence([nonterminal("a"),nonterminal("b")])),nonterminal("a")]),sequence([nonterminal("a"),optional(sequence([nonterminal("b"),nonterminal("a")]))]),globally())],grammar([],[production("","N",sequence([optional(sequence([nonterminal("a"),nonterminal("b")])),nonterminal("a")]))]),grammar([],[production("","N",sequence([nonterminal("a"),optional(sequence([nonterminal("b"),nonterminal("a")]))]))])>,
"massage_assoc_s": <[massage(sequence([star(sequence([nonterminal("a"),nonterminal("b")])),nonterminal("a")]),sequence([nonterminal("a"),star(sequence([nonterminal("b"),nonterminal("a")]))]),globally())],grammar([],[production("","N",sequence([star(sequence([nonterminal("a"),nonterminal("b")])),nonterminal("a")]))]),grammar([],[production("","N",sequence([nonterminal("a"),star(sequence([nonterminal("b"),nonterminal("a")]))]))])>,
"massage_ch_ep": <[massage(choice([epsilon(),plus(nonterminal("bar"))]),star(nonterminal("bar")),globally())],grammar([],[production("","foo",choice([plus(nonterminal("bar")),epsilon()]))]),grammar([],[production("","foo",star(nonterminal("bar")))])>,
"massage_ch_eq": <[massage(choice([epsilon(),optional(nonterminal("bar"))]),optional(nonterminal("bar")),globally())],grammar([],[production("","foo",choice([optional(nonterminal("bar")),epsilon()]))]),grammar([],[production("","foo",optional(nonterminal("bar")))])>,
"massage_ch_es": <[massage(choice([epsilon(),star(nonterminal("bar"))]),star(nonterminal("bar")),globally())],grammar([],[production("","foo",choice([star(nonterminal("bar")),epsilon()]))]),grammar([],[production("","foo",star(nonterminal("bar")))])>,
"massage_ch_ex": <[massage(choice([epsilon(),nonterminal("bar")]),optional(nonterminal("bar")),globally())],grammar([],[production("","foo",choice([nonterminal("bar"),epsilon()]))]),grammar([],[production("","foo",optional(nonterminal("bar")))])>,
"massage_ch_ps": <[massage(choice([plus(nonterminal("bar")),star(nonterminal("bar"))]),star(nonterminal("bar")),globally())],grammar([],[production("","foo",choice([star(nonterminal("bar")),plus(nonterminal("bar"))]))]),grammar([],[production("","foo",star(nonterminal("bar")))])>,
"massage_ch_qp": <[massage(choice([optional(nonterminal("bar")),plus(nonterminal("bar"))]),star(nonterminal("bar")),globally())],grammar([],[production("","foo",choice([plus(nonterminal("bar")),optional(nonterminal("bar"))]))]),grammar([],[production("","foo",star(nonterminal("bar")))])>,
"massage_ch_qs": <[massage(choice([optional(nonterminal("bar")),star(nonterminal("bar"))]),star(nonterminal("bar")),globally())],grammar([],[production("","foo",choice([star(nonterminal("bar")),optional(nonterminal("bar"))]))]),grammar([],[production("","foo",star(nonterminal("bar")))])>,
"massage_ch_xp": <[massage(choice([nonterminal("bar"),plus(nonterminal("bar"))]),plus(nonterminal("bar")),globally())],grammar([],[production("","foo",choice([plus(nonterminal("bar")),nonterminal("bar")]))]),grammar([],[production("","foo",plus(nonterminal("bar")))])>,
"massage_ch_xq": <[massage(choice([nonterminal("bar"),optional(nonterminal("bar"))]),optional(nonterminal("bar")),globally())],grammar([],[production("","foo",choice([optional(nonterminal("bar")),nonterminal("bar")]))]),grammar([],[production("","foo",optional(nonterminal("bar")))])>,
"massage_ch_xs": <[massage(choice([nonterminal("bar"),star(nonterminal("bar"))]),star(nonterminal("bar")),globally())],grammar([],[production("","foo",choice([star(nonterminal("bar")),nonterminal("bar")]))]),grammar([],[production("","foo",star(nonterminal("bar")))])>,
"massage_ch_xx1": <[massage(optional(nonterminal("bar")),choice([selectable("one",optional(nonterminal("bar"))),selectable("two",optional(nonterminal("bar")))]),globally()),anonymize(production("","foo",choice([plus(nonterminal("bar")),marked(selectable("one",optional(nonterminal("bar")))),selectable("two",optional(nonterminal("bar")))]))),massage(choice([optional(nonterminal("bar")),plus(nonterminal("bar"))]),star(nonterminal("bar")),globally()),anonymize(production("","foo",choice([star(nonterminal("bar")),marked(selectable("two",optional(nonterminal("bar"))))])))],grammar([],[production("","foo",choice([plus(nonterminal("bar")),optional(nonterminal("bar"))]))]),grammar([],[production("","foo",choice([optional(nonterminal("bar")),star(nonterminal("bar"))]))])>,
"massage_ch_xx2": <[massage(star(nonterminal("bar")),choice([selectable("one",star(nonterminal("bar"))),selectable("two",star(nonterminal("bar")))]),globally()),vertical(innt("foo")),massage(star(nonterminal("bar")),choice([epsilon(),plus(nonterminal("bar"))]),inlabel("one")),massage(star(nonterminal("bar")),choice([optional(nonterminal("bar")),plus(nonterminal("bar"))]),inlabel("two")),extract(production("","barplus",plus(nonterminal("bar"))),inlabel("one")),unlabel("one"),unlabel("two"),horizontal(innt("foo"))],grammar([],[production("","foo",star(nonterminal("bar")))]),grammar([],[production("","foo",choice([epsilon(),optional(nonterminal("bar")),plus(nonterminal("bar")),nonterminal("barplus")])),production("","barplus",plus(nonterminal("bar")))])>,
"massage_ch_xx3": <[massage(nonterminal("bar"),choice([selectable("one",nonterminal("bar")),selectable("two",nonterminal("bar")),selectable("three",nonterminal("bar"))]),globally())],grammar([],[production("","foo",nonterminal("bar"))]),grammar([],[production("","foo",choice([selectable("one",nonterminal("bar")),selectable("two",nonterminal("bar")),selectable("three",nonterminal("bar"))]))])>,
"massage_comp_pp": <[massage(plus(plus(nonterminal("bar"))),plus(nonterminal("bar")),globally())],grammar([],[production("","foo",plus(plus(nonterminal("bar"))))]),grammar([],[production("","foo",plus(nonterminal("bar")))])>,
"massage_comp_pq": <[massage(optional(plus(nonterminal("bar"))),star(nonterminal("bar")),globally())],grammar([],[production("","foo",optional(plus(nonterminal("bar"))))]),grammar([],[production("","foo",star(nonterminal("bar")))])>,
"massage_comp_ps": <[massage(star(plus(nonterminal("bar"))),star(nonterminal("bar")),globally())],grammar([],[production("","foo",star(plus(nonterminal("bar"))))]),grammar([],[production("","foo",star(nonterminal("bar")))])>,
"massage_comp_qp": <[massage(plus(optional(nonterminal("bar"))),star(nonterminal("bar")),globally())],grammar([],[production("","foo",plus(optional(nonterminal("bar"))))]),grammar([],[production("","foo",star(nonterminal("bar")))])>,
"massage_comp_qq": <[massage(optional(optional(nonterminal("bar"))),optional(nonterminal("bar")),globally())],grammar([],[production("","foo",optional(optional(nonterminal("bar"))))]),grammar([],[production("","foo",optional(nonterminal("bar")))])>,
"massage_comp_qs": <[massage(star(optional(nonterminal("bar"))),star(nonterminal("bar")),globally())],grammar([],[production("","foo",star(optional(nonterminal("bar"))))]),grammar([],[production("","foo",star(nonterminal("bar")))])>,
"massage_comp_sp": <[massage(plus(star(nonterminal("bar"))),star(nonterminal("bar")),globally())],grammar([],[production("","foo",plus(star(nonterminal("bar"))))]),grammar([],[production("","foo",star(nonterminal("bar")))])>,
"massage_comp_sq": <[massage(optional(star(nonterminal("bar"))),star(nonterminal("bar")),globally())],grammar([],[production("","foo",optional(star(nonterminal("bar"))))]),grammar([],[production("","foo",star(nonterminal("bar")))])>,
"massage_comp_ss": <[massage(star(star(nonterminal("bar"))),star(nonterminal("bar")),globally())],grammar([],[production("","foo",star(star(nonterminal("bar"))))]),grammar([],[production("","foo",star(nonterminal("bar")))])>,
"massage_complex": <[massage(optional(sequence([star(nonterminal("foo")),optional(nonterminal("bar"))])),choice([epsilon(),sequence([star(nonterminal("foo")),optional(nonterminal("bar"))])]),globally()),massage(optional(nonterminal("bar")),choice([nonterminal("bar"),epsilon()]),globally()),distribute(innt("wez")),massage(sequence([nonterminal("foo"),star(nonterminal("foo"))]),plus(nonterminal("foo")),globally()),massage(choice([nonterminal("foo"),plus(nonterminal("foo"))]),plus(nonterminal("foo")),globally()),factor(choice([plus(nonterminal("foo")),sequence([plus(nonterminal("foo")),nonterminal("bar")])]),sequence([plus(nonterminal("foo")),choice([nonterminal("bar"),epsilon()])]),globally()),massage(choice([nonterminal("bar"),epsilon()]),optional(nonterminal("bar")),globally())],grammar([],[production("","wez",sequence([nonterminal("foo"),optional(sequence([star(nonterminal("foo")),optional(nonterminal("bar"))]))]))]),grammar([],[production("","wez",sequence([plus(nonterminal("foo")),optional(nonterminal("bar"))]))])>,
"massage_distr_ch": <[massage(optional(choice([nonterminal("bar"),nonterminal("qux")])),choice([choice([nonterminal("bar"),nonterminal("qux")]),epsilon()]),globally()),massage(epsilon(),choice([selectable("bar",epsilon()),selectable("qux",epsilon())]),globally()),factor(choice([choice([nonterminal("bar"),nonterminal("qux")]),choice([selectable("bar",epsilon()),selectable("qux",epsilon())])]),choice([choice([nonterminal("bar"),selectable("bar",epsilon())]),choice([nonterminal("qux"),selectable("qux",epsilon())])]),globally()),anonymize(production("","foo",choice([choice([nonterminal("bar"),marked(selectable("bar",epsilon()))]),choice([nonterminal("qux"),selectable("qux",epsilon())])]))),massage(choice([nonterminal("bar"),epsilon()]),optional(nonterminal("bar")),globally()),anonymize(production("","foo",choice([optional(nonterminal("bar")),choice([nonterminal("qux"),marked(selectable("qux",epsilon()))])]))),massage(choice([nonterminal("qux"),epsilon()]),optional(nonterminal("qux")),globally())],grammar([],[production("","foo",optional(choice([nonterminal("bar"),nonterminal("qux")])))]),grammar([],[production("","foo",choice([optional(nonterminal("bar")),optional(nonterminal("qux"))]))])>,
"massage_sel_s": <[massage(star(selectable("fun",nonterminal("function"))),selectable("fun",star(nonterminal("function"))),globally())],grammar([],[production("","program",star(selectable("fun",nonterminal("function"))))]),grammar([],[production("","program",selectable("fun",star(nonterminal("function"))))])>,
"massage_seq_pq": <[massage(sequence([plus(nonterminal("bar")),optional(nonterminal("bar"))]),plus(nonterminal("bar")),globally()),massage(plus(nonterminal("bar")),sequence([optional(nonterminal("bar")),plus(nonterminal("bar"))]),globally())],grammar([],[production("","foo",sequence([plus(nonterminal("bar")),optional(nonterminal("bar"))]))]),grammar([],[production("","foo",sequence([optional(nonterminal("bar")),plus(nonterminal("bar"))]))])>,
"massage_seq_ps": <[massage(sequence([plus(nonterminal("bar")),star(nonterminal("bar"))]),plus(nonterminal("bar")),globally()),massage(plus(nonterminal("bar")),sequence([star(nonterminal("bar")),plus(nonterminal("bar"))]),globally())],grammar([],[production("","foo",sequence([plus(nonterminal("bar")),star(nonterminal("bar"))]))]),grammar([],[production("","foo",sequence([star(nonterminal("bar")),plus(nonterminal("bar"))]))])>,
"massage_seq_sq": <[massage(sequence([star(nonterminal("bar")),optional(nonterminal("bar"))]),star(nonterminal("bar")),globally()),massage(star(nonterminal("bar")),sequence([optional(nonterminal("bar")),star(nonterminal("bar"))]),globally())],grammar([],[production("","foo",sequence([star(nonterminal("bar")),optional(nonterminal("bar"))]))]),grammar([],[production("","foo",sequence([optional(nonterminal("bar")),star(nonterminal("bar"))]))])>,
"massage_seq_ss": <[massage(sequence([star(nonterminal("bar")),star(nonterminal("bar"))]),star(nonterminal("bar")),globally())],grammar([],[production("","foo",sequence([star(nonterminal("bar")),star(nonterminal("bar"))]))]),grammar([],[production("","foo",star(nonterminal("bar")))])>,
"massage_seq_xs": <[massage(sequence([nonterminal("bar"),star(nonterminal("bar"))]),plus(nonterminal("bar")),globally()),massage(plus(nonterminal("bar")),sequence([star(nonterminal("bar")),nonterminal("bar")]),globally())],grammar([],[production("","foo",sequence([nonterminal("bar"),star(nonterminal("bar"))]))]),grammar([],[production("","foo",sequence([star(nonterminal("bar")),nonterminal("bar")]))])>,
"narrow_global": <[narrow(star(nonterminal("function")),plus(nonterminal("function")),globally())],grammar([],[production("","program",selectable("fun",star(nonterminal("function"))))]),grammar([],[production("","program",selectable("fun",plus(nonterminal("function"))))])>,
"narrow_l": <[narrow(plus(nonterminal("function")),nonterminal("function"),inlabel("main"))],grammar([],[production("main","program",selectable("fun",plus(nonterminal("function"))))]),grammar([],[production("main","program",selectable("fun",nonterminal("function")))])>,
"narrow_nt": <[narrow(plus(nonterminal("function")),nonterminal("function"),innt("program"))],grammar([],[production("","program",selectable("fun",plus(nonterminal("function"))))]),grammar([],[production("","program",selectable("fun",nonterminal("function")))])>,
"permute": <[permute(production("","a",sequence([nonterminal("b"),nonterminal("c"),star(nonterminal("d"))])))],grammar([],[production("","a",sequence([nonterminal("b"),star(nonterminal("d")),nonterminal("c")]))]),grammar([],[production("","a",sequence([nonterminal("b"),nonterminal("c"),star(nonterminal("d"))]))])>,
"project": <[project(production("","a",sequence([nonterminal("b"),marked(nonterminal("c")),nonterminal("d")])))],grammar([],[production("","a",sequence([nonterminal("b"),nonterminal("c"),nonterminal("d")]))]),grammar([],[production("","a",sequence([nonterminal("b"),nonterminal("d")]))])>,
"rassoc_p": <[rassoc(production("sequence","expr",sequence([nonterminal("expr"),nonterminal("expr")])))],grammar([],[production("terminal","expr",val(string())),production("sequence","expr",plus(nonterminal("expr")))]),grammar([],[production("terminal","expr",val(string())),production("sequence","expr",sequence([nonterminal("expr"),nonterminal("expr")]))])>,
"rassoc_s": <[rassoc(production("binary","expr",sequence([nonterminal("expr"),nonterminal("op"),nonterminal("expr")])))],grammar([],[production("constant","expr",nonterminal("int")),production("binary","expr",sequence([nonterminal("expr"),star(sequence([nonterminal("op"),nonterminal("expr")]))]))]),grammar([],[production("constant","expr",nonterminal("int")),production("binary","expr",sequence([nonterminal("expr"),nonterminal("op"),nonterminal("expr")]))])>,
"redefine": <[redefine([production("","a",star(nonterminal("b")))])],grammar([],[production("","a",sequence([terminal("{"),nonterminal("b"),terminal("}")])),production("","b",nonterminal("a"))]),grammar([],[production("","a",star(nonterminal("b"))),production("","b",nonterminal("a"))])>,
"remove_horizontal": <[removeH(production("","foo",choice([marked(terminal("x")),nonterminal("bar"),nonterminal("wez")])))],grammar([],[production("","foo",choice([terminal("x"),nonterminal("bar"),nonterminal("wez")]))]),grammar([],[production("","foo",choice([nonterminal("bar"),nonterminal("wez")]))])>,
"remove_inside": <[removeH(production("","expr",sequence([optional(choice([marked(terminal("+")),terminal("-")])),nonterminal("int")])))],grammar([],[production("","expr",sequence([optional(choice([terminal("+"),terminal("-")])),nonterminal("int")]))]),grammar([],[production("","expr",sequence([optional(terminal("-")),nonterminal("int")]))])>,
"remove_vertical": <[removeV(production("","expr",nonterminal("id")))],grammar([],[production("","expr",nonterminal("int")),production("","expr",nonterminal("id"))]),grammar([],[production("","expr",nonterminal("int"))])>,
"rename4": <[renameS("op","operator",inlabel("binary"))],grammar([],[production("constant","expr",nonterminal("int")),production("binary","expr",sequence([nonterminal("expr"),selectable("op",nonterminal("binary_op")),nonterminal("expr")])),production("unary","expr",sequence([selectable("op",nonterminal("unary_op")),nonterminal("expr")]))]),grammar([],[production("constant","expr",nonterminal("int")),production("binary","expr",sequence([nonterminal("expr"),selectable("operator",nonterminal("binary_op")),nonterminal("expr")])),production("unary","expr",sequence([selectable("op",nonterminal("unary_op")),nonterminal("expr")]))])>,
"renameL": <[renameL("binary","binary_expr")],grammar([],[production("constant","expr",nonterminal("int")),production("binary","expr",sequence([nonterminal("expr"),selectable("op",nonterminal("binary_op")),nonterminal("expr")])),production("unary","expr",sequence([selectable("op",nonterminal("unary_op")),nonterminal("expr")]))]),grammar([],[production("constant","expr",nonterminal("int")),production("binary_expr","expr",sequence([nonterminal("expr"),selectable("op",nonterminal("binary_op")),nonterminal("expr")])),production("unary","expr",sequence([selectable("op",nonterminal("unary_op")),nonterminal("expr")]))])>,
"renameN": <[renameN("expr","exp")],grammar([],[production("constant","expr",nonterminal("int")),production("binary","expr",sequence([nonterminal("expr"),selectable("op",nonterminal("binary_op")),nonterminal("expr")])),production("unary","expr",sequence([selectable("op",nonterminal("unary_op")),nonterminal("expr")]))]),grammar([],[production("constant","exp",nonterminal("int")),production("binary","exp",sequence([nonterminal("exp"),selectable("op",nonterminal("binary_op")),nonterminal("exp")])),production("unary","exp",sequence([selectable("op",nonterminal("unary_op")),nonterminal("exp")]))])>,
"renameS": <[renameS("op","operator",globally())],grammar([],[production("constant","expr",nonterminal("int")),production("binary","expr",sequence([nonterminal("expr"),selectable("op",nonterminal("binary_op")),nonterminal("expr")])),production("unary","expr",sequence([selectable("op",nonterminal("unary_op")),nonterminal("expr")]))]),grammar([],[production("constant","expr",nonterminal("int")),production("binary","expr",sequence([nonterminal("expr"),selectable("operator",nonterminal("binary_op")),nonterminal("expr")])),production("unary","expr",sequence([selectable("operator",nonterminal("unary_op")),nonterminal("expr")]))])>,
"renameT": <[renameT("x","y")],grammar([],[production("","x",terminal("x"))]),grammar([],[production("","x",terminal("y"))])>,
"replace_choice": <[replace(choice([nonterminal("c"),nonterminal("b")]),nonterminal("d"),innt("a"))],grammar([],[production("","a",choice([nonterminal("b"),nonterminal("c")]))]),grammar([],[production("","a",nonterminal("d"))])>,
"replace_choice_part": <[replace(choice([sequence([nonterminal("b"),nonterminal("c")]),sequence([nonterminal("b"),nonterminal("e")])]),sequence([nonterminal("b"),choice([nonterminal("c"),nonterminal("e")])]),globally())],grammar([],[production("","a",choice([sequence([nonterminal("b"),nonterminal("c")]),sequence([nonterminal("b"),nonterminal("d")]),sequence([nonterminal("b"),nonterminal("e")])]))]),grammar([],[production("","a",choice([sequence([nonterminal("b"),choice([nonterminal("c"),nonterminal("e")])]),sequence([nonterminal("b"),nonterminal("d")])]))])>,
"replace_global": <[replace(nonterminal("x"),nonterminal("y"),globally())],grammar([],[production("l1","a",nonterminal("x")),production("l2","b",nonterminal("x")),production("l3","b",star(nonterminal("x"))),production("l4","c",nonterminal("x"))]),grammar([],[production("l1","a",nonterminal("y")),production("l2","b",nonterminal("y")),production("l3","b",star(nonterminal("y"))),production("l4","c",nonterminal("y"))])>,
"replace_l": <[replace(nonterminal("x"),nonterminal("y"),inlabel("l3"))],grammar([],[production("l1","a",nonterminal("x")),production("l2","b",nonterminal("x")),production("l3","b",star(nonterminal("x"))),production("l4","c",nonterminal("x"))]),grammar([],[production("l1","a",nonterminal("x")),production("l2","b",nonterminal("x")),production("l3","b",star(nonterminal("y"))),production("l4","c",nonterminal("x"))])>,
"replace_nt": <[replace(nonterminal("x"),nonterminal("y"),innt("b"))],grammar([],[production("l1","a",nonterminal("x")),production("l2","b",nonterminal("x")),production("l3","b",star(nonterminal("x"))),production("l4","c",nonterminal("x"))]),grammar([],[production("l1","a",nonterminal("x")),production("l2","b",nonterminal("y")),production("l3","b",star(nonterminal("y"))),production("l4","c",nonterminal("x"))])>,
"replace_seq": <[replace(sequence([nonterminal("bar"),nonterminal("wez")]),terminal("..."),globally())],grammar([],[production("","foo",sequence([star(sequence([nonterminal("bar"),nonterminal("wez")])),nonterminal("bar"),nonterminal("wez")]))]),grammar([],[production("","foo",sequence([star(terminal("...")),terminal("...")]))])>,
"reroot": <[reroot(["expr","op"])],grammar([],[production("constant","expr",nonterminal("int")),production("binary","expr",sequence([nonterminal("expr"),nonterminal("op"),nonterminal("expr")])),production("","op",terminal("==")),production("","op",terminal("+")),production("","op",terminal("-"))]),grammar(["expr","op"],[production("constant","expr",nonterminal("int")),production("binary","expr",sequence([nonterminal("expr"),nonterminal("op"),nonterminal("expr")])),production("","op",terminal("==")),production("","op",terminal("+")),production("","op",terminal("-"))])>,
"splitN2": <[splitN("foo",[production("D","bar",nonterminal("foo"))],nowhere())],grammar([],[production("A","foo",terminal("a")),production("B","foo",terminal("b")),production("D","foo",nonterminal("foo"))]),grammar([],[production("A","foo",terminal("a")),production("B","foo",terminal("b")),production("D","bar",nonterminal("foo"))])>,
"splitN3": <[splitN("foo",[production("D","bar",nonterminal("foo"))],inlabel("B"))],grammar([],[production("A","foo",terminal("a")),production("B","wez",nonterminal("foo")),production("D","foo",nonterminal("foo"))]),grammar([],[production("A","foo",terminal("a")),production("B","wez",nonterminal("bar")),production("D","bar",nonterminal("foo"))])>,
"splitN4": <[splitN("foo",[production("D","bar",nonterminal("foo"))],inlabel("B"))],grammar([],[production("A","foo",terminal("a")),production("B","foo",nonterminal("foo")),production("D","foo",nonterminal("foo"))]),grammar([],[production("A","foo",terminal("a")),production("B","foo",nonterminal("bar")),production("D","bar",nonterminal("foo"))])>,
"strip2": <[strip("allLabels")],grammar([],[production("constant","expr",selectable("value",nonterminal("int"))),production("binary","expr",sequence([terminal("("),nonterminal("expr"),selectable("op",nonterminal("binary_op")),nonterminal("expr"),terminal(")")])),production("unary","expr",sequence([selectable("op",nonterminal("unary_op")),nonterminal("expr")]))]),grammar([],[production("","expr",selectable("value",nonterminal("int"))),production("","expr",sequence([terminal("("),nonterminal("expr"),selectable("op",nonterminal("binary_op")),nonterminal("expr"),terminal(")")])),production("","expr",sequence([selectable("op",nonterminal("unary_op")),nonterminal("expr")]))])>,
"strip4": <[strip("allSelectors")],grammar([],[production("constant","expr",selectable("value",nonterminal("int"))),production("binary","expr",sequence([terminal("("),nonterminal("expr"),selectable("op",nonterminal("binary_op")),nonterminal("expr"),terminal(")")])),production("unary","expr",sequence([selectable("op",nonterminal("unary_op")),nonterminal("expr")]))]),grammar([],[production("constant","expr",nonterminal("int")),production("binary","expr",sequence([terminal("("),nonterminal("expr"),nonterminal("binary_op"),nonterminal("expr"),terminal(")")])),production("unary","expr",sequence([nonterminal("unary_op"),nonterminal("expr")]))])>,
"unchain_l": <[unchain(production("binary","expr",nonterminal("binexpr")))],grammar([],[production("constant","expr",nonterminal("int")),production("binary","expr",nonterminal("binexpr")),production("","binexpr",sequence([nonterminal("expr"),nonterminal("op"),nonterminal("expr")]))]),grammar([],[production("constant","expr",nonterminal("int")),production("binary","expr",sequence([nonterminal("expr"),nonterminal("op"),nonterminal("expr")]))])>,
"unchain_n": <[unchain(production("","ClassDeclaration",nonterminal("NormalClassDeclaration")))],grammar([],[production("","ClassDeclaration",nonterminal("NormalClassDeclaration")),production("","NormalClassDeclaration",sequence([terminal("class"),nonterminal("Identifier"),nonterminal("ClassBody")])),production("","ClassBody",sequence([terminal("{"),optional(nonterminal("ClassBodyDeclarations")),terminal("}")]))]),grammar([],[production("NormalClassDeclaration","ClassDeclaration",sequence([terminal("class"),nonterminal("Identifier"),nonterminal("ClassBody")])),production("","ClassBody",sequence([terminal("{"),optional(nonterminal("ClassBodyDeclarations")),terminal("}")]))])>,
"undefine1": <[undefine(["op"])],grammar([],[production("","expr",nonterminal("int")),production("","expr",sequence([nonterminal("expr"),nonterminal("op"),nonterminal("expr")])),production("","op",terminal("+")),production("","op",terminal("-"))]),grammar([],[production("","expr",nonterminal("int")),production("","expr",sequence([nonterminal("expr"),nonterminal("op"),nonterminal("expr")]))])>,
"undefine2": <[undefine(["bar","qux"])],grammar([],[production("","foo",nonterminal("bar")),production("","bar",nonterminal("wez")),production("","wez",nonterminal("qux")),production("","qux",nonterminal("foo"))]),grammar([],[production("","foo",nonterminal("bar")),production("","wez",nonterminal("qux"))])>,
"unfold": <[unfold("bar",globally())],grammar([],[production("l1","foo",nonterminal("bar")),production("l2","qux",nonterminal("bar")),production("","bar",star(nonterminal("wez")))]),grammar([],[production("l1","foo",star(nonterminal("wez"))),production("l2","qux",star(nonterminal("wez"))),production("","bar",star(nonterminal("wez")))])>,
"unfold_l": <[unfold("bar",inlabel("l1"))],grammar([],[production("l1","foo",nonterminal("bar")),production("l2","qux",nonterminal("bar")),production("","bar",star(nonterminal("wez")))]),grammar([],[production("l1","foo",star(nonterminal("wez"))),production("l2","qux",nonterminal("bar")),production("","bar",star(nonterminal("wez")))])>,
"unfold_normalize": <[unfold("c",globally())],grammar([],[production("","a",choice([nonterminal("b"),nonterminal("c")])),production("","c",nonterminal("b"))]),grammar([],[production("","a",nonterminal("b")),production("","c",nonterminal("b"))])>,
"unfold_nt": <[unfold("bar",innt("foo"))],grammar([],[production("l1","foo",nonterminal("bar")),production("l2","qux",nonterminal("bar")),production("","bar",star(nonterminal("wez")))]),grammar([],[production("l1","foo",star(nonterminal("wez"))),production("l2","qux",nonterminal("bar")),production("","bar",star(nonterminal("wez")))])>,
"unite_eq": <[unite("b","a")],grammar([],[production("","a",epsilon()),production("","b",epsilon())]),grammar([],[production("","a",epsilon())])>,
"unite_normal": <[unite("bar","foo")],grammar([],[production("","foo",terminal("a")),production("","foo",terminal("b")),production("","bar",terminal("d"))]),grammar([],[production("","foo",terminal("a")),production("","foo",terminal("b")),production("","foo",terminal("d"))])>,
"unlabel": <[unlabel("intexpr")],grammar([],[production("intexpr","expr",nonterminal("int"))]),grammar([],[production("","expr",nonterminal("int"))])>,
"upgrade": <[upgrade(production("","a",sequence([marked(nonterminal("b")),nonterminal("c")])),production("","b",sequence([nonterminal("d"),nonterminal("e")])))],grammar([],[production("","a",sequence([nonterminal("d"),nonterminal("e"),nonterminal("c")])),production("","b",sequence([nonterminal("d"),nonterminal("e")])),production("","b",sequence([nonterminal("f"),nonterminal("g")]))]),grammar([],[production("","a",sequence([nonterminal("b"),nonterminal("c")])),production("","b",sequence([nonterminal("d"),nonterminal("e")])),production("","b",sequence([nonterminal("f"),nonterminal("g")]))])>,
"vertical_l": <[vertical(inlabel("somedecs"))],grammar([],[production("nodecs","decs",epsilon()),production("somedecs","decs",choice([nonterminal("dec"),sequence([nonterminal("dec"),nonterminal("decs")])]))]),grammar([],[production("nodecs","decs",epsilon()),production("","decs",nonterminal("dec")),production("","decs",sequence([nonterminal("dec"),nonterminal("decs")]))])>,
"vertical_s": <[vertical(innt("decs"))],grammar([],[production("","decs",choice([selectable("onedec",nonterminal("dec")),selectable("moredecs",sequence([nonterminal("dec"),nonterminal("decs")]))]))]),grammar([],[production("onedec","decs",nonterminal("dec")),production("moredecs","decs",sequence([nonterminal("dec"),nonterminal("decs")]))])>,
"widen_global": <[widen(plus(nonterminal("function")),star(nonterminal("function")),globally())],grammar([],[production("","program",selectable("fun",plus(nonterminal("function"))))]),grammar([],[production("","program",selectable("fun",star(nonterminal("function"))))])>,
"widen_l": <[widen(nonterminal("function"),plus(nonterminal("function")),inlabel("main"))],grammar([],[production("main","program",selectable("fun",nonterminal("function")))]),grammar([],[production("main","program",selectable("fun",plus(nonterminal("function"))))])>,
"widen_nt": <[widen(nonterminal("function"),plus(nonterminal("function")),innt("program"))],grammar([],[production("","program",selectable("fun",nonterminal("function")))]),grammar([],[production("","program",selectable("fun",plus(nonterminal("function"))))])>,
"widen_sub": <[widen(sequence([nonterminal("bar"),nonterminal("wez")]),star(sequence([nonterminal("bar"),nonterminal("wez")])),globally())],grammar([],[production("","foo",sequence([nonterminal("bar"),nonterminal("wez"),nonterminal("qux")]))]),grammar([],[production("","foo",sequence([star(sequence([nonterminal("bar"),nonterminal("wez")])),nonterminal("qux")]))])>,
"yaccify_eps": <[yaccify([production("","foo",epsilon()),production("","foo",sequence([nonterminal("foo"),nonterminal("bar")]))])],grammar([],[production("","foo",star(nonterminal("bar")))]),grammar([],[production("","foo",epsilon()),production("","foo",sequence([nonterminal("foo"),nonterminal("bar")]))])>,
"yaccify_left": <[yaccify([production("","foo",nonterminal("bar")),production("","foo",sequence([nonterminal("foo"),nonterminal("wez")]))])],grammar([],[production("","foo",sequence([nonterminal("bar"),star(nonterminal("wez"))]))]),grammar([],[production("","foo",nonterminal("bar")),production("","foo",sequence([nonterminal("foo"),nonterminal("wez")]))])>,
"yaccify_left_plus": <[yaccify([production("","foo",nonterminal("bar")),production("","foo",sequence([nonterminal("foo"),nonterminal("bar")]))])],grammar([],[production("","foo",plus(nonterminal("bar")))]),grammar([],[production("","foo",nonterminal("bar")),production("","foo",sequence([nonterminal("foo"),nonterminal("bar")]))])>,
"yaccify_right": <[yaccify([production("","foo",nonterminal("bar")),production("","foo",sequence([nonterminal("wez"),nonterminal("foo")]))])],grammar([],[production("","foo",sequence([star(nonterminal("wez")),nonterminal("bar")]))]),grammar([],[production("","foo",nonterminal("bar")),production("","foo",sequence([nonterminal("wez"),nonterminal("foo")]))])>,
"yaccify_right_plus": <[yaccify([production("","foo",nonterminal("bar")),production("","foo",sequence([nonterminal("bar"),nonterminal("foo")]))])],grammar([],[production("","foo",plus(nonterminal("bar")))]),grammar([],[production("","foo",nonterminal("bar")),production("","foo",sequence([nonterminal("bar"),nonterminal("foo")]))])>,
"splitN1": <[splitN("foo",[production("D","bar",terminal("d"))],nowhere())],grammar([],[production("A","foo",terminal("a")),production("B","foo",terminal("b")),production("D","foo",terminal("d"))]),grammar([],[production("A","foo",terminal("a")),production("B","foo",terminal("b")),production("D","bar",terminal("d"))])>,
"bypass": <[bypass()],grammar([],[production("","a",sequence([nonterminal("b"),star(nonterminal("d")),nonterminal("c")]))]),grammar([],[production("","a",sequence([nonterminal("b"),star(nonterminal("d")),nonterminal("c")]))])>,
"massage_nn": <[massage(nonterminal("foo"),not(not(nonterminal("foo"))),globally())],grammar([],[production("","foo",sequence([plus(nonterminal("bar")),nonterminal("foo")]))]),grammar([],[production("","foo",sequence([plus(nonterminal("bar")),not(not(nonterminal("foo")))]))])>,
"massage_morgan1": <[massage(not(allof([nonterminal("foo"),nonterminal("bar")])),choice([not(nonterminal("bar")),not(nonterminal("foo"))]),globally())],grammar([],[production("","foo",not(allof([nonterminal("foo"),nonterminal("bar")])))]),grammar([],[production("","foo",choice([not(nonterminal("foo")),not(nonterminal("bar"))]))])>,
"massage_morgan2": <[massage(not(allof([not(nonterminal("foo")),not(nonterminal("bar"))])),choice([nonterminal("foo"),nonterminal("bar")]),globally())],grammar([],[production("","foo",not(allof([not(nonterminal("foo")),not(nonterminal("bar"))])))]),grammar([],[production("","foo",choice([nonterminal("bar"),nonterminal("foo")]))])>,
"massage_morgan3": <[massage(not(choice([nonterminal("foo"),nonterminal("bar")])),allof([not(nonterminal("bar")),not(nonterminal("foo"))]),globally())],grammar([],[production("","foo",not(choice([nonterminal("foo"),nonterminal("bar")])))]),grammar([],[production("","foo",allof([not(nonterminal("foo")),not(nonterminal("bar"))]))])>,
"massage_morgan4": <[massage(not(choice([not(nonterminal("foo")),not(nonterminal("bar"))])),allof([nonterminal("foo"),nonterminal("bar")]),globally())],grammar([],[production("","foo",not(choice([not(nonterminal("foo")),not(nonterminal("bar"))])))]),grammar([],[production("","foo",allof([nonterminal("bar"),nonterminal("foo")]))])>,
"splitT1": <[splitT("ab",["a","b"],globally())],grammar([],[production("","foo",terminal("ab")),production("","bar",terminal("ab"))]),grammar([],[production("","foo",sequence([terminal("a"),terminal("b")])),production("","bar",sequence([terminal("a"),terminal("b")]))])>,
"splitT2": <[splitT("ab",["a","b"],innt("foo"))],grammar([],[production("","foo",terminal("ab")),production("","bar",terminal("ab"))]),grammar([],[production("","foo",sequence([terminal("a"),terminal("b")])),production("","bar",terminal("ab"))])>,
"splitT3": <[splitT("abc",["a","bc"],innt("foo"))],grammar([],[production("","foo",terminal("abc")),production("","bar",terminal("ab"))]),grammar([],[production("","foo",sequence([terminal("a"),terminal("bc")])),production("","bar",terminal("ab"))])>,
"splitT4": <[splitT("bc",["b","c"],innt("foo"))],grammar([],[production("","foo",sequence([terminal("a"),terminal("bc")])),production("","bar",terminal("bc"))]),grammar([],[production("","foo",sequence([terminal("a"),terminal("b"),terminal("c")])),production("","bar",terminal("bc"))])>
);

void show_abridge() { <xbgf,bgf1,bgf2> = test_data["abridge"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_abstractize() { <xbgf,bgf1,bgf2> = test_data["abstractize"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_add_horizontal() { <xbgf,bgf1,bgf2> = test_data["add_horizontal"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_add_inside() { <xbgf,bgf1,bgf2> = test_data["add_inside"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_add_vertical() { <xbgf,bgf1,bgf2> = test_data["add_vertical"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_add_vertical_middle() { <xbgf,bgf1,bgf2> = test_data["add_vertical_middle"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_add_vertical_scattered() { <xbgf,bgf1,bgf2> = test_data["add_vertical_scattered"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_anonymize_multiple() { <xbgf,bgf1,bgf2> = test_data["anonymize_multiple"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_anonymize_single() { <xbgf,bgf1,bgf2> = test_data["anonymize_single"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_appear_q() { <xbgf,bgf1,bgf2> = test_data["appear_q"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_appear_s() { <xbgf,bgf1,bgf2> = test_data["appear_s"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_chain_l() { <xbgf,bgf1,bgf2> = test_data["chain_l"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_chain_n() { <xbgf,bgf1,bgf2> = test_data["chain_n"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_concretize() { <xbgf,bgf1,bgf2> = test_data["concretize"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_deanonymize_multiple() { <xbgf,bgf1,bgf2> = test_data["deanonymize_multiple"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_deanonymize_single() { <xbgf,bgf1,bgf2> = test_data["deanonymize_single"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_define() { <xbgf,bgf1,bgf2> = test_data["define"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_designate() { <xbgf,bgf1,bgf2> = test_data["designate"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_detour() { <xbgf,bgf1,bgf2> = test_data["detour"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_deyaccify_eps() { <xbgf,bgf1,bgf2> = test_data["deyaccify_eps"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_deyaccify_left() { <xbgf,bgf1,bgf2> = test_data["deyaccify_left"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_deyaccify_left_plus() { <xbgf,bgf1,bgf2> = test_data["deyaccify_left_plus"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_deyaccify_right() { <xbgf,bgf1,bgf2> = test_data["deyaccify_right"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_deyaccify_right_plus() { <xbgf,bgf1,bgf2> = test_data["deyaccify_right_plus"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_disappear_q() { <xbgf,bgf1,bgf2> = test_data["disappear_q"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_disappear_s() { <xbgf,bgf1,bgf2> = test_data["disappear_s"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_distribute_l() { <xbgf,bgf1,bgf2> = test_data["distribute_l"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_distribute_nt() { <xbgf,bgf1,bgf2> = test_data["distribute_nt"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_downgrade() { <xbgf,bgf1,bgf2> = test_data["downgrade"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_eliminate() { <xbgf,bgf1,bgf2> = test_data["eliminate"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_equate1() { <xbgf,bgf1,bgf2> = test_data["equate1"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_equate2() { <xbgf,bgf1,bgf2> = test_data["equate2"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_equate3() { <xbgf,bgf1,bgf2> = test_data["equate3"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_equate4() { <xbgf,bgf1,bgf2> = test_data["equate4"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_extract_l() { <xbgf,bgf1,bgf2> = test_data["extract_l"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_extract_nt() { <xbgf,bgf1,bgf2> = test_data["extract_nt"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_extract_subch() { <xbgf,bgf1,bgf2> = test_data["extract_subch"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_extract_subseq_multiple() { <xbgf,bgf1,bgf2> = test_data["extract_subseq_multiple"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_extract_subseq_single() { <xbgf,bgf1,bgf2> = test_data["extract_subseq_single"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_factor_eps() { <xbgf,bgf1,bgf2> = test_data["factor_eps"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_factor_global() { <xbgf,bgf1,bgf2> = test_data["factor_global"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_factor_local() { <xbgf,bgf1,bgf2> = test_data["factor_local"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_factor_nt() { <xbgf,bgf1,bgf2> = test_data["factor_nt"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_fold() { <xbgf,bgf1,bgf2> = test_data["fold"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_fold_l() { <xbgf,bgf1,bgf2> = test_data["fold_l"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_fold_nt() { <xbgf,bgf1,bgf2> = test_data["fold_nt"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_horizontal_l() { <xbgf,bgf1,bgf2> = test_data["horizontal_l"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_horizontal_n() { <xbgf,bgf1,bgf2> = test_data["horizontal_n"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_import() { <xbgf,bgf1,bgf2> = test_data["import"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_inject() { <xbgf,bgf1,bgf2> = test_data["inject"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_inline() { <xbgf,bgf1,bgf2> = test_data["inline"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_introduce() { <xbgf,bgf1,bgf2> = test_data["introduce"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_iterate_l() { <xbgf,bgf1,bgf2> = test_data["iterate_l"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_iterate_p() { <xbgf,bgf1,bgf2> = test_data["iterate_p"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_iterate_r() { <xbgf,bgf1,bgf2> = test_data["iterate_r"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_lassoc_l() { <xbgf,bgf1,bgf2> = test_data["lassoc_l"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_lassoc_p() { <xbgf,bgf1,bgf2> = test_data["lassoc_p"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_lassoc_r() { <xbgf,bgf1,bgf2> = test_data["lassoc_r"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_assoc_p() { <xbgf,bgf1,bgf2> = test_data["massage_assoc_p"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_assoc_q() { <xbgf,bgf1,bgf2> = test_data["massage_assoc_q"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_assoc_s() { <xbgf,bgf1,bgf2> = test_data["massage_assoc_s"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_ch_ep() { <xbgf,bgf1,bgf2> = test_data["massage_ch_ep"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_ch_eq() { <xbgf,bgf1,bgf2> = test_data["massage_ch_eq"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_ch_es() { <xbgf,bgf1,bgf2> = test_data["massage_ch_es"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_ch_ex() { <xbgf,bgf1,bgf2> = test_data["massage_ch_ex"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_ch_ps() { <xbgf,bgf1,bgf2> = test_data["massage_ch_ps"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_ch_qp() { <xbgf,bgf1,bgf2> = test_data["massage_ch_qp"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_ch_qs() { <xbgf,bgf1,bgf2> = test_data["massage_ch_qs"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_ch_xp() { <xbgf,bgf1,bgf2> = test_data["massage_ch_xp"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_ch_xq() { <xbgf,bgf1,bgf2> = test_data["massage_ch_xq"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_ch_xs() { <xbgf,bgf1,bgf2> = test_data["massage_ch_xs"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_ch_xx1() { <xbgf,bgf1,bgf2> = test_data["massage_ch_xx1"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_ch_xx2() { <xbgf,bgf1,bgf2> = test_data["massage_ch_xx2"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_ch_xx3() { <xbgf,bgf1,bgf2> = test_data["massage_ch_xx3"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_comp_pp() { <xbgf,bgf1,bgf2> = test_data["massage_comp_pp"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_comp_pq() { <xbgf,bgf1,bgf2> = test_data["massage_comp_pq"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_comp_ps() { <xbgf,bgf1,bgf2> = test_data["massage_comp_ps"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_comp_qp() { <xbgf,bgf1,bgf2> = test_data["massage_comp_qp"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_comp_qq() { <xbgf,bgf1,bgf2> = test_data["massage_comp_qq"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_comp_qs() { <xbgf,bgf1,bgf2> = test_data["massage_comp_qs"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_comp_sp() { <xbgf,bgf1,bgf2> = test_data["massage_comp_sp"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_comp_sq() { <xbgf,bgf1,bgf2> = test_data["massage_comp_sq"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_comp_ss() { <xbgf,bgf1,bgf2> = test_data["massage_comp_ss"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_complex() { <xbgf,bgf1,bgf2> = test_data["massage_complex"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_distr_ch() { <xbgf,bgf1,bgf2> = test_data["massage_distr_ch"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_sel_s() { <xbgf,bgf1,bgf2> = test_data["massage_sel_s"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_seq_pq() { <xbgf,bgf1,bgf2> = test_data["massage_seq_pq"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_seq_ps() { <xbgf,bgf1,bgf2> = test_data["massage_seq_ps"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_seq_sq() { <xbgf,bgf1,bgf2> = test_data["massage_seq_sq"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_seq_ss() { <xbgf,bgf1,bgf2> = test_data["massage_seq_ss"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_seq_xs() { <xbgf,bgf1,bgf2> = test_data["massage_seq_xs"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_narrow_global() { <xbgf,bgf1,bgf2> = test_data["narrow_global"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_narrow_l() { <xbgf,bgf1,bgf2> = test_data["narrow_l"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_narrow_nt() { <xbgf,bgf1,bgf2> = test_data["narrow_nt"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_permute() { <xbgf,bgf1,bgf2> = test_data["permute"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_project() { <xbgf,bgf1,bgf2> = test_data["project"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_rassoc_p() { <xbgf,bgf1,bgf2> = test_data["rassoc_p"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_rassoc_s() { <xbgf,bgf1,bgf2> = test_data["rassoc_s"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_redefine() { <xbgf,bgf1,bgf2> = test_data["redefine"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_remove_horizontal() { <xbgf,bgf1,bgf2> = test_data["remove_horizontal"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_remove_inside() { <xbgf,bgf1,bgf2> = test_data["remove_inside"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_remove_vertical() { <xbgf,bgf1,bgf2> = test_data["remove_vertical"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_rename4() { <xbgf,bgf1,bgf2> = test_data["rename4"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_renameL() { <xbgf,bgf1,bgf2> = test_data["renameL"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_renameN() { <xbgf,bgf1,bgf2> = test_data["renameN"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_renameS() { <xbgf,bgf1,bgf2> = test_data["renameS"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_renameT() { <xbgf,bgf1,bgf2> = test_data["renameT"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_replace_choice() { <xbgf,bgf1,bgf2> = test_data["replace_choice"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_replace_choice_part() { <xbgf,bgf1,bgf2> = test_data["replace_choice_part"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_replace_global() { <xbgf,bgf1,bgf2> = test_data["replace_global"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_replace_l() { <xbgf,bgf1,bgf2> = test_data["replace_l"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_replace_nt() { <xbgf,bgf1,bgf2> = test_data["replace_nt"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_replace_seq() { <xbgf,bgf1,bgf2> = test_data["replace_seq"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_reroot() { <xbgf,bgf1,bgf2> = test_data["reroot"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_splitN2() { <xbgf,bgf1,bgf2> = test_data["splitN2"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_splitN3() { <xbgf,bgf1,bgf2> = test_data["splitN3"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_splitN4() { <xbgf,bgf1,bgf2> = test_data["splitN4"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_strip2() { <xbgf,bgf1,bgf2> = test_data["strip2"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_strip4() { <xbgf,bgf1,bgf2> = test_data["strip4"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_unchain_l() { <xbgf,bgf1,bgf2> = test_data["unchain_l"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_unchain_n() { <xbgf,bgf1,bgf2> = test_data["unchain_n"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_undefine1() { <xbgf,bgf1,bgf2> = test_data["undefine1"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_undefine2() { <xbgf,bgf1,bgf2> = test_data["undefine2"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_unfold() { <xbgf,bgf1,bgf2> = test_data["unfold"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_unfold_l() { <xbgf,bgf1,bgf2> = test_data["unfold_l"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_unfold_normalize() { <xbgf,bgf1,bgf2> = test_data["unfold_normalize"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_unfold_nt() { <xbgf,bgf1,bgf2> = test_data["unfold_nt"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_unite_eq() { <xbgf,bgf1,bgf2> = test_data["unite_eq"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_unite_normal() { <xbgf,bgf1,bgf2> = test_data["unite_normal"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_unlabel() { <xbgf,bgf1,bgf2> = test_data["unlabel"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_upgrade() { <xbgf,bgf1,bgf2> = test_data["upgrade"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_vertical_l() { <xbgf,bgf1,bgf2> = test_data["vertical_l"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_vertical_s() { <xbgf,bgf1,bgf2> = test_data["vertical_s"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_widen_global() { <xbgf,bgf1,bgf2> = test_data["widen_global"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_widen_l() { <xbgf,bgf1,bgf2> = test_data["widen_l"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_widen_nt() { <xbgf,bgf1,bgf2> = test_data["widen_nt"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_widen_sub() { <xbgf,bgf1,bgf2> = test_data["widen_sub"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_yaccify_eps() { <xbgf,bgf1,bgf2> = test_data["yaccify_eps"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_yaccify_left() { <xbgf,bgf1,bgf2> = test_data["yaccify_left"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_yaccify_left_plus() { <xbgf,bgf1,bgf2> = test_data["yaccify_left_plus"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_yaccify_right() { <xbgf,bgf1,bgf2> = test_data["yaccify_right"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_yaccify_right_plus() { <xbgf,bgf1,bgf2> = test_data["yaccify_right_plus"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_splitN1() { <xbgf,bgf1,bgf2> = test_data["splitN1"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_bypass() { <xbgf,bgf1,bgf2> = test_data["bypass"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_nn() { <xbgf,bgf1,bgf2> = test_data["massage_nn"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_morgan1() { <xbgf,bgf1,bgf2> = test_data["massage_morgan1"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_morgan2() { <xbgf,bgf1,bgf2> = test_data["massage_morgan2"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_morgan3() { <xbgf,bgf1,bgf2> = test_data["massage_morgan3"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_massage_morgan4() { <xbgf,bgf1,bgf2> = test_data["massage_morgan4"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_splitT1() { <xbgf,bgf1,bgf2> = test_data["splitT1"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_splitT2() { <xbgf,bgf1,bgf2> = test_data["splitT2"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_splitT3() { <xbgf,bgf1,bgf2> = test_data["splitT3"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }
void show_splitT4() { <xbgf,bgf1,bgf2> = test_data["splitT4"]; println("Input grammar: <pp(bgf1)>");println("Transformations: <ppxs(xbgf)>");println("Expected output grammar: <pp(bgf2)>");bgf3=transform(xbgf,bgf1);println("Actual output grammar: <pp(bgf3)>"); gdtv(bgf3,bgf2); }


test bool test_abridge() { <xbgf,bgf1,bgf2> = test_data["abridge"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_abstractize() { <xbgf,bgf1,bgf2> = test_data["abstractize"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_add_horizontal() { <xbgf,bgf1,bgf2> = test_data["add_horizontal"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_add_inside() { <xbgf,bgf1,bgf2> = test_data["add_inside"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_add_vertical() { <xbgf,bgf1,bgf2> = test_data["add_vertical"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_add_vertical_middle() { <xbgf,bgf1,bgf2> = test_data["add_vertical_middle"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_add_vertical_scattered() { <xbgf,bgf1,bgf2> = test_data["add_vertical_scattered"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_anonymize_multiple() { <xbgf,bgf1,bgf2> = test_data["anonymize_multiple"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_anonymize_single() { <xbgf,bgf1,bgf2> = test_data["anonymize_single"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_appear_q() { <xbgf,bgf1,bgf2> = test_data["appear_q"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_appear_s() { <xbgf,bgf1,bgf2> = test_data["appear_s"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_chain_l() { <xbgf,bgf1,bgf2> = test_data["chain_l"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_chain_n() { <xbgf,bgf1,bgf2> = test_data["chain_n"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_concretize() { <xbgf,bgf1,bgf2> = test_data["concretize"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_deanonymize_multiple() { <xbgf,bgf1,bgf2> = test_data["deanonymize_multiple"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_deanonymize_single() { <xbgf,bgf1,bgf2> = test_data["deanonymize_single"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_define() { <xbgf,bgf1,bgf2> = test_data["define"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_designate() { <xbgf,bgf1,bgf2> = test_data["designate"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_detour() { <xbgf,bgf1,bgf2> = test_data["detour"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_deyaccify_eps() { <xbgf,bgf1,bgf2> = test_data["deyaccify_eps"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_deyaccify_left() { <xbgf,bgf1,bgf2> = test_data["deyaccify_left"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_deyaccify_left_plus() { <xbgf,bgf1,bgf2> = test_data["deyaccify_left_plus"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_deyaccify_right() { <xbgf,bgf1,bgf2> = test_data["deyaccify_right"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_deyaccify_right_plus() { <xbgf,bgf1,bgf2> = test_data["deyaccify_right_plus"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_disappear_q() { <xbgf,bgf1,bgf2> = test_data["disappear_q"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_disappear_s() { <xbgf,bgf1,bgf2> = test_data["disappear_s"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_distribute_l() { <xbgf,bgf1,bgf2> = test_data["distribute_l"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_distribute_nt() { <xbgf,bgf1,bgf2> = test_data["distribute_nt"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_downgrade() { <xbgf,bgf1,bgf2> = test_data["downgrade"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_eliminate() { <xbgf,bgf1,bgf2> = test_data["eliminate"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_equate1() { <xbgf,bgf1,bgf2> = test_data["equate1"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_equate2() { <xbgf,bgf1,bgf2> = test_data["equate2"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_equate3() { <xbgf,bgf1,bgf2> = test_data["equate3"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_equate4() { <xbgf,bgf1,bgf2> = test_data["equate4"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_extract_l() { <xbgf,bgf1,bgf2> = test_data["extract_l"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_extract_nt() { <xbgf,bgf1,bgf2> = test_data["extract_nt"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_extract_subch() { <xbgf,bgf1,bgf2> = test_data["extract_subch"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_extract_subseq_multiple() { <xbgf,bgf1,bgf2> = test_data["extract_subseq_multiple"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_extract_subseq_single() { <xbgf,bgf1,bgf2> = test_data["extract_subseq_single"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_factor_eps() { <xbgf,bgf1,bgf2> = test_data["factor_eps"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_factor_global() { <xbgf,bgf1,bgf2> = test_data["factor_global"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_factor_local() { <xbgf,bgf1,bgf2> = test_data["factor_local"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_factor_nt() { <xbgf,bgf1,bgf2> = test_data["factor_nt"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_fold() { <xbgf,bgf1,bgf2> = test_data["fold"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_fold_l() { <xbgf,bgf1,bgf2> = test_data["fold_l"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_fold_nt() { <xbgf,bgf1,bgf2> = test_data["fold_nt"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_horizontal_l() { <xbgf,bgf1,bgf2> = test_data["horizontal_l"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_horizontal_n() { <xbgf,bgf1,bgf2> = test_data["horizontal_n"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_import() { <xbgf,bgf1,bgf2> = test_data["import"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_inject() { <xbgf,bgf1,bgf2> = test_data["inject"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_inline() { <xbgf,bgf1,bgf2> = test_data["inline"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_introduce() { <xbgf,bgf1,bgf2> = test_data["introduce"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_iterate_l() { <xbgf,bgf1,bgf2> = test_data["iterate_l"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_iterate_p() { <xbgf,bgf1,bgf2> = test_data["iterate_p"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_iterate_r() { <xbgf,bgf1,bgf2> = test_data["iterate_r"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_lassoc_l() { <xbgf,bgf1,bgf2> = test_data["lassoc_l"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_lassoc_p() { <xbgf,bgf1,bgf2> = test_data["lassoc_p"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_lassoc_r() { <xbgf,bgf1,bgf2> = test_data["lassoc_r"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_assoc_p() { <xbgf,bgf1,bgf2> = test_data["massage_assoc_p"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_assoc_q() { <xbgf,bgf1,bgf2> = test_data["massage_assoc_q"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_assoc_s() { <xbgf,bgf1,bgf2> = test_data["massage_assoc_s"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_ch_ep() { <xbgf,bgf1,bgf2> = test_data["massage_ch_ep"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_ch_eq() { <xbgf,bgf1,bgf2> = test_data["massage_ch_eq"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_ch_es() { <xbgf,bgf1,bgf2> = test_data["massage_ch_es"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_ch_ex() { <xbgf,bgf1,bgf2> = test_data["massage_ch_ex"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_ch_ps() { <xbgf,bgf1,bgf2> = test_data["massage_ch_ps"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_ch_qp() { <xbgf,bgf1,bgf2> = test_data["massage_ch_qp"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_ch_qs() { <xbgf,bgf1,bgf2> = test_data["massage_ch_qs"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_ch_xp() { <xbgf,bgf1,bgf2> = test_data["massage_ch_xp"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_ch_xq() { <xbgf,bgf1,bgf2> = test_data["massage_ch_xq"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_ch_xs() { <xbgf,bgf1,bgf2> = test_data["massage_ch_xs"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_ch_xx1() { <xbgf,bgf1,bgf2> = test_data["massage_ch_xx1"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_ch_xx2() { <xbgf,bgf1,bgf2> = test_data["massage_ch_xx2"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_ch_xx3() { <xbgf,bgf1,bgf2> = test_data["massage_ch_xx3"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_comp_pp() { <xbgf,bgf1,bgf2> = test_data["massage_comp_pp"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_comp_pq() { <xbgf,bgf1,bgf2> = test_data["massage_comp_pq"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_comp_ps() { <xbgf,bgf1,bgf2> = test_data["massage_comp_ps"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_comp_qp() { <xbgf,bgf1,bgf2> = test_data["massage_comp_qp"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_comp_qq() { <xbgf,bgf1,bgf2> = test_data["massage_comp_qq"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_comp_qs() { <xbgf,bgf1,bgf2> = test_data["massage_comp_qs"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_comp_sp() { <xbgf,bgf1,bgf2> = test_data["massage_comp_sp"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_comp_sq() { <xbgf,bgf1,bgf2> = test_data["massage_comp_sq"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_comp_ss() { <xbgf,bgf1,bgf2> = test_data["massage_comp_ss"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_complex() { <xbgf,bgf1,bgf2> = test_data["massage_complex"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_distr_ch() { <xbgf,bgf1,bgf2> = test_data["massage_distr_ch"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_sel_s() { <xbgf,bgf1,bgf2> = test_data["massage_sel_s"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_seq_pq() { <xbgf,bgf1,bgf2> = test_data["massage_seq_pq"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_seq_ps() { <xbgf,bgf1,bgf2> = test_data["massage_seq_ps"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_seq_sq() { <xbgf,bgf1,bgf2> = test_data["massage_seq_sq"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_seq_ss() { <xbgf,bgf1,bgf2> = test_data["massage_seq_ss"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_seq_xs() { <xbgf,bgf1,bgf2> = test_data["massage_seq_xs"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_narrow_global() { <xbgf,bgf1,bgf2> = test_data["narrow_global"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_narrow_l() { <xbgf,bgf1,bgf2> = test_data["narrow_l"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_narrow_nt() { <xbgf,bgf1,bgf2> = test_data["narrow_nt"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_permute() { <xbgf,bgf1,bgf2> = test_data["permute"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_project() { <xbgf,bgf1,bgf2> = test_data["project"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_rassoc_p() { <xbgf,bgf1,bgf2> = test_data["rassoc_p"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_rassoc_s() { <xbgf,bgf1,bgf2> = test_data["rassoc_s"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_redefine() { <xbgf,bgf1,bgf2> = test_data["redefine"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_remove_horizontal() { <xbgf,bgf1,bgf2> = test_data["remove_horizontal"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_remove_inside() { <xbgf,bgf1,bgf2> = test_data["remove_inside"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_remove_vertical() { <xbgf,bgf1,bgf2> = test_data["remove_vertical"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_rename4() { <xbgf,bgf1,bgf2> = test_data["rename4"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_renameL() { <xbgf,bgf1,bgf2> = test_data["renameL"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_renameN() { <xbgf,bgf1,bgf2> = test_data["renameN"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_renameS() { <xbgf,bgf1,bgf2> = test_data["renameS"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_renameT() { <xbgf,bgf1,bgf2> = test_data["renameT"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_replace_choice() { <xbgf,bgf1,bgf2> = test_data["replace_choice"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_replace_choice_part() { <xbgf,bgf1,bgf2> = test_data["replace_choice_part"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_replace_global() { <xbgf,bgf1,bgf2> = test_data["replace_global"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_replace_l() { <xbgf,bgf1,bgf2> = test_data["replace_l"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_replace_nt() { <xbgf,bgf1,bgf2> = test_data["replace_nt"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_replace_seq() { <xbgf,bgf1,bgf2> = test_data["replace_seq"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_reroot() { <xbgf,bgf1,bgf2> = test_data["reroot"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_splitN2() { <xbgf,bgf1,bgf2> = test_data["splitN2"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_splitN3() { <xbgf,bgf1,bgf2> = test_data["splitN3"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_splitN4() { <xbgf,bgf1,bgf2> = test_data["splitN4"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_strip2() { <xbgf,bgf1,bgf2> = test_data["strip2"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_strip4() { <xbgf,bgf1,bgf2> = test_data["strip4"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_unchain_l() { <xbgf,bgf1,bgf2> = test_data["unchain_l"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_unchain_n() { <xbgf,bgf1,bgf2> = test_data["unchain_n"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_undefine1() { <xbgf,bgf1,bgf2> = test_data["undefine1"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_undefine2() { <xbgf,bgf1,bgf2> = test_data["undefine2"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_unfold() { <xbgf,bgf1,bgf2> = test_data["unfold"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_unfold_l() { <xbgf,bgf1,bgf2> = test_data["unfold_l"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_unfold_normalize() { <xbgf,bgf1,bgf2> = test_data["unfold_normalize"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_unfold_nt() { <xbgf,bgf1,bgf2> = test_data["unfold_nt"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_unite_eq() { <xbgf,bgf1,bgf2> = test_data["unite_eq"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_unite_normal() { <xbgf,bgf1,bgf2> = test_data["unite_normal"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_unlabel() { <xbgf,bgf1,bgf2> = test_data["unlabel"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_upgrade() { <xbgf,bgf1,bgf2> = test_data["upgrade"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_vertical_l() { <xbgf,bgf1,bgf2> = test_data["vertical_l"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_vertical_s() { <xbgf,bgf1,bgf2> = test_data["vertical_s"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_widen_global() { <xbgf,bgf1,bgf2> = test_data["widen_global"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_widen_l() { <xbgf,bgf1,bgf2> = test_data["widen_l"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_widen_nt() { <xbgf,bgf1,bgf2> = test_data["widen_nt"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_widen_sub() { <xbgf,bgf1,bgf2> = test_data["widen_sub"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_yaccify_eps() { <xbgf,bgf1,bgf2> = test_data["yaccify_eps"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_yaccify_left() { <xbgf,bgf1,bgf2> = test_data["yaccify_left"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_yaccify_left_plus() { <xbgf,bgf1,bgf2> = test_data["yaccify_left_plus"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_yaccify_right() { <xbgf,bgf1,bgf2> = test_data["yaccify_right"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_yaccify_right_plus() { <xbgf,bgf1,bgf2> = test_data["yaccify_right_plus"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_splitN1() { <xbgf,bgf1,bgf2> = test_data["splitN1"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_bypass() { <xbgf,bgf1,bgf2> = test_data["bypass"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_nn() { <xbgf,bgf1,bgf2> = test_data["massage_nn"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_morgan1() { <xbgf,bgf1,bgf2> = test_data["massage_morgan1"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_morgan2() { <xbgf,bgf1,bgf2> = test_data["massage_morgan2"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_morgan3() { <xbgf,bgf1,bgf2> = test_data["massage_morgan3"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_massage_morgan4() { <xbgf,bgf1,bgf2> = test_data["massage_morgan4"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_splitT1() { <xbgf,bgf1,bgf2> = test_data["splitT1"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_splitT2() { <xbgf,bgf1,bgf2> = test_data["splitT2"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_splitT3() { <xbgf,bgf1,bgf2> = test_data["splitT3"]; return gdts(transform(xbgf,bgf1),bgf2); }
test bool test_splitT4() { <xbgf,bgf1,bgf2> = test_data["splitT4"]; return gdts(transform(xbgf,bgf1),bgf2); }
