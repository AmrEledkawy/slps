equations

[map-asfix-to-btf]
main(parsetree(&T1,&I1))
=
<btf:root xmlns:btf="http://planet-sl.org/btf" xmlns:bgf="http://planet-sl.org/bgf">
	asfix2bgf(&T1)
	trafoTree(&T1)
</btf:root>

%%[tree-to-null] trafoTree(appl(prod([],&S0,&As1),&B1)) =
%%[default-tree-to-null] trafoTree(appl(list(&S1),&B1)) =
%%[tree-to-null] trafoTree(appl(prod([&Scs1],lex(&S1),&As1),&B1)) = 
%%[tree-to-null] trafoTree(appl(prod([&Scs1],lit(&Z1),&As1),&B1)) = 

[kill-layout-before] trafoTree(appl(prod([cf(opt(layout)),&Scs1],&S0,&As1),[&T1,&Tcs2])) = trafoTree(appl(prod([&Scs1],&S0,&As1),[&Tcs2]))
[kill-layout-before] trafoTree(appl(prod([cf(layout),&Scs1],&S0,&As1),[&T1,&Tcs2])) = trafoTree(appl(prod([&Scs1],&S0,&As1),[&Tcs2]))
%%[kill-layout-before] trafoTree(appl(prod([lex(&S1),&Scs1],&S0,&As1),[&T1,&Tcs2])) = trafoTree(appl(prod([&Scs1],&S0,&As1),[&Tcs2]))

[kill-layout-final] trafoTree(appl(prod([cf(layout)],&S0,&As1),[&Tcs2])) = 
[kill-layout-final] trafoTree(appl(prod([cf(opt(layout))],&S0,&As1),[&Tcs2])) =
%%[kill-layout-final] trafoTree(appl(prod([lex(&S1)],&S0,&As1),[&Tcs2])) =

[map-start-symbol]   trafoTree(appl(prod([&Scs1],sort("<START>"),&As1),[&T1,&Tcs2])) = trafoTree(&T1)

[tree-iter-plus]
trafoTree(appl(prod([cf(iter(sort(&Z1)))],cf(sort(&Z0)),&As1),[appl(list(cf(iter(sort(&Z1)))),[&Tcs1])]))
=
<btf:tree>
	<nonterminal>
		trafoProd(prod([cf(iter(sort(&Z1)))],cf(sort(&Z0)),&As1))
		<btf:tree>
			<plus>
				trafoTrees(&Tcs1)
			</plus>
		</btf:tree>
	</nonterminal>
</btf:tree>

[tree-iter-plus]
trafoTree(appl(list(cf(iter(sort(&Z1)))),[&Tcs1]))
=
<btf:tree>
	<plus>
		trafoTrees(&Tcs1)
	</plus>
</btf:tree>

[tree-iter-star]
trafoTree(appl(prod([cf(iter-star(sort(&Z1)))],cf(sort(&Z0)),&As1),[appl(list(cf(iter-star(sort(&Z1)))),[&Tcs1])]))
=
<btf:tree>
	<nonterminal>
		trafoProd(prod([cf(iter(sort(&Z1)))],cf(sort(&Z0)),&As1))
		<btf:tree>
			<star>
				trafoTrees(&Tcs1)
			</star>
		</btf:tree>
	</nonterminal>
</btf:tree>

[tree-iter-star]
trafoTree(appl(list(cf(iter-star(sort(&Z1)))),[&Tcs1]))
=
<btf:tree>
	<star>
		trafoTrees(&Tcs1)
	</star>
</btf:tree>

[tree-iter-star-nothing]
trafoTree(appl(prod([cf(iter-star(sort(&Z1)))],cf(sort(&Z0)),&As1),[appl(list(cf(iter-star(sort(&Z1)))),[])]))
=
<btf:tree>
	<nonterminal>
		trafoProd(prod([cf(iter(sort(&Z1)))],cf(sort(&Z0)),&As1))
		<btf:tree>
			<star>
				<btf:tree><epsilon/></btf:tree>
			</star>
		</btf:tree>
	</nonterminal>
</btf:tree>

[tree-iter-star-nothing]
trafoTree(appl(list(cf(iter-star(sort(&Z1)))),[]))
=
<btf:tree>
	<star>
		<btf:tree><epsilon/></btf:tree>
	</star>
</btf:tree>

[tree-optional-no]
trafoTree(appl(prod([cf(opt(sort(&Z1)))],cf(sort(&Z0)),&As1),[appl(prod([],cf(opt(sort(&Z1))),&As2),[])]))
=
<btf:tree>
	<nonterminal>
		trafoProd(prod([cf(opt(sort(&Z1)))],cf(sort(&Z0)),&As1))
		<btf:tree>
			<optional>
				<btf:tree><epsilon/></btf:tree>
			</optional>
		</btf:tree>
	</nonterminal>
</btf:tree>

[tree-optional-yes]
trafoTree(appl(prod([cf(opt(sort(&Z1)))],cf(sort(&Z0)),&As1),[appl(prod([cf(sort(&Z1))],cf(opt(sort(&Z1))),&As2),[&Tcs1])]))
=
<btf:tree>
	<nonterminal>
		trafoProd(prod([cf(opt(sort(&Z1)))],cf(sort(&Z0)),&As1))
		<btf:tree>
			<optional>
				trafoTrees(&Tcs1)
			</optional>
		</btf:tree>
	</nonterminal>
</btf:tree>

[tree-sort]
trafoTree(appl(prod([cf(sort(&Z1))],cf(sort(&Z0)),&As1),[&T1]))
=
<btf:tree>
	<nonterminal>
		trafoProd(prod([cf(sort(&Z1))],cf(sort(&Z0)),&As1))
		trafoTree(&T1)
	</nonterminal>
</btf:tree>

[tree-literal]
trafoTree(appl(prod([lex(sort(&Z0))],cf(sort(&Z0)),&As1),[&T1]))
=
<btf:tree>
	<nonterminal>
		<bgf:production>
			<nonterminal>strcon2chardata(&Z0)</nonterminal>
			<bgf:expression>
				<value>string</value>
			</bgf:expression>
		</bgf:production>
		<btf:tree>
			<value>
				<string>getName(&T1)</string>
			</value>
		</btf:tree>
	</nonterminal>
</btf:tree>

[tree-terminal-from-literal]
trafoTree(appl(prod([&Scs1],lit(&Z0),&As1),&B1))
=
<btf:tree>
	<terminal>strcon2chardata(&Z0)</terminal>
</btf:tree>

[tree-terminal-from-context-free]
trafoTree(appl(prod([lit(&Z1)],cf(sort(&Z0)),&As1),&B1))
=
<btf:tree>
	<nonterminal>
		<bgf:production>
			<nonterminal>strcon2chardata(&Z0)</nonterminal>
			<bgf:expression>
				<value>string</value>
			</bgf:expression>
		</bgf:production>
		<btf:tree>
			<value>
				<string>strcon2chardata(&Z1)</string>
			</value>
		</btf:tree>
	</nonterminal>
</btf:tree>

[default-tree-iter]
trafoTree(appl(prod([&S1,&Scs2],cf(sort(&Z0)),&As1),[&T1,&Tcs2]))
=
<btf:tree>
	<nonterminal>
		trafoProd(prod([&S1,&Scs2],cf(sort(&Z0)),&As1))
		<btf:tree>
			<sequence>
				trafoTrees(&T1,&Tcs2)
			</sequence>
		</btf:tree>
	</nonterminal>
</btf:tree>

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

[get-name-1] getName(appl(prod([lex(iter(char-class(&CR1)))],lex(sort(&Z0)),&As1),[appl(list(lex(iter(char-class(&CR1)))),&B1)])) = tree2chardata(&B1)
[get-name-2] getName(appl(prod([lex(opt(lit(&Z1))),&Scs1],lex(sort(&Z0)),&As1),[&T1,&Tcs2])) = getName(&T1)getName(appl(prod([&Scs1],lex(sort(&Z0)),&As1),[&Tcs2]))
[get-name-3] getName(appl(prod([lex(sort(&Z1))],lex(sort(&Z0)),&As1),[&T1])) = getName(&T1)
[get-name-4] getName(appl(prod([&S1],lex(opt(lit(&Z1))),&As1),[&T1])) = strcon2chardata(&Z1)
[get-name-5] getName(appl(prod([lit(&Z1)],lex(sort(&Z0)),&As1),&B1)) = strcon2chardata(&Z1)
[get-name-6] getName(appl(prod([],lex(opt(lit(&Z1))),&As1),[])) = 

[multiple-trees-more]  trafoTrees(&T1,&Tcs2) = trafoTree(&T1)trafoTrees(&Tcs2)
[multiple-trees-one]   trafoTrees(&T1) = trafoTree(&T1)
[multiple-trees-empty] trafoTrees() = 
