equations

[map-sdf-definition-to-bgf]  
&C*1 := trafoProds (accuProds (&M*1,))
==========================
main (definition &M*1) 
=
<bgf:grammar xmlns:bgf="http://planet-sl.org/bgf">
  &C*1
</bgf:grammar>

[map-sdf-module-to-bgf]  
&C*1 := trafoProds (accuProds (&M1,))
==========================
main ( &M1 ) 
=
<bgf:grammar xmlns:bgf="http://planet-sl.org/bgf">
  &C*1
</bgf:grammar>

[exclude-lexical-productions] 
accuProds ( lexical syntax &Ps1, &P*1 ) = &P*1

[exclude-productions-for-variables] 
accuProds ( variables &Ps1, &P*1 ) = &P*1

[include-all-other-productions] 
accuProds ( &P*1, &P*2 ) = &P*2 &P*1

[transform-empty-list-of-productions]
trafoProds ( ) = 

[transform-first-production-in-a-list]
&C1 := sort2chardata(&N1),
&E2 := trafoSymbols(&Ss1),
&C*0 := guessLabel(&As1)
=====================
trafoProds (&Ss1 -> &N1 &As1 &P*1 )
=
<bgf:production>
  &C*0
  <nonterminal>&C1</nonterminal>
  &E2
</bgf:production>
trafoProds ( &P*1 )

[default-transform-skip-unknown-production]
trafoProds (&P1 &P*2 )
=
trafoProds ( &P*2 )

[transform-empty-definition-of-nonterminal]
trafoSymbols() = 
<bgf:expression>
  <epsilon/>
</bgf:expression>

[transform-empty-definition-of-nonterminal]
trafoSymbols() = 
<bgf:expression>
  <epsilon/>
</bgf:expression>


[transform-definition-that-is-not-a-sequence]
trafoSymbols(&S1) = trafoSymbol(&S1)

[transform-a-definition-that-is-a-nontrivial-sequence]
&S1 &S2 &S*3 := &Ss1,
&C*1 := mapTrafoSymbol(&Ss1)
=====================
trafoSymbols(&Ss1) = 
<bgf:expression>
  <sequence>
     &C*1
  </sequence>
</bgf:expression>

[4]
mapTrafoSymbol() = 

[5]
&E1 := trafoSymbol(&S1),
&C*2 := mapTrafoSymbol(&S*2)
==========================
mapTrafoSymbol(&S1 &S*2) = &E1 &C*2

[nonterminal]
&C1 := sort2chardata(&N1)
==================
trafoSymbol(&N1) =
  <bgf:expression>
    <nonterminal>&C1</nonterminal>
  </bgf:expression>

[terminal-1]
&C1 := strcon2chardata(&Z1)
==================
trafoSymbol(&Z1) =
  <bgf:expression>
    <terminal>&C1</terminal>
  </bgf:expression>

[terminal-2]
&C1 := sqstrcon2chardata(&Y1)
==================
trafoSymbol(&Y1) =
  <bgf:expression>
    <terminal>&C1</terminal>
  </bgf:expression>

equations

[plus]
&E1 := trafoSymbol(&S1)
================
trafoSymbol(&S1+) =
  <bgf:expression>
    <plus>&E1</plus>
  </bgf:expression>

[star]
&E1 := trafoSymbol(&S1)
================
trafoSymbol(&S1*) =
  <bgf:expression>
    <star>&E1</star>
  </bgf:expression>

[optional]
&E1 := trafoSymbol(&S1)
================
trafoSymbol(&S1?) =
  <bgf:expression>
    <optional>&E1</optional>
  </bgf:expression>

[comma-separated-list-plus]
trafoSymbol({&S1 &S2}+) =
	trafoSymbol((&S1 (&S2 &S1)*))

[comma-separated-list-star]
trafoSymbol({&S1 &S2}*) =
	trafoSymbol((&S1 (&S2 &S1)*)?)

equations

[alt]
&E1 := trafoSymbol(&S1),
&E2 := trafoSymbol(&S2)
================
trafoSymbol(&S1 | &S2) =
  <bgf:expression>
	<choice>
	&E1
	&E2
	</choice>
  </bgf:expression>


[seq-0]
&E1 := trafoSymbol(&S1),
&E2 := trafoSymbol(&S2)
================
trafoSymbol((&S1 &S2)) =
  <bgf:expression>
	<sequence>
	&E1
	&E2
	</sequence>
  </bgf:expression>


[seq-1]
&E1 := trafoSymbol(&S1),
&E2 := trafoSymbol((&S2 &S+1))
================
trafoSymbol((&S1 &S2 &S+1)) =
  <bgf:expression>
	<sequence>
	&E1
	&E2
	</sequence>
  </bgf:expression>

[selector-1]
&E1 := trafoSymbol(&N1)
================
trafoSymbol(&I1:&N1) =
  <bgf:expression>
	<selectable>
		<selector>idcon2chardata(&I1)</selector>
		&E1
	</selectable>
  </bgf:expression>

[cons-to-label-only-cons]
guessLabel({cons(&I1)}) = <label>idcon2chardata(&I1)</label>

[cons-to-label-cons-etc]
guessLabel({cons(&I1),&Acs2}) = <label>idcon2chardata(&I1)</label>

[cons-to-label-empty-1]
guessLabel() = 

[cons-to-label-empty-2]
guessLabel({}) = 

[default-cons-to-label-no-cons]
guessLabel({&A1}) = 

[default-cons-to-label-head-is-not-cons]
guessLabel({&A1,&Acs2}) = guessLabel({&Acs2})
