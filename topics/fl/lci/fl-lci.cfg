SHORTCUTS
	slps = ../../..
	fl = ..
	tools = %slps%/shared/tools
	validator = %slps%/download/msv/msv.jar
	bgfschema = %slps%/shared/xsd/bgf.xsd
	baseldf = %fl%/ldf/fl.ldf
	runjava1jar = %fl%/java1/javafl.jar
	rundcgdir = %fl%/prolog

ACTIONS
	# extract, diff and test must be present, the rest is optional and completely volatile
	# if validate is present, extracted bgfs and all bgfs produced by transformations will be validated with it
	# besides shortcuts, one can use these variables:
	#	%action%	- everywhere			macro for the name of the action
	#	%name%	- everywhere			macro for the name of the source
	#	%type%		- in extract			macro for the type of the source
	#	%args%		- in extract			macro for the extraction arguments
	#	%1%		- in diff				macro for the first filename in a pair
	#	%2%		- in diff				macro for the second filename in a pair
	extract
		%tools%/%type%2bgf %args% bgf/%name%.bgf
	unerase, abstract1, c2a, downcase, h2v, preferdcg, reroot, java3drop, downcase, omdrop, preferjaxb, stripterminals, layering, preferjava, xsdmassage
		%tools%/xbgf bgf/%name%.bgf xbgf/%action%.xbgf bgf/%name%.%action%.bgf
	validate
		java -jar %validator% %bgfschema% bgf/%name%.bgf
	diff
		%tools%/bdt bgf/%1%.bgf bgf/%2%.bgf
	test
		xsltproc %slps%/shared/xsl/ldf2samples.xslt %baseldf% >samples.xml

SOURCES
	# three lines: name, type, arguments
	xsd
		xsd
		%fl%/xsd/fl.xsd
	antlr
		antlr
		 %fl%/java1/FL.g
	om
		java
		%fl%/java1 types
	#jaxb
	#	java
	#	%fl%/java3 fl
	dcg
		dcg
		%fl%/prolog/Parser.pro

TARGETS
	# any number of input branches per target
	# if more then one input, all results get to be pairwise diffed
	java:
		reroot preferjaxb omdrop downcase om
		#reroot java3drop downcase jaxb
	xsdjava:
		unerase java
		xsdmassage preferjava downcase xsd
	concrete:
		reroot downcase dcg
		reroot h2v preferdcg downcase antlr
	abstract:
		c2a layering stripterminals concrete
		abstract1 xsdjava

IMPLEMENTATIONS
	# first line for parser, second for evaluator
	# besides shortcuts, one can use these variables:
	#	%sample%	-	name of the test case file
	#	%parsed%	-	parsing result
	#	%context%	-	name of the context file for evaluations
	#	%yields%	-	expected evaluation result
	antlr
		java -cp ${CLASSPATH}:%runjava1jar% -ea TestIO %sample% %parsed% 2>/dev/null
		java -cp ${CLASSPATH}:%runjava1jar% -ea TestEvaluator %context% %sample% %yields% 2>/dev/null
	dcg
		swipl -q -f %rundcgdir%/TestIO.pro -t "main('%sample%','%parsed%')"
		swipl -q -f %rundcgdir%/TestEvaluator.pro -t "main('%context%','%sample%',%yields%)"
