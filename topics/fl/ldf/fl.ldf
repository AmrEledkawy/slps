<ldf:document
  xmlns:ldf="http://planet-sl.org/ldf"
  xmlns:bgf="http://planet-sl.org/bgf"
  xmlns:xhtml="http://www.w3.org/1999/xhtml">
  <title>
    <author>Ralf Laemmel</author>
    <topic>The Factorial Language</topic>
    <version>1.0</version>
    <status>draft</status>
    <date>August 2008</date>
  </title>
  <frontMatter>
    <foreword>
      <p>
        The Factorial Language (FL) is a trivial functional language;
        it's a toy language made up as an illustrative language for language processing.
        It's carefully designed to be trivial
        but still involved enough to trigger a lot of issues in language processing
        (including issues of parsing, semantics, type checking, transformation).
        This document provides a documentation of the FL language.
      </p>
    </foreword>
    <designGoals>
      <item>Trivial language</item>
      <item>Illustrative for language processing</item>
    </designGoals>
    <scope>
      <content>
        <p>
          SLPS, or Software Language Processing Suite, is a collaborative facility for
          aid in teaching language processing techniques in universities.
          FL is an example language in that.
        </p>
      </content>
    </scope>
    <conformance>
      <content>
        <p>
          Any text that can be parsed with the FL grammar provided by this document,
          is a correct FL program.
        </p>
      </content>
    </conformance>
    <compatibility>
      <content>
        <p>
          The FL specification uses other SLPS technologies such as BGF, LDF, etc.
        </p>
      </content>
    </compatibility>
    <notation>
      <content>
        <p>
          The internal grammar is stored in BGF.
        </p>
        <p>The pretty-printed BNF uses the following:</p>
        <list>
          <item>() parentheses for selecting groups,</item>
          <item>? question sign for optional element (zero or one occurence),</item>
          <item>* star for transitive closure (zero or more occurences),</item>
          <item>+ plus for reflexive transitive closure (one or more occurences),</item>
        </list>
      </content>
    </notation>
    <normativeReferences>
      <item>
        R. LÃ¤mmel, V. Zaytsev. An Introduction to Grammar Convergence.
        Proceedings of 7th International Conference on integrated Formal Methods (iFM 2009).
        Springer, 2009.
      </item>
    </normativeReferences>
    <definitions>
      <term>
        <name>program</name>
        <definition>
          <p>
            FL program is a list of function definitions separated by newline characters
          </p>
        </definition>
      </term>
      <term>
        <name>function</name>
        <definition>
          <p>
            FL function is the same as a function in math: it has some input
            parameters and returns a value
          </p>
        </definition>
      </term>
    </definitions>
    <documentStructure>
      <id>struct</id>
      <title>Organization</title>
      <content>
        <p>The rest of the document is organized as follows...</p>
      </content>
    </documentStructure>
    <whatsnew>
      <item>No new concepts in the language, really...</item>
    </whatsnew>
  </frontMatter>
  <languageOverview>
    <term>
      <name>function</name>
      <definition>
        <p>...</p>
      </definition>
    </term>
  </languageOverview>
  <tokens>
    <id>lexical-1</id>
    <content>
      <p>Tokens in FL are...</p>
    </content>
  </tokens>
  <core>
    <id>syntax-1</id>
    <title>The Only Syntax Section</title>
    <description>
      <content>
        <p>Only one core section!</p>
      </content>
    </description>
  </core>
  <!--
  <title></title>
  <author>The Software Languages Team in Koblenz</author>
  <abstract>
    
  </abstract>
  <content>
    <section>
      <title>A quick start</title>
      <content>
        <text>
          Here is sample that hopefully explains the name of the language.
          That is, FL is capable of expressing the factorial function.
          We need a helper function for multiplication because FL provides addition but not multiplication.
        </text>
        <sample language="http://planet-sl.org/fl/" id="factorial">
          mult n m = if (n==0) then 0 else (m + (mult (n - 1) m))
          fac n = if (n==0) then 1 else (mult n (fac (n - 1)))
        </sample>
        <text>
          Functions are called by placing their arguments after their names:
        </text>
        <runnable language="http://planet-sl.org/fl/" id="mult5by7">
          <context>factorial</context>
          <main>mult</main>
          <argument>5</argument>
          <argument>7</argument>
          <yields>35</yields>
        </runnable>
        <runnable language="http://planet-sl.org/fl/" id="fac5">
          <context>factorial</context>
          <main>fac</main>
          <argument>5</argument>
          <yields>120</yields>
        </runnable>
      </content>
    </section>
    <section>
      <title>FL programs</title>
      <content>
        <text>
          As illustrated above, FL programs are lists of function definitions.
          Each function definition has 1 or more integer-typed arguments.
          The following grammar fragment shows this formally.
        </text>
        <grammar language="http://planet-sl.org/fl/">
          <bgf:production>
            <nonterminal>program</nonterminal>
            <bgf:expression>
              <plus>
                <bgf:expression>
                  <nonterminal>function</nonterminal>
                </bgf:expression>
              </plus>
            </bgf:expression>
          </bgf:production>
        </grammar>
        <text>
          Function definitions are separated by one or more eoln markers.
          More details are explained in the next section.
        </text>
      </content>
    </section>
    <section>
      <title>FL functions</title>
      <content>
        <text>
          Function defintions are separated by newlines.
        </text>
        <grammar language="http://planet-sl.org/fl/">
          <bgf:production>
            <nonterminal>function</nonterminal>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <nonterminal>name</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <plus>
                    <bgf:expression>
                      <nonterminal>name</nonterminal>
                    </bgf:expression>
                  </plus>
                </bgf:expression>
                <bgf:expression>
                  <terminal>=</terminal>
                </bgf:expression>
                <bgf:expression>
                  <terminal>=</terminal>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>expr</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <plus>
                    <bgf:expression>
                      <nonterminal>eoln</nonterminal>
                    </bgf:expression>
                  </plus>
                </bgf:expression>
              </sequence>
            </bgf:expression>
          </bgf:production>
        </grammar>
        <text>
          Each function definition consists of
          a name of the function,
          its arguments (again, names),
          and a right-hand side expression.
        </text>
        
      </content>
    </section>
    <section>
      <title>FL expression forms</title>
      <content>
        <text>
          An expression is understood intuitively by everyone:
        </text>
        <sample language="http://planet-sl.org/fl/" sort="expr">
          (1 + 2) - 3
        </sample>
      </content>
    </section>
  </content>-->
</ldf:document>
