This implementation uses C++ to demonstrate:
- parsing
- pretty-printing
- evaluation
- optimiziation

The sample shows the use of flex and bison to generate the lexer and the parser and uses operator overloading to implement the following operators:
- == compares two expressions, they are equal, if they are objects of the same subclass of "CExpr" and their values or member-expressions are equal.
- << prints an expression to an ofstream, for example cout. This uses the CPrettyPrinter-visitor, but makes the resulting code more readable in some situations. (see TestIO.cpp)

Pretty-printing, evaluation and optimization are implemented in plain C++ using the visitor-pattern.
The parser is built using bison. Bison shows some conflicts in the grammar, but the parser works fine.

The Makefile is based on the following assumptions:
- g++ is installed and in the PATH
- flex and bison are also installed and in the PATH.
Usage:
- "make" builds the binarys 
- "make test" runs all 3 tests
- "make doc" builds the documentation using doxygen 

Known Problems:
- The implementation itself is free of memory leaks, but valgrind shows ~16kb (allocated by the lexer generated by flex) als "still reachable" in the "LEAK SUMMARY". This seems to be a problem with flex, maybe someone knows how to fix this...
- older versions of Bison cannot generate the parser because the "parse-param"-feature is not yet included there. Any version >1.8 should work.

