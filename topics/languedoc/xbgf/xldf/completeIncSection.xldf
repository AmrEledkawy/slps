<?xml version="1.0" encoding="utf-8"?>
<xldf:evolution-sequence
  xmlns:mml="http://www.w3.org/1998/Math/MathML"
  xmlns:bgf="http://planet-sl.org/bgf"
  xmlns:xbgf="http://planet-sl.org/xbgf"
  xmlns:ldf="http://planet-sl.org/ldf"
  xmlns:xldf="http://planet-sl.org/xldf">

  <!-- compose a section on increasing transformations -->
  <xldf:retitle>
    <from>
      <title>increasing-transformation</title>
    </from>
    <to>Grammar lengthening transformations</to>
  </xldf:retitle>
  
  <xldf:place>
    <section>add</section>
    <inside>increasing-transformation</inside>
  </xldf:place>
  <xldf:transform-grammar>
    <target>add</target>
    <xbgf:vertical>
      <nonterminal>add</nonterminal>
    </xbgf:vertical>
  </xldf:transform-grammar>
  <xldf:extract-subsection>
    <from>add</from>
    <content>
      <bgf:production xmlns:bgf="http://planet-sl.org/bgf">
        <label>vertical</label>
        <nonterminal>add</nonterminal>
        <bgf:expression>
          <nonterminal>production</nonterminal>
        </bgf:expression>
      </bgf:production>
    </content>
    <title>addV</title>
    <id>addV</id>
    <role>syntax</role>
  </xldf:extract-subsection>
  <xldf:append>
    <where>addV</where>
    <content>
      <text>
        Vertical addition operates on the level of productions: it adds one more production
        for some nonterminal to any number of productions that are already present in the grammar.
      </text>
    </content>
  </xldf:append>
  <xldf:add-subsection>
    <example id="addV-example">
      <content>
        <text>Given the input:</text>
      </content>
    </example>
    <to>addV</to>
  </xldf:add-subsection>
  <xldf:import-grammar>
    <target>addV-example</target>
    <file>../../transformation/xbgf/tests/add_vertical.bgf</file>
  </xldf:import-grammar>
  <xldf:append>
    <where>addV-example</where>
    <content>
      <text>After using this transformation:</text>
    </content>
  </xldf:append>
  <xldf:import-sample>
    <target>addV-example</target>
    <file>../../transformation/xbgf/tests/add_vertical.xbgf</file>
    <prettyprinter>../../../shared/tools/xbgf2xbnf</prettyprinter>
  </xldf:import-sample>
  <xldf:append>
    <where>addV-example</where>
    <content>
      <text>The result will look like this:</text>
    </content>
  </xldf:append>
  <xldf:import-grammar>
    <target>addV-example</target>
    <file>../../transformation/xbgf/tests/add_vertical.baseline</file>
  </xldf:import-grammar>

  <xldf:extract-subsection>
    <from>add</from>
    <content>
      <bgf:production xmlns:bgf="http://planet-sl.org/bgf">
        <label>horizontal</label>
        <nonterminal>add</nonterminal>
        <bgf:expression>
          <nonterminal>production</nonterminal>
        </bgf:expression>
      </bgf:production>
    </content>
    <title>addH</title>
    <id>addH</id>
    <role>syntax</role>
  </xldf:extract-subsection>
  <xldf:transform-grammar>
    <target>addH</target>
    <xbgf:fold>
      <nonterminal>marked-production</nonterminal>
      <in>
        <nonterminal>add</nonterminal>
      </in>
    </xbgf:fold>
    <context>definitions-section</context>
  </xldf:transform-grammar>

  <xldf:append>
    <where>addH</where>
    <content>
      <text>
        Horizontal addition looks inside productions: it adds any marked part of an internal choice
        by either introducing one or enhancing the existing one. This allows to skip
        pre-transformational <ldf:keyword>vertical</ldf:keyword> and post-transformational
        <ldf:keyword>horizontal</ldf:keyword> steps for productions with a top-level choice,
        which is the most common use of this transformation. However, it is useful to have
        a command at hand that is capable of adding alternatives to any particular place
        of any grammar production.
      </text>
      <text>
        Markers must denote the new part: i.e., the production without the marked part
        must be present in the grammar, and if it is, the result will contain a
        production with the marked part instead.
        Obviously, the markers itself do not end up in the grammar.
      </text>
    </content>
  </xldf:append>
  <xldf:add-subsection>
    <example id="addH1-example">
      <content>
        <text>Given the input:</text>
      </content>
    </example>
    <to>addH</to>
  </xldf:add-subsection>
  <xldf:import-grammar>
    <target>addH1-example</target>
    <file>../../transformation/xbgf/tests/add_horizontal.bgf</file>
  </xldf:import-grammar>
  <xldf:append>
    <where>addH1-example</where>
    <content>
      <text>After using this transformation:</text>
    </content>
  </xldf:append>
  <xldf:import-sample>
    <target>addH1-example</target>
    <file>../../transformation/xbgf/tests/add_horizontal.xbgf</file>
    <prettyprinter>../../../shared/tools/xbgf2xbnf</prettyprinter>
  </xldf:import-sample>
  <xldf:append>
    <where>addH1-example</where>
    <content>
      <text>The result will look like this:</text>
    </content>
  </xldf:append>
  <xldf:import-grammar>
    <target>addH1-example</target>
    <file>../../transformation/xbgf/tests/add_horizontal.baseline</file>
  </xldf:import-grammar>
  <xldf:add-subsection>
    <example id="addH2-example">
      <content>
        <text>Given the input:</text>
      </content>
    </example>
    <to>addH</to>
  </xldf:add-subsection>
  <xldf:import-grammar>
    <target>addH2-example</target>
    <file>../../transformation/xbgf/tests/add_inside.bgf</file>
  </xldf:import-grammar>
  <xldf:append>
    <where>addH2-example</where>
    <content>
      <text>After using this transformation:</text>
    </content>
  </xldf:append>
  <xldf:import-sample>
    <target>addH2-example</target>
    <file>../../transformation/xbgf/tests/add_inside.xbgf</file>
    <prettyprinter>../../../shared/tools/xbgf2xbnf</prettyprinter>
  </xldf:import-sample>
  <xldf:append>
    <where>addH2-example</where>
    <content>
      <text>The result will look like this:</text>
    </content>
  </xldf:append>
  <xldf:import-grammar>
    <target>addH2-example</target>
    <file>../../transformation/xbgf/tests/add_inside.baseline</file>
  </xldf:import-grammar>

  <xldf:place>
    <section>appear</section>
    <inside>increasing-transformation</inside>
  </xldf:place>
  <xldf:transform-grammar>
    <target>appear</target>
    <xbgf:fold>
      <nonterminal>marked-production</nonterminal>
      <in>
        <nonterminal>appear</nonterminal>
      </in>
    </xbgf:fold>
    <context>definitions-section</context>
  </xldf:transform-grammar>
  <xldf:add-subsection>
    <example id="appear-example">
      <content>
        <text>Given the input:</text>
      </content>
    </example>
    <to>appear</to>
  </xldf:add-subsection>
  <xldf:import-grammar>
    <target>appear-example</target>
    <file>../../transformation/xbgf/tests/appear_q.bgf</file>
  </xldf:import-grammar>
  <xldf:append>
    <where>appear-example</where>
    <content>
      <text>After using this transformation:</text>
    </content>
  </xldf:append>
  <xldf:import-sample>
    <target>appear-example</target>
    <file>../../transformation/xbgf/tests/appear_q.xbgf</file>
    <prettyprinter>../../../shared/tools/xbgf2xbnf</prettyprinter>
  </xldf:import-sample>
  <xldf:append>
    <where>appear-example</where>
    <content>
      <text>The result will look like this:</text>
    </content>
  </xldf:append>
  <xldf:import-grammar>
    <target>appear-example</target>
    <file>../../transformation/xbgf/tests/appear_q.baseline</file>
  </xldf:import-grammar>

  <xldf:place>
    <section>widen</section>
    <inside>increasing-transformation</inside>
  </xldf:place>
  <xldf:append>
    <where>widen</where>
    <content>
      <text>
        The widening relation is defined as follows:
      </text>
      <formula>
        <!--x \textrm{ can be widened to } x? \textrm{ or } x^+ \textrm{ or } x^\star-->
        <mml:math>
          <mml:mrow>
            <mml:mrow>
                <mml:mi>x</mml:mi>
            </mml:mrow>
            <mml:mtext>can be widened to</mml:mtext>
            <mml:mrow>
              <mml:mrow>
                <mml:msup>
                  <mml:mi>x</mml:mi>
                  <mml:mo>?</mml:mo>
                </mml:msup>
              </mml:mrow>
              <mml:mtext>or</mml:mtext>
              <mml:mrow>
                <mml:msup>
                  <mml:mi>x</mml:mi>
                  <mml:mo>+</mml:mo>
                </mml:msup>
              </mml:mrow>
              <mml:mtext>or</mml:mtext>
              <mml:mrow>
                <mml:msup>
                  <mml:mi>x</mml:mi>
                  <mml:mo>*</mml:mo>
                </mml:msup>
              </mml:mrow>
            </mml:mrow>
          </mml:mrow>
        </mml:math>
      </formula>
      <formula>
        <!--x? \textrm{ can be widened to } x^\star-->
        <mml:math>
          <mml:mrow>
            <mml:mrow>
              <mml:msup>
                <mml:mi>x</mml:mi>
                <mml:mo>?</mml:mo>
              </mml:msup>
            </mml:mrow>
            <mml:mtext>can be widened to</mml:mtext>
            <mml:mrow>
              <mml:msup>
                <mml:mi>x</mml:mi>
                <mml:mo>*</mml:mo>
              </mml:msup>
            </mml:mrow>
          </mml:mrow>
        </mml:math>
      </formula>
      <formula>
        <!--x^+ \textrm{ can be widened to } x^\star-->
        <mml:math>
          <mml:mrow>
            <mml:mrow>
              <mml:msup>
                <mml:mi>x</mml:mi>
                <mml:mo>+</mml:mo>
              </mml:msup>
            </mml:mrow>
            <mml:mtext>can be widened to</mml:mtext>
            <mml:mrow>
              <mml:msup>
                <mml:mi>x</mml:mi>
                <mml:mo>*</mml:mo>
              </mml:msup>
            </mml:mrow>
          </mml:mrow>
        </mml:math>
      </formula>
      <text>
        It is trivial to prove that for each case the expression on the left is included
        in the expression on the right, but not otherwise. For going the other way
        <ldf:keyword>narrow</ldf:keyword> transformation is used. For shaping
        an expression into a completely equivalent one, use <ldf:keyword>massage</ldf:keyword>.
      </text>
    </content>
  </xldf:append>
  <xldf:add-subsection>
    <example id="widen-example">
      <content>
        <text>Given the input:</text>
      </content>
    </example>
    <to>widen</to>
  </xldf:add-subsection>
  <xldf:import-grammar>
    <target>widen-example</target>
    <file>../../transformation/xbgf/tests/widen_l.bgf</file>
  </xldf:import-grammar>
  <xldf:append>
    <where>widen-example</where>
    <content>
      <text>After using this transformation:</text>
    </content>
  </xldf:append>
  <xldf:import-sample>
    <target>widen-example</target>
    <file>../../transformation/xbgf/tests/widen_l.xbgf</file>
    <prettyprinter>../../../shared/tools/xbgf2xbnf</prettyprinter>
  </xldf:import-sample>
  <xldf:append>
    <where>widen-example</where>
    <content>
      <text>The result will look like this:</text>
    </content>
  </xldf:append>
  <xldf:import-grammar>
    <target>widen-example</target>
    <file>../../transformation/xbgf/tests/widen_l.baseline</file>
  </xldf:import-grammar>

  <xldf:place>
    <section>upgrade</section>
    <inside>increasing-transformation</inside>
  </xldf:place>
  <xldf:transform-grammar>
    <target>upgrade</target>
    <xbgf:replace>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>production</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>production</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>marked-production</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>production</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </xbgf:replace>
  </xldf:transform-grammar>
  <xldf:add-subsection>
    <example id="upgrade-example">
      <content>
        <text>Given the input:</text>
      </content>
    </example>
    <to>upgrade</to>
  </xldf:add-subsection>
  <xldf:import-grammar>
    <target>upgrade-example</target>
    <file>../../transformation/xbgf/tests/upgrade.bgf</file>
  </xldf:import-grammar>
  <xldf:append>
    <where>upgrade-example</where>
    <content>
      <text>After using this transformation:</text>
    </content>
  </xldf:append>
  <xldf:import-sample>
    <target>upgrade-example</target>
    <file>../../transformation/xbgf/tests/upgrade.xbgf</file>
    <prettyprinter>../../../shared/tools/xbgf2xbnf</prettyprinter>
  </xldf:import-sample>
  <xldf:append>
    <where>upgrade-example</where>
    <content>
      <text>The result will look like this:</text>
    </content>
  </xldf:append>
  <xldf:import-grammar>
    <target>upgrade-example</target>
    <file>../../transformation/xbgf/tests/upgrade.baseline</file>
  </xldf:import-grammar>

  <xldf:place>
    <section>unite</section>
    <inside>increasing-transformation</inside>
  </xldf:place>
  <xldf:add-subsection>
    <example id="unite-example">
      <content>
        <text>Given the input:</text>
      </content>
    </example>
    <to>unite</to>
  </xldf:add-subsection>
  <xldf:import-grammar>
    <target>unite-example</target>
    <file>../../transformation/xbgf/tests/unite_normal.bgf</file>
  </xldf:import-grammar>
  <xldf:append>
    <where>unite-example</where>
    <content>
      <text>After using this transformation:</text>
    </content>
  </xldf:append>
  <xldf:import-sample>
    <target>unite-example</target>
    <file>../../transformation/xbgf/tests/unite_normal.xbgf</file>
    <prettyprinter>../../../shared/tools/xbgf2xbnf</prettyprinter>
  </xldf:import-sample>
  <xldf:append>
    <where>unite-example</where>
    <content>
      <text>The result will look like this:</text>
    </content>
  </xldf:append>
  <xldf:import-grammar>
    <target>unite-example</target>
    <file>../../transformation/xbgf/tests/unite_normal.baseline</file>
  </xldf:import-grammar>

  <xldf:change-role>
    <scope>increasing-transformation</scope>
    <from>syntax</from>
    <to>synopsis</to>
  </xldf:change-role>

</xldf:evolution-sequence>