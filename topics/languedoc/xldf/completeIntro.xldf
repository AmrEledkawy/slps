<?xml version="1.0" encoding="utf-8"?>
<xldf:sequence
  xmlns:bgf="http://planet-sl.org/bgf"
  xmlns:xbgf="http://planet-sl.org/xbgf"
  xmlns:xldf="http://planet-sl.org/xldf">

  <xldf:add-section>
    <designGoals>
      <author>Vadim Zaytsev</author>
      <content>
        <p>
          XBGF operator suite was developed mainly for grammar convergence
          activities.
        </p>
      </content>
    </designGoals>
  </xldf:add-section>

  <xldf:add-section>
    <notation>
      <id>notation-section</id>
      <author>Vadim Zaytsev</author>
      <content>
        <p>
          BGF is a BNF-like Grammar Format, an XML dialect of Extended Backus Naur Form
          that was used in the language convergence infrastructure. Its grammar is presented
          below in a slightly beautified form (all undefined nonterminals are strings):
        </p>
      </content>
    </notation>
  </xldf:add-section>

  <xldf:import-grammar>
    <target>notation-section</target>
    <file>bgf_pretty.bgf</file>
  </xldf:import-grammar>

  <xldf:append>
    <where>notation-section</where>
    <content>
      <p>
        All BGFs and XBGFs are presented in a unified pretty-printed way.
        The concrete syntax for it is presented below:
      </p>
    </content>
  </xldf:append>

  <xldf:import-grammar>
    <target>notation-section</target>
    <file>bnf.bgf</file>
  </xldf:import-grammar>

  <!-- compatibility section is about converging BGF and BNF -->
  <xldf:add-section>
    <compatibility>
      <id>compatibility-section</id>
      <author>Vadim Zaytsev</author>
      <content>
        <p>
          In order to establish the relation between BGF that is being used
          in the actual working system and BNF that is being reported here,
          we apply the whole process of grammar convergence to these two grammars.
        </p>
        <p>
          BNF was defined as a base-line grammar for a pretty-printer and therefor
          defines concrete syntax. BGF is extracted from the corresponding XML Schema
          and contains abstract syntax annotated with selectors. We choose to converge
          them closer to abstract syntax (BGF). The only transformations applied to
          the BGF grammar are these:
        </p>
      </content>
    </compatibility>
  </xldf:add-section>

  <xldf:import-sample>
    <target>compatibility-section</target>
    <file>preferBnf.xbnf</file>
  </xldf:import-sample>

  <xldf:append>
    <where>compatibility-section</where>
    <content>
      <p>
        As we can see, the first two transformations resolve the issue of
        BGF having a notion of `root element' and BNF not having such a notion
        at all. The third transformation, narrow, shortens the grammar, but
        its semantics only means that we do not want to have empty samples
        while an empty grammar is still acceptable in general. Since this is
        data refinement, a semantic decreasing transformation is used without
        hesitation. The rest of the transformational sequence is trivial refactorings.
      </p>
      <p>
        The BNF source undergoes the following transformations for stripping
        it from lexical details:
      </p>
    </content>
  </xldf:append>

  <xldf:import-sample>
    <target>compatibility-section</target>
    <file>stripWhitespace.xbnf</file>
  </xldf:import-sample>

  <xldf:append>
    <where>compatibility-section</where>
    <content>
      <p>
        Before the rest of the concrete syntax (i.e., the terminals)
        is stripped away, we need to add some labels that correspond
        to the selectors of its BGF counterpart:
      </p>
    </content>
  </xldf:append>

  <xldf:import-sample>
    <target>compatibility-section</target>
    <file>designate.xbnf</file>
  </xldf:import-sample>

  <xldf:append>
    <where>compatibility-section</where>
    <content>
      <p>
        Now we can remove all terminals from the grammar without disrupting
        its structure (i.e., various alternatives in symbol will not collide
        and vanish during normalisation phase). Since we do not want to make
        a distinction and deem all terminals to be worthy of removal, the
        following transformation script is generated by a special tool executed
        automatically from LCI.
      </p>
    </content>
  </xldf:append>

  <xldf:import-sample>
    <target>compatibility-section</target>
    <file>stripTerminals.xbnf</file>
  </xldf:import-sample>

  <xldf:append>
    <where>compatibility-section</where>
    <content>
      <p>
        Finally we run a grammar comparator to see what is left and notice
        one mismatch that is easily fixed with massage, as well as the right
        hand side still having $(symbol^+)^+$ instead of just symbol. This
        corresponds to the design decision that treats top-level choices
        and top-level sequences differently in BNF to make them more appealing
        to the eye by avoiding unnecessary parenthesizing. The very specific
        upgrade command is run twice here to fold first the sequence and then
        the choice. After that, the grammars fully converge.
      </p>
    </content>
  </xldf:append>

  <xldf:import-sample>
    <target>compatibility-section</target>
    <file>refactorBnf.xbnf</file>
  </xldf:import-sample>

  <!-- list of definitions -->
  <xldf:add-section>
    <definitions>
      <id>definitions-section</id>
      <author>Vadim Zaytsev</author>
      <term>
        <name>grammar</name>
        <definition>
          <p>A set of interdependent productions.</p>
        </definition>
      </term>
    </definitions>
  </xldf:add-section>

  <xldf:place>
    <section>element-sequence</section>
    <inside>definitions-section</inside>
  </xldf:place>

  <xldf:place>
    <section>group-transformation</section>
    <inside>definitions-section</inside>
  </xldf:place>

  <xldf:place>
    <section>group-scope</section>
    <inside>definitions-section</inside>
  </xldf:place>

  <!-- <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML"
	          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	          xsi:schemaLocation="http://www.w3.org/1998/Math/MathML
	            http://www.w3.org/Math/XMLSchema/mathml2/mathml2.xsd">
	<mrow>
	<mrow><mfenced><msup><mi>x</mi><mo>^+</mo></msup><mfenced><mo>?</mo></mrow>
	<mo>=</mo>
	<msup><mi>x</mi><mo>^\star</mo></msup>
	</mrow>
	</mml:math>-->
</xldf:sequence>