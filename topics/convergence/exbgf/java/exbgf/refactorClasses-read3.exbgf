<?xml version="1.0" encoding="UTF-8"?>
<exbgf:sequence xmlns:bgf="http://planet-sl.org/bgf" xmlns:xbgf="http://planet-sl.org/xbgf" xmlns:exbgf="http://planet-sl.org/exbgf">
	<!--
  Classes in the syntax appendix look like this:
  
  ClassDeclaration is defined as:
     NormalClassDeclaration
     EnumDeclaration
  NormalClassDeclaration is defined as:
     "class" Identifier [ TypeParameters ] [ "extends" Type ] [ "implements" TypeList ] ClassBody
  ClassBody is defined as:
     "{" { ClassBodyDeclaration } "}"
  ClassBodyDeclaration is defined as:
     ";"
     [ "static" ] Block
     ModifiersOpt MemberDecl
  MemberDecl is defined as:
     MethodOrFieldDecl
     "void" Identifier MethodDeclaratorRest
     Identifier ConstructorDeclaratorRest
     ClassOrInterfaceDeclaration
  MethodOrFieldDecl is defined as:
     Type Identifier MethodOrFieldRest
  MethodOrFieldRest is defined as:
     VariableDeclaratorRest
     MethodDeclaratorRest
  VariableDeclaratorRest is defined as:
     BracketsOpt [ "=" VariableInitializer ]
  VariableInitializer is defined as:
     ArrayInitializer
     Expression
  MethodDeclaratorRest is defined as:
     FormalParameters BracketsOpt [ "throws" QualifiedIdentifierList ] ( MethodBody | ";" )


  While in the text of the spec it is yaccified:

  ClassDeclaration is defined as:
     [ ClassModifiers ] "class" Identifier [ Super ] [ Interfaces ] ClassBody
  Super is defined as:
     "extends" ClassType
  Interfaces is defined as:
     "implements" InterfaceTypeList
  ClassBody is defined as:
     { [ ClassBodyDeclarations ] }
  ClassBodyDeclarations is defined as:
     ClassBodyDeclaration
     ClassBodyDeclarations ClassBodyDeclaration
  ClassBodyDeclaration is defined as:
     ClassMemberDeclaration
     InstanceInitializer
     StaticInitializer
     ConstructorDeclaration
  ClassMemberDeclaration is defined as:
     FieldDeclaration
     MethodDeclaration
     ClassDeclaration
     InterfaceDeclaration
     ";"
  FieldDeclaration is defined as:
     [ FieldModifiers ] Type VariableDeclarators ";"
  MethodDeclaration is defined as:
     MethodHeader MethodBody
  MethodHeader is defined as:
     [ MethodModifiers ] ResultType MethodDeclarator [ Throws ]
  
  -->
	<!-- 
   - Fail: TypeDeclaration.
      - [], ;([n(ClassOrInterfaceDeclaration), t((;))])
     vs.
      - [], ;([n(ClassDeclaration), n(InterfaceDeclaration), t((;))])
  -->
	<exbgf:extractV>
		<context>TypeDeclaration</context>
		<bgf:production>
			<nonterminal>ClassOrInterfaceDeclaration</nonterminal>
			<bgf:expression>
				<choice>
					<bgf:expression>
						<nonterminal>ClassDeclaration</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>InterfaceDeclaration</nonterminal>
					</bgf:expression>
				</choice>
			</bgf:expression>
		</bgf:production>
		<in>
			<nonterminal>TypeDeclaration</nonterminal>
		</in>
	</exbgf:extractV>
	<!-- 
   - Fail: ClassBody.
      - [], ,([t({), *(n(ClassBodyDeclaration)), t(})])
     vs.
      - [], ,([t({), ?(n(ClassBodyDeclarations)), t(})])
  -->
	<exbgf:inlineYO starof="ClassBodyDeclaration">ClassBodyDeclarations</exbgf:inlineYO>
	<!-- 
	- Fail (1/1): NormalClassDeclaration.
	      - [], ,([n(ModifiersOpt), t(class), n(Identifier), ?(n(TypeParameters)), ?(n(Super)), ?(n(Interfaces)), n(ClassBody)])
	     vs.
	      - [], ,([t(class), n(Identifier), ?(n(TypeParameters)), ?(n(Super)), ?(,([t(implements), n(TypeList)])), n(ClassBody)])
	 -->
	<xbgf:unfold>
		<nonterminal>ModifiersOpt</nonterminal>
		<in>
			<nonterminal>NormalClassDeclaration</nonterminal>
		</in>
	</xbgf:unfold>
	<!-- RELAXATION -->
	<xbgf:disappear>
		<bgf:production>
			<nonterminal>NormalClassDeclaration</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<marked>
							<bgf:expression>
								<star>
									<bgf:expression>
										<nonterminal>Modifier</nonterminal>
									</bgf:expression>
								</star>
							</bgf:expression>
						</marked>
					</bgf:expression>
					<bgf:expression>
						<terminal>class</terminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Identifier</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>TypeParameters</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>Super</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>Interfaces</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>ClassBody</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:disappear>
	<xbgf:inline>Interfaces</xbgf:inline>
	<!-- 
	- Fail (4/1): ClassBodyDeclaration.
      - [], n(ConstructorDeclaration)
      - [], n(StaticInitializer)
      - [], n(InstanceInitializer)
      - [], n(ClassMemberDeclaration)
     vs.
      - [], ;([,([n(ModifiersOpt), n(Type), n(VariableDeclarators), t(;)]), ,([n(ModifiersOpt), ?(n(TypeParameters)), n(ResultType), n(Identifier), n(MethodDeclaratorRest)]), ,([n(ModifiersOpt), n(ClassDeclaration)]), ,([n(ModifiersOpt), n(InterfaceDeclaration)]), t(;), ,([?(t(static)), n(Block)]), ,([n(ModifiersOpt), ?(n(TypeParameters)), n(Identifier), n(ConstructorDeclaratorRest)])])
    -->
	<xbgf:inline>ConstructorDeclaration</xbgf:inline>
	<xbgf:inline>InstanceInitializer</xbgf:inline>
	<xbgf:inline>StaticInitializer</xbgf:inline>
	<!-- 
	ClassMemberDeclaration:
	        FieldDeclaration
	ClassMemberDeclaration:
	        MethodDeclaration
	ClassMemberDeclaration:
	        ClassDeclaration
	ClassMemberDeclaration:
	        InterfaceDeclaration
	ClassMemberDeclaration:
	        ";"
	 -->
	<xbgf:inline>FieldDeclaration</xbgf:inline>
	<xbgf:inline>MethodDeclaration</xbgf:inline>
	<xbgf:appear>
		<bgf:production>
			<nonterminal>ClassMemberDeclaration</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<marked>
							<bgf:expression>
								<star>
									<bgf:expression>
										<nonterminal>Modifier</nonterminal>
									</bgf:expression>
								</star>
							</bgf:expression>
						</marked>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>ClassDeclaration</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:appear>
	<!-- RELAXATION -->
	<xbgf:appear>
		<bgf:production>
			<nonterminal>ClassMemberDeclaration</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<marked>
							<bgf:expression>
								<star>
									<bgf:expression>
										<nonterminal>Modifier</nonterminal>
									</bgf:expression>
								</star>
							</bgf:expression>
						</marked>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>InterfaceDeclaration</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:appear>
	<xbgf:fold>
		<nonterminal>ModifiersOpt</nonterminal>
		<in>
			<nonterminal>ClassMemberDeclaration</nonterminal>
		</in>
	</xbgf:fold>
	<exbgf:inlineV>ClassMemberDeclaration</exbgf:inlineV>
	<!-- 
	- Fail (4/1): ClassBodyDeclaration.
      - [], ,([n(ModifiersOpt), n(ConstructorDeclarator), ?(n(Throws)), n(ConstructorBody)])
      - [], ,([t(static), n(Block)])
      - [], n(Block)
      - [], ;([,([n(ModifiersOpt), n(Type), n(VariableDeclarators), t(;)]), ,([n(MethodHeader), n(MethodBody)]), ,([n(ModifiersOpt), n(ClassDeclaration)]), ,([n(ModifiersOpt), n(InterfaceDeclaration)]), t(;)])
     vs.
      - [], ;([,([n(ModifiersOpt), n(Type), n(VariableDeclarators), t(;)]), ,([n(ModifiersOpt), ?(n(TypeParameters)), n(ResultType), n(Identifier), n(MethodDeclaratorRest)]), ,([n(ModifiersOpt), n(ClassDeclaration)]), ,([n(ModifiersOpt), n(InterfaceDeclaration)]), t(;), ,([?(t(static)), n(Block)]), ,([n(ModifiersOpt), ?(n(TypeParameters)), n(Identifier), n(ConstructorDeclaratorRest)])])
    -->
	<exbgf:factor-out>
		<context>ClassBodyDeclaration</context>
		<start/>
		<optional>
			<bgf:expression>
				<terminal>static</terminal>
			</bgf:expression>
		</optional>
		<tail>
			<bgf:expression>
				<nonterminal>Block</nonterminal>
			</bgf:expression>
		</tail>
	</exbgf:factor-out>
	<!-- proceeding with inlines -->
	<xbgf:inline>ConstructorDeclarator</xbgf:inline>
	<exbgf:inlineY>MethodDeclarator</exbgf:inlineY>
	<xbgf:inline>MethodHeader</xbgf:inline>
	<!-- <exbgf:inlineV>MethodBody</exbgf:inlineV> -->
	<!-- [Dims] vs BracketsOpt-->
	<exbgf:extract-twice>
		<bgf:production>
			<nonterminal>BracketsOpt</nonterminal>
			<bgf:expression>
				<optional>
					<bgf:expression>
						<nonterminal>Dims</nonterminal>
					</bgf:expression>
				</optional>
			</bgf:expression>
		</bgf:production>
		<!-- not 100% clean: deyaccification has impact on everyone, not just BracketsOpt -->
		<exbgf:unfoldY>
			<nonterminal>Dims</nonterminal>
			<in>BracketsOpt</in>
		</exbgf:unfoldY>
		<exbgf:massageOP2S>
			<sequence>
				<bgf:expression>
					<terminal>[</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>]</terminal>
				</bgf:expression>
			</sequence>
		</exbgf:massageOP2S>
	</exbgf:extract-twice>
	<!-- 
	- Fail (7/1): ClassBodyDeclaration.
      - [], ,([n(ModifiersOpt), ?(n(TypeParameters)), n(Identifier), t((), ?(n(FormalParameterList)), t()), ?(n(Throws)), n(ConstructorBody)])
      - [], ,([n(ModifiersOpt), ?(n(TypeParameters)), n(ResultType), n(Identifier), t((), ?(n(FormalParameterList)), t()), n(BracketsOpt), ?(n(Throws)), n(MethodBody)])
     vs.
      - [], ;([
			,([n(ModifiersOpt), ?(n(TypeParameters)), n(ResultType), n(Identifier), n(MethodDeclaratorRest)]),
			,([n(ModifiersOpt), ?(n(TypeParameters)), n(Identifier), n(ConstructorDeclaratorRest)])])
    -->
	<xbgf:extract>
		<bgf:production>
			<nonterminal>ConstructorDeclaratorRest</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>(</terminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>FormalParameterList</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<terminal>)</terminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>Throws</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>ConstructorBody</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:extract>
	<xbgf:extract>
		<bgf:production>
			<nonterminal>MethodDeclaratorRest</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>(</terminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>FormalParameterList</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<terminal>)</terminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>BracketsOpt</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>Throws</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>MethodBody</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:extract>
	<xbgf:horizontal>
		<nonterminal>ClassBodyDeclaration</nonterminal>
	</xbgf:horizontal>
	<!-- 
	- Fail (2/1): FormalParameters.
      - [], ,([n(FormalParameters), t(,), n(FormalParameter)])
      - [], n(FormalParameter)
     vs.
      - [], ,([t((), ?(n(FormalParameterDecls)), t())])
    -->
	<exbgf:reextractY>
		<bgf:production>
			<nonterminal>FormalParameters</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>(</terminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>FormalParameterList</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<terminal>)</terminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</exbgf:reextractY>
	<xbgf:unfold>
		<nonterminal>FormalParameters</nonterminal>
		<in>
			<nonterminal>AbstractMethodDeclaration</nonterminal>
		</in>
	</xbgf:unfold>
	<!-- 
	- Fail (1/1): FormalParameterList.
      - [], ,([n(FormalParameter), *(,([t(,), n(FormalParameter)])), t(,), n(LastFormalParameter)])
     vs.
      - [], ,([n(FormalParameters), t(,), n(LastFormalParameter)])
	 -->
	<xbgf:introduce>
		<bgf:production>
			<nonterminal>FormalParameterDeclsRest</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>VariableDeclaratorId</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>,</terminal>
									</bgf:expression>
									<bgf:expression>
										<optional>
											<bgf:expression>
												<sequence>
													<bgf:expression>
														<terminal>final</terminal>
													</bgf:expression>
													<bgf:expression>
														<optional>
															<bgf:expression>
																<nonterminal>Annotations</nonterminal>
															</bgf:expression>
														</optional>
													</bgf:expression>
													<bgf:expression>
														<nonterminal>Type</nonterminal>
													</bgf:expression>
													<bgf:expression>
														<nonterminal>FormalParameterDeclsRest</nonterminal>
													</bgf:expression>
												</sequence>
											</bgf:expression>
										</optional>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</optional>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
		<bgf:production>
			<nonterminal>FormalParameterDeclsRest</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>...</terminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>VariableDeclaratorId</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:introduce>
	<xbgf:extract>
		<bgf:production>
			<nonterminal>FormalParameterDecls</nonterminal>
			<bgf:expression>
				<optional>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<terminal>final</terminal>
							</bgf:expression>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>Annotations</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>Type</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>FormalParameterDeclsRest</nonterminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
				</optional>
			</bgf:expression>
		</bgf:production>
	</xbgf:extract>
	<!-- 
	- Fail (1/1): FormalParameters.
      - [], ,([t((), ?(n(FormalParameterList)), t())])
     vs.
      - [], ,([t((), ?(n(FormalParameterDecls)), t())])
    -->
	<exbgf:renameN>
		<!-- TODO: move to BUGCORRECTION	 -->
		<from>FormalParameterList</from>
		<to>FormalParameterDecls</to>
		<in>FormalParameters</in>
	</exbgf:renameN>
	<!-- 
	- Fail (1/1): FormalParameterList.
      - [], ,([n(FormalParameter), *(,([t(,), n(FormalParameter)])), t(,), n(LastFormalParameter)])
     vs.
      - [], ,([n(FormalParameters), t(,), n(LastFormalParameter)])
    -->
	<exbgf:shieldedD>
		<!-- TODO: also a BUG? -->
		<entity>
			<sequence>
				<bgf:expression>
					<nonterminal>FormalParameter</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<star>
						<bgf:expression>
							<sequence>
								<bgf:expression>
									<terminal>,</terminal>
								</bgf:expression>
								<bgf:expression>
									<nonterminal>FormalParameter</nonterminal>
								</bgf:expression>
							</sequence>
						</bgf:expression>
					</star>
				</bgf:expression>
			</sequence>
		</entity>
		<exbgf:renameN>
			<from>SHIELDED-ENTITY</from>
			<to>FormalParameters</to>
			<in>FormalParameterList</in>
		</exbgf:renameN>
	</exbgf:shieldedD>
</exbgf:sequence>
