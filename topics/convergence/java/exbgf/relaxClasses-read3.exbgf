<?xml version="1.0" encoding="UTF-8"?>
<exbgf:sequence xmlns:bgf="http://planet-sl.org/bgf" xmlns:xbgf="http://planet-sl.org/xbgf" xmlns:exbgf="http://planet-sl.org/exbgf">
	<!-- 
     vs.
      - [], ,([*(n(Modifier)), ?(n(TypeParameters)), n(Identifier), n(ConstructorDeclaratorRest)])
      - [], ,([*(n(Modifier)), ?(n(TypeParameters)), ;([n(Type), t(void)]), n(Identifier), n(MethodDeclaratorRest)])
  -->
	<xbgf:factor>
		<bgf:expression>
			<choice>
				<bgf:expression>
					<sequence>
						<bgf:expression>
							<nonterminal>ModifiersOpt</nonterminal>
						</bgf:expression>
						<bgf:expression>
							<optional>
								<bgf:expression>
									<nonterminal>TypeParameters</nonterminal>
								</bgf:expression>
							</optional>
						</bgf:expression>
						<bgf:expression>
							<nonterminal>Identifier</nonterminal>
						</bgf:expression>
						<bgf:expression>
							<nonterminal>ConstructorDeclaratorRest</nonterminal>
						</bgf:expression>
					</sequence>
				</bgf:expression>
				<bgf:expression>
					<sequence>
						<bgf:expression>
							<nonterminal>ModifiersOpt</nonterminal>
						</bgf:expression>
						<bgf:expression>
							<optional>
								<bgf:expression>
									<nonterminal>TypeParameters</nonterminal>
								</bgf:expression>
							</optional>
						</bgf:expression>
						<bgf:expression>
							<nonterminal>ResultType</nonterminal>
						</bgf:expression>
						<bgf:expression>
							<nonterminal>Identifier</nonterminal>
						</bgf:expression>
						<bgf:expression>
							<nonterminal>MethodDeclaratorRest</nonterminal>
						</bgf:expression>
					</sequence>
				</bgf:expression>
			</choice>
		</bgf:expression>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>ModifiersOpt</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>TypeParameters</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<choice>
						<bgf:expression>
							<sequence>
								<bgf:expression>
									<nonterminal>Identifier</nonterminal>
								</bgf:expression>
								<bgf:expression>
									<nonterminal>ConstructorDeclaratorRest</nonterminal>
								</bgf:expression>
							</sequence>
						</bgf:expression>
						<bgf:expression>
							<sequence>
								<bgf:expression>
									<nonterminal>ResultType</nonterminal>
								</bgf:expression>
								<bgf:expression>
									<nonterminal>Identifier</nonterminal>
								</bgf:expression>
								<bgf:expression>
									<nonterminal>MethodDeclaratorRest</nonterminal>
								</bgf:expression>
							</sequence>
						</bgf:expression>
					</choice>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</xbgf:factor>
	<exbgf:extractC>
		<bgf:production>
			<nonterminal>GenericMethodOrConstructorRest</nonterminal>
			<bgf:expression>
				<choice>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<nonterminal>Identifier</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>ConstructorDeclaratorRest</nonterminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<nonterminal>ResultType</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>Identifier</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>MethodDeclaratorRest</nonterminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
				</choice>
			</bgf:expression>
		</bgf:production>
	</exbgf:extractC>
	<!-- 
      - [], ,([*(n(Modifier)), ?(n(TypeParameters)), n(GenericMethodOrConstructorRest)])
  -->
	<xbgf:extract>
		<bgf:production>
			<nonterminal>GenericMethodOrConstructorDecl</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>TypeParameters</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>GenericMethodOrConstructorRest</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:extract>
	<!-- ISSUE PERMISSIVENESS -->
	<!-- RELAXATION -->
	<exbgf:narrowO21>
		<nonterminal>TypeParameters</nonterminal>
		<in>GenericMethodOrConstructorDecl</in>
	</exbgf:narrowO21>
	<exbgf:inlineV>ResultType</exbgf:inlineV>
	<xbgf:vertical>
		<nonterminal>ClassBodyDeclaration</nonterminal>
	</xbgf:vertical>
	<!-- 
   - Fail: VariableDeclaratorId.
      - [], ,([n(Identifier), *(,([t([), t(])]))])
     vs.
      - [], ;([n(Identifier), ,([n(VariableDeclaratorId), t([), t(])])])
   -->
	<xbgf:deyaccify>
		<nonterminal>VariableDeclaratorId</nonterminal>
	</xbgf:deyaccify>
	<!-- TODO WTF -->
	<!-- RELAXATION -->
	<!--  
      - [], ,([*(n(Modifier)), n(Type), n(VariableDeclarators), t((;))])
  -->
	<exbgf:removeV>
		<bgf:production>
			<nonterminal>ClassBodyDeclaration</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>ModifiersOpt</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Type</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>VariableDeclarators</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<terminal>;</terminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</exbgf:removeV>
	<xbgf:introduce>
		<bgf:production>
			<nonterminal>QualifiedIdentifierList</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>QualifiedIdentifier</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<star>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>,</terminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>QualifiedIdentifier</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</star>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:introduce>
	<!-- RELAXATION -->
	<exbgf:addV>
		<bgf:production>
			<nonterminal>ClassBodyDeclaration</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>ModifiersOpt</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<terminal>void</terminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Identifier</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>VoidMethodDeclaratorRest</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</exbgf:addV>
	<!-- BREFACTOR -->
	<xbgf:define>
		<bgf:production>
			<nonterminal>VoidMethodDeclaratorRest</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>FormalParameters</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>throws</terminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>QualifiedIdentifierList</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<choice>
							<bgf:expression>
								<nonterminal>MethodBody</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<terminal>;</terminal>
							</bgf:expression>
						</choice>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:define>
	<exbgf:addV>
		<!-- RELAXATION -->
		<bgf:production>
			<nonterminal>ClassBodyDeclaration</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>ModifiersOpt</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>MethodOrFieldDecl</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
		<!-- RELAXATION -->
		<bgf:production>
			<nonterminal>ClassBodyDeclaration</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>ModifiersOpt</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Identifier</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>ConstructorDeclaratorRest</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</exbgf:addV>
	<!-- BREFACTOR -->
	<xbgf:define>
		<bgf:production>
			<nonterminal>MethodOrFieldDecl</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>Type</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Identifier</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>MethodOrFieldRest</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:define>
	<!-- BREFACTOR -->
	<xbgf:define>
		<bgf:production>
			<nonterminal>MethodOrFieldRest</nonterminal>
			<bgf:expression>
				<nonterminal>VariableDeclaratorRest</nonterminal>
			</bgf:expression>
		</bgf:production>
		<bgf:production>
			<nonterminal>MethodOrFieldRest</nonterminal>
			<bgf:expression>
				<nonterminal>MethodDeclaratorRest</nonterminal>
			</bgf:expression>
		</bgf:production>
	</xbgf:define>
	<!-- 
   - Fail: ClassBodyDeclaration.
      - [], ;([... ,([*(n(Modifier)), n(MemberDecl)])])
     vs.
      - [], ,([*(n(Modifier)), n(Identifier), n(ConstructorDeclaratorRest)])
      - [], ,([*(n(Modifier)), n(MethodOrFieldDecl)])
      - [], ,([*(n(Modifier)), t(void), n(Identifier), n(VoidMethodDeclaratorRest)])
      - [], ,([*(n(Modifier)), n(InterfaceDeclaration)])
      - [], ,([*(n(Modifier)), n(ClassDeclaration)])
      - [], ,([*(n(Modifier)), n(GenericMethodOrConstructorDecl)])
  -->
	<exbgf:atomicV>
		<context>ClassBodyDeclaration</context>
		<xbgf:factor>
			<bgf:expression>
				<choice>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<nonterminal>ModifiersOpt</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>Identifier</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>ConstructorDeclaratorRest</nonterminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<nonterminal>ModifiersOpt</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>MethodOrFieldDecl</nonterminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<nonterminal>ModifiersOpt</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<terminal>void</terminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>Identifier</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>VoidMethodDeclaratorRest</nonterminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<nonterminal>ModifiersOpt</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>InterfaceDeclaration</nonterminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<nonterminal>ModifiersOpt</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>ClassDeclaration</nonterminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<nonterminal>ModifiersOpt</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>GenericMethodOrConstructorDecl</nonterminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
				</choice>
			</bgf:expression>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>ModifiersOpt</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<choice>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<nonterminal>Identifier</nonterminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>ConstructorDeclaratorRest</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>MethodOrFieldDecl</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>void</terminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>Identifier</nonterminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>VoidMethodDeclaratorRest</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>InterfaceDeclaration</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>ClassDeclaration</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>GenericMethodOrConstructorDecl</nonterminal>
							</bgf:expression>
						</choice>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</xbgf:factor>
		<exbgf:extractC>
			<bgf:production>
				<nonterminal>MemberDecl</nonterminal>
				<bgf:expression>
					<choice>
						<bgf:expression>
							<sequence>
								<bgf:expression>
									<nonterminal>Identifier</nonterminal>
								</bgf:expression>
								<bgf:expression>
									<nonterminal>ConstructorDeclaratorRest</nonterminal>
								</bgf:expression>
							</sequence>
						</bgf:expression>
						<bgf:expression>
							<nonterminal>MethodOrFieldDecl</nonterminal>
						</bgf:expression>
						<bgf:expression>
							<sequence>
								<bgf:expression>
									<terminal>void</terminal>
								</bgf:expression>
								<bgf:expression>
									<nonterminal>Identifier</nonterminal>
								</bgf:expression>
								<bgf:expression>
									<nonterminal>VoidMethodDeclaratorRest</nonterminal>
								</bgf:expression>
							</sequence>
						</bgf:expression>
						<bgf:expression>
							<nonterminal>InterfaceDeclaration</nonterminal>
						</bgf:expression>
						<bgf:expression>
							<nonterminal>ClassDeclaration</nonterminal>
						</bgf:expression>
						<bgf:expression>
							<nonterminal>GenericMethodOrConstructorDecl</nonterminal>
						</bgf:expression>
					</choice>
				</bgf:expression>
			</bgf:production>
		</exbgf:extractC>
	</exbgf:atomicV>
	<!-- 
   - Fail: ClassOrInterfaceDeclaration.
      - [], ,([n(ModifiersOpt), ;([n(ClassDeclaration), n(InterfaceDeclaration)])])
     vs.
      - [], ;([n(ClassDeclaration), n(InterfaceDeclaration)])
      
  -->
	<!-- RELAXATION -->
	<xbgf:appear>
		<bgf:production>
			<nonterminal>ClassOrInterfaceDeclaration</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<marked>
							<bgf:expression>
								<star>
									<bgf:expression>
										<nonterminal>Modifier</nonterminal>
									</bgf:expression>
								</star>
							</bgf:expression>
						</marked>
					</bgf:expression>
					<bgf:expression>
						<choice>
							<bgf:expression>
								<nonterminal>ClassDeclaration</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>InterfaceDeclaration</nonterminal>
							</bgf:expression>
						</choice>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:appear>
	<!-- ISSUE PERMISSIVENESS
   - Fail: ConstructorDeclaratorRest.
      - [], ,([n(FormalParameters), ?(,([t(throws), n(QualifiedIdentifierList)])), n(MethodBody)])
     vs.
      - [], ,([n(FormalParameters), ?(n(Throws)), n(ConstructorBody)])
ConstructorBody:
        "{" ExplicitConstructorInvocation ? BlockStatements "}"
MethodBody:
        Block
MethodBody:
        ";"
Block:
        "{" BlockStatements "}"
  -->
	<!-- RELAXATION -->
	<xbgf:disappear>
		<bgf:production>
			<nonterminal>ConstructorBody</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>{</terminal>
					</bgf:expression>
					<bgf:expression>
						<marked>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>ExplicitConstructorInvocation</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
						</marked>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>BlockStatements</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<terminal>}</terminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:disappear>
	<xbgf:eliminate>
		<nonterminal>ExplicitConstructorInvocation</nonterminal>
	</xbgf:eliminate>
	<xbgf:fold>
		<nonterminal>Block</nonterminal>
	</xbgf:fold>
	<!-- RELAXATION -->
	<xbgf:upgrade>
		<bgf:production>
			<nonterminal>ConstructorBody</nonterminal>
			<bgf:expression>
				<marked>
					<bgf:expression>
						<nonterminal>MethodBody</nonterminal>
					</bgf:expression>
				</marked>
			</bgf:expression>
		</bgf:production>
		<bgf:production>
			<nonterminal>MethodBody</nonterminal>
			<bgf:expression>
				<nonterminal>Block</nonterminal>
			</bgf:expression>
		</bgf:production>
	</xbgf:upgrade>
	<xbgf:inline>ConstructorBody</xbgf:inline>
	<!-- 
	  This is used by class definitions and interface definitions
	   - Fail: TypeParameters.
	      - [], ,([t(<), n(TypeParameter), *(,([t((,)), n(TypeParameter)])), t(>)])
	     vs.
	      - [], ,([t(<), n(TypeParameterList), t(>)])
	  -->
	<exbgf:inlineY>TypeParameterList</exbgf:inlineY>
	<!-- to fix the remaining appears -->
	<xbgf:fold>
		<nonterminal>ModifiersOpt</nonterminal>
	</xbgf:fold>
</exbgf:sequence>
