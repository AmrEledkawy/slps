<?xml version="1.0" encoding="UTF-8"?>
<exbgf:sequence xmlns:bgf="http://planet-sl.org/bgf" xmlns:xbgf="http://planet-sl.org/xbgf" xmlns:exbgf="http://planet-sl.org/exbgf">
	<exbgf:inlineV>AssertStatement</exbgf:inlineV>
	<xbgf:inline>BasicForStatement</xbgf:inline>
	<xbgf:inline>EnhancedForStatement</xbgf:inline>
	<xbgf:inline>ExpressionStatement</xbgf:inline>
	<!--
     - Fail: Statement.
              ,([t(assert), n(Expression), ?(,([t(:), n(Expression)])), t((;))]),
     vs.
               ;([,([t(assert), n(Expression), t((;))]),
                  ,([t(assert), n(Expression), t(:), n(Expression), t((;))])]),
	-->
	<exbgf:atomicV>
		<context>Statement</context>
		<exbgf:factor-out>
			<start>
				<bgf:expression>
					<terminal>assert</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Expression</nonterminal>
				</bgf:expression>
			</start>
			<choice>
				<bgf:expression>
					<sequence>
						<bgf:expression>
							<terminal>:</terminal>
						</bgf:expression>
						<bgf:expression>
							<nonterminal>Expression</nonterminal>
						</bgf:expression>
					</sequence>
				</bgf:expression>
				<bgf:expression>
					<epsilon/>
				</bgf:expression>
			</choice>
			<tail>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
			</tail>
		</exbgf:factor-out>
		<exbgf:massageC2O>
			<sequence>
				<bgf:expression>
					<terminal>:</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Expression</nonterminal>
				</bgf:expression>
			</sequence>
		</exbgf:massageC2O>
		<!--
     - Fail: Statement.
      - [], ;([
              ,([t(for), t((), n(ForControl), t()), n(Statement)]),
     vs.
      - [], ;([
               ,([t(for), t((), ?(n(ForInit)), t((;)), ?(n(Expression)), t((;)), ?(n(ForUpdate)), t()), n(Statement)]),
               ,([t(for), t((), ?(n(VariableModifiers)), n(Type), n(Identifier), t(:), n(Expression), t()), n(Statement)])])
		-->
		<exbgf:pull-out>
			<nonterminal>ForControl</nonterminal>
			<start>
				<bgf:expression>
					<terminal>for</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
			</start>
			<choice>
				<bgf:expression>
					<sequence>
						<bgf:expression>
							<optional>
								<bgf:expression>
									<nonterminal>ForInit</nonterminal>
								</bgf:expression>
							</optional>
						</bgf:expression>
						<bgf:expression>
							<terminal>;</terminal>
						</bgf:expression>
						<bgf:expression>
							<optional>
								<bgf:expression>
									<nonterminal>Expression</nonterminal>
								</bgf:expression>
							</optional>
						</bgf:expression>
						<bgf:expression>
							<terminal>;</terminal>
						</bgf:expression>
						<bgf:expression>
							<optional>
								<bgf:expression>
									<nonterminal>ForUpdate</nonterminal>
								</bgf:expression>
							</optional>
						</bgf:expression>
					</sequence>
				</bgf:expression>
				<bgf:expression>
					<sequence>
						<bgf:expression>
							<optional>
								<bgf:expression>
									<nonterminal>VariableModifiers</nonterminal>
								</bgf:expression>
							</optional>
						</bgf:expression>
						<bgf:expression>
							<nonterminal>Type</nonterminal>
						</bgf:expression>
						<bgf:expression>
							<nonterminal>Identifier</nonterminal>
						</bgf:expression>
						<bgf:expression>
							<terminal>:</terminal>
						</bgf:expression>
						<bgf:expression>
							<nonterminal>Expression</nonterminal>
						</bgf:expression>
					</sequence>
				</bgf:expression>
			</choice>
			<tail>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Statement</nonterminal>
				</bgf:expression>
			</tail>
		</exbgf:pull-out>
		<!--
     - Fail: Statement.
      - [], ;([
              ,([t(try), n(Block), ;([n(Catches), ,([?(n(Catches)), t(finally), n(Block)])])]),
     vs.
      - [], ;([
               ,([t(try), n(Block), n(Catches)]),
               ,([t(try), n(Block), ?(n(Catches)), t(finally), n(Block)]),
		-->
		<exbgf:factor-out>
			<start>
				<bgf:expression>
					<terminal>try</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Block</nonterminal>
				</bgf:expression>
			</start>
			<choice>
				<bgf:expression>
					<nonterminal>Catches</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<sequence>
						<bgf:expression>
							<optional>
								<bgf:expression>
									<nonterminal>Catches</nonterminal>
								</bgf:expression>
							</optional>
						</bgf:expression>
						<bgf:expression>
							<terminal>finally</terminal>
						</bgf:expression>
						<bgf:expression>
							<nonterminal>Block</nonterminal>
						</bgf:expression>
					</sequence>
				</bgf:expression>
			</choice>
			<tail/>
		</exbgf:factor-out>
	</exbgf:atomicV>
	<!-- should've been a part of generalizeModifiers! for doc3 -->
	<!--
   - Fail: LocalVariableDeclarationStatement.
      - [], ,([?(t(final)), n(Type), n(VariableDeclarators), t((;))])
     vs.
      - [], ,([n(VariableModifiers), n(Type), n(VariableDeclarators), t((;))])
  -->
	<exbgf:inlineY>VariableModifiers</exbgf:inlineY>
	<!-- RELAXATION -->
	<exbgf:removeV>
		<bgf:production>
			<nonterminal>VariableModifier</nonterminal>
			<bgf:expression>
				<nonterminal>Annotation</nonterminal>
			</bgf:expression>
		</bgf:production>
	</exbgf:removeV>
	<xbgf:inline>VariableModifier</xbgf:inline>
	<!-- RELAXATION -->
	<exbgf:narrowP21>
		<terminal>final</terminal>
	</exbgf:narrowP21>
</exbgf:sequence>
