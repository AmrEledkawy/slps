<?xml version="1.0" encoding="UTF-8"?>
<exbgf:sequence xmlns:bgf="http://planet-sl.org/bgf" xmlns:xbgf="http://planet-sl.org/xbgf" xmlns:exbgf="http://planet-sl.org/exbgf">
	<xbgf:deyaccify>
		<nonterminal>VariableDeclarators</nonterminal>
	</xbgf:deyaccify>
	<!-- 
   - Fail: VariableDeclarator.
      - [], ,([n(Identifier), n(VariableDeclaratorRest)])
     vs.
      - [], ;([n(VariableDeclaratorId), ,([n(VariableDeclaratorId), t(=), n(VariableInitializer)])])
  -->
	<xbgf:horizontal>
		<nonterminal>VariableDeclarator</nonterminal>
	</xbgf:horizontal>
	<exbgf:factor-out>
		<start>
			<bgf:expression>
				<nonterminal>VariableDeclaratorId</nonterminal>
			</bgf:expression>
		</start>
		<choice>
			<bgf:expression>
				<epsilon/>
			</bgf:expression>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>=</terminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>VariableInitializer</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</choice>
		<tail/>
	</exbgf:factor-out>
	<exbgf:massageC2O>
		<sequence>
			<bgf:expression>
				<terminal>=</terminal>
			</bgf:expression>
			<bgf:expression>
				<nonterminal>VariableInitializer</nonterminal>
			</bgf:expression>
		</sequence>
	</exbgf:massageC2O>
	<xbgf:unfold>
		<nonterminal>VariableDeclaratorId</nonterminal>
		<in>
			<nonterminal>VariableDeclarator</nonterminal>
		</in>
	</xbgf:unfold>
	<xbgf:extract>
		<bgf:production>
			<nonterminal>VariableDeclaratorRest</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>BracketsOpt</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>=</terminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>VariableInitializer</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</optional>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:extract>
	<!-- 
   - Fail: CompilationUnit.
      - [], ,([?(,([t(package), n(QualifiedIdentifier), t((;))])), *(n(ImportDeclaration)), *(n(TypeDeclaration))])
     vs.
      - [], ,([?(n(PackageDeclaration)), ?(n(ImportDeclarations)), ?(n(TypeDeclarations))])
  -->
	<xbgf:inline>PackageDeclaration</xbgf:inline>
	<exbgf:inlineYO starof="ImportDeclaration">ImportDeclarations</exbgf:inlineYO>
	<exbgf:inlineYO starof="TypeDeclaration">TypeDeclarations</exbgf:inlineYO>
	<!-- 
   - Fail: ImportDeclaration.
      - [], ,([t(import), n(Identifier), *(,([t(.), n(Identifier)])), ?(,([t(.), t(*)])), t((;))])
     vs.
      - [], ;([n(SingleTypeImportDeclaration), n(TypeImportOnDemandDeclaration)])
  -->
	<xbgf:inline>SingleTypeImportDeclaration</xbgf:inline>
	<xbgf:inline>TypeImportOnDemandDeclaration</xbgf:inline>
	<!-- 
   - Fail: ImportDeclaration.
      - [], ,([t(import), n(QualifiedIdentifier), ?(,([t(.), t(*)])), t((;))])
     vs.
      - [], ;([,([t(import), n(QualifiedIdentifier), t((;))]),
               ,([t(import), n(QualifiedIdentifier), t(.), t(*), t((;))])])
  -->
	<exbgf:atomicV>
		<context>ImportDeclaration</context>
		<exbgf:factor-out>
			<start>
				<bgf:expression>
					<terminal>import</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>QualifiedIdentifier</nonterminal>
				</bgf:expression>
			</start>
			<choice>
				<bgf:expression>
					<epsilon/>
				</bgf:expression>
				<bgf:expression>
					<sequence>
						<bgf:expression>
							<terminal>.</terminal>
						</bgf:expression>
						<bgf:expression>
							<terminal>*</terminal>
						</bgf:expression>
					</sequence>
				</bgf:expression>
			</choice>
			<tail>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
			</tail>
		</exbgf:factor-out>
		<exbgf:massageC2O>
			<sequence>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>*</terminal>
				</bgf:expression>
			</sequence>
		</exbgf:massageC2O>
	</exbgf:atomicV>
	<!--
   - Fail: ImportDeclaration.
      - [], ,([t(import), ?(t(static)), n(Identifier), *(,([t(.), n(Identifier)])), ?(,([t(.), t(*)])), t((;))])
     vs.
      - [], ,([t(import), t(static), n(QualifiedIdentifier), t(.), t(*), t((;))])
      - [], ,([t(import), t(static), n(QualifiedIdentifier), t(.), n(Identifier), t((;))])
      - [], ,([t(import), n(QualifiedIdentifier), ?(,([t(.), t(*)])), t((;))])
  -->
	<xbgf:unfold>
		<nonterminal>QualifiedIdentifier</nonterminal>
		<in>
			<nonterminal>ImportDeclaration</nonterminal>
		</in>
	</xbgf:unfold>
	<exbgf:shielded>
		<entity>
			<sequence>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
			</sequence>
		</entity>
		<exbgf:massageS12P>
			<nonterminal>SHIELDED-ENTITY</nonterminal>
		</exbgf:massageS12P>
		<!-- RELAXATION -->
		<exbgf:widenP2S>
			<nonterminal>SHIELDED-ENTITY</nonterminal>
		</exbgf:widenP2S>
		<xbgf:horizontal>
			<nonterminal>ImportDeclaration</nonterminal>
		</xbgf:horizontal>
		<exbgf:factor-out>
			<start>
				<bgf:expression>
					<terminal>import</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>static</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<star>
						<bgf:expression>
							<nonterminal>SHIELDED-ENTITY</nonterminal>
						</bgf:expression>
					</star>
				</bgf:expression>
			</start>
			<choice>
				<bgf:expression>
					<sequence>
						<bgf:expression>
							<terminal>.</terminal>
						</bgf:expression>
						<bgf:expression>
							<terminal>*</terminal>
						</bgf:expression>
					</sequence>
				</bgf:expression>
				<bgf:expression>
					<epsilon/>
				</bgf:expression>
			</choice>
			<tail>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
			</tail>
		</exbgf:factor-out>
		<exbgf:massageC2O>
			<sequence>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>*</terminal>
				</bgf:expression>
			</sequence>
		</exbgf:massageC2O>
		<exbgf:factor-out>
			<start>
				<bgf:expression>
					<terminal>import</terminal>
				</bgf:expression>
			</start>
			<choice>
				<bgf:expression>
					<terminal>static</terminal>
				</bgf:expression>
				<bgf:expression>
					<epsilon/>
				</bgf:expression>
			</choice>
			<tail>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<star>
						<bgf:expression>
							<nonterminal>SHIELDED-ENTITY</nonterminal>
						</bgf:expression>
					</star>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<sequence>
								<bgf:expression>
									<terminal>.</terminal>
								</bgf:expression>
								<bgf:expression>
									<terminal>*</terminal>
								</bgf:expression>
							</sequence>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
			</tail>
		</exbgf:factor-out>
		<exbgf:massageC2O>
			<terminal>static</terminal>
		</exbgf:massageC2O>
	</exbgf:shielded>
	<!-- ISSUE CORRECT (;)
   - Fail: MethodDeclaratorRest.
      - [], ,([t((), ?(n(FormalParameterDecls)), t()), n(BracketsOpt), ?(,([t(throws), n(QualifiedIdentifierList)])), ;([n(MethodBody), t((;))])])
     vs.
      - [], ,([n(FormalParameters), n(BracketsOpt), ?(,([t(throws), n(QualifiedIdentifierList)])), n(MethodBody)])
  -->
	<!-- CORRECTION -->
	<exbgf:addH>
		<bgf:production>
			<nonterminal>MethodDeclaratorRest</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>FormalParameters</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>BracketsOpt</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>throws</terminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>QualifiedIdentifierList</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<choice>
							<bgf:expression>
								<marked>
									<bgf:expression>
										<terminal>;</terminal>
									</bgf:expression>
								</marked>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>MethodBody</nonterminal>
							</bgf:expression>
						</choice>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</exbgf:addH>
	<xbgf:inline>FormalParameters</xbgf:inline>
	<!-- ISSUE PERMISSIVENESS
   - Fail: AnnotationTypeElementDeclaration.
      - [], ,([n(ModifiersOpt), n(AnnotationTypeElementRest)])
     vs.
      - [], t((;))
  x   - [], n(AnnotationTypeDeclaration)
  x   - [], n(EnumDeclaration)
  x   - [], n(InterfaceDeclaration)
  x   - [], n(ClassDeclaration)
      - [], ,([n(ModifiersOpt), n(Type), n(VariableDeclarators), t((;))])
      - [], ,([n(ModifiersOpt), n(Type), n(Identifier), t((), t()), ?(n(DefaultValue)), t((;))])
      
AnnotationTypeElementRest:
        Type Identifier AnnotationMethodOrConstantRest ";"
AnnotationTypeElementRest:
        ClassDeclaration
AnnotationTypeElementRest:
        InterfaceDeclaration
AnnotationTypeElementRest:
        EnumDeclaration
AnnotationTypeElementRest:
        AnnotationTypeDeclaration
  -->
	<!-- RELAXATION -->
	<exbgf:removeV>
		<bgf:production>
			<nonterminal>AnnotationTypeElementDeclaration</nonterminal>
			<bgf:expression>
				<terminal>;</terminal>
			</bgf:expression>
		</bgf:production>
	</exbgf:removeV>
	<!-- RELAXATION -->
	<xbgf:appear>
		<bgf:production>
			<nonterminal>AnnotationTypeElementDeclaration</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<marked>
							<bgf:expression>
								<star>
									<bgf:expression>
										<nonterminal>Modifier</nonterminal>
									</bgf:expression>
								</star>
							</bgf:expression>
						</marked>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>AnnotationTypeDeclaration</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:appear>
	<!-- RELAXATION -->
	<xbgf:appear>
		<bgf:production>
			<nonterminal>AnnotationTypeElementDeclaration</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<marked>
							<bgf:expression>
								<star>
									<bgf:expression>
										<nonterminal>Modifier</nonterminal>
									</bgf:expression>
								</star>
							</bgf:expression>
						</marked>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>EnumDeclaration</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:appear>
	<!-- RELAXATION -->
	<xbgf:appear>
		<bgf:production>
			<nonterminal>AnnotationTypeElementDeclaration</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<marked>
							<bgf:expression>
								<star>
									<bgf:expression>
										<nonterminal>Modifier</nonterminal>
									</bgf:expression>
								</star>
							</bgf:expression>
						</marked>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>InterfaceDeclaration</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:appear>
	<!-- RELAXATION -->
	<xbgf:appear>
		<bgf:production>
			<nonterminal>AnnotationTypeElementDeclaration</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<marked>
							<bgf:expression>
								<star>
									<bgf:expression>
										<nonterminal>Modifier</nonterminal>
									</bgf:expression>
								</star>
							</bgf:expression>
						</marked>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>ClassDeclaration</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:appear>
	<xbgf:fold>
		<nonterminal>ModifiersOpt</nonterminal>
		<in>
			<nonterminal>AnnotationTypeElementDeclaration</nonterminal>
		</in>
	</xbgf:fold>
	<xbgf:horizontal>
		<nonterminal>AnnotationTypeElementDeclaration</nonterminal>
	</xbgf:horizontal>
	<exbgf:factor-out>
		<start>
			<bgf:expression>
				<nonterminal>ModifiersOpt</nonterminal>
			</bgf:expression>
		</start>
		<choice>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>Type</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Identifier</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<terminal>(</terminal>
					</bgf:expression>
					<bgf:expression>
						<terminal>)</terminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>BracketsOpt</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>DefaultValue</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<terminal>;</terminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>Type</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>VariableDeclarators</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<terminal>;</terminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
			<bgf:expression>
				<nonterminal>ClassDeclaration</nonterminal>
			</bgf:expression>
			<bgf:expression>
				<nonterminal>InterfaceDeclaration</nonterminal>
			</bgf:expression>
			<bgf:expression>
				<nonterminal>EnumDeclaration</nonterminal>
			</bgf:expression>
			<bgf:expression>
				<nonterminal>AnnotationTypeDeclaration</nonterminal>
			</bgf:expression>
		</choice>
		<tail/>
	</exbgf:factor-out>
	<xbgf:extract>
		<bgf:production>
			<nonterminal>AnnotationTypeElementRest</nonterminal>
			<bgf:expression>
				<choice>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<nonterminal>Type</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>Identifier</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<terminal>(</terminal>
							</bgf:expression>
							<bgf:expression>
								<terminal>)</terminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>BracketsOpt</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>DefaultValue</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
							<bgf:expression>
								<terminal>;</terminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<nonterminal>Type</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>VariableDeclarators</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<terminal>;</terminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>ClassDeclaration</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>InterfaceDeclaration</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>EnumDeclaration</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>AnnotationTypeDeclaration</nonterminal>
					</bgf:expression>
				</choice>
			</bgf:expression>
		</bgf:production>
	</xbgf:extract>
	<!--
   - Fail: AnnotationTypeElementRest.
      - [], ,([n(Type), n(Identifier), n(AnnotationMethodOrConstantRest), t((;))])
     vs.
      - [], ,([n(Type), n(VariableDeclarators), t((;))])
      - [], ,([n(Type), n(Identifier), t((), t()), ?(n(DefaultValue)), t((;))])
  -->
	<xbgf:extract>
		<bgf:production>
			<nonterminal>AnnotationMethodRest</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>(</terminal>
					</bgf:expression>
					<bgf:expression>
						<terminal>)</terminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>BracketsOpt</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>DefaultValue</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:extract>
	<xbgf:extract>
		<bgf:production>
			<nonterminal>AnnotationConstantRest</nonterminal>
			<bgf:expression>
				<nonterminal>VariableDeclarators</nonterminal>
			</bgf:expression>
		</bgf:production>
		<in>
			<nonterminal>AnnotationTypeElementRest</nonterminal>
		</in>
	</xbgf:extract>
	<exbgf:factor-out>
		<start>
			<bgf:expression>
				<nonterminal>Type</nonterminal>
			</bgf:expression>
		</start>
		<choice>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>Identifier</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>AnnotationMethodRest</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
			<bgf:expression>
				<nonterminal>AnnotationConstantRest</nonterminal>
			</bgf:expression>
		</choice>
		<tail>
			<bgf:expression>
				<terminal>;</terminal>
			</bgf:expression>
		</tail>
	</exbgf:factor-out>
	<exbgf:extractC>
		<bgf:production>
			<nonterminal>AnnotationMethodOrConstantRest</nonterminal>
			<bgf:expression>
				<choice>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<nonterminal>Identifier</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>AnnotationMethodRest</nonterminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>AnnotationConstantRest</nonterminal>
					</bgf:expression>
				</choice>
			</bgf:expression>
		</bgf:production>
	</exbgf:extractC>
	<xbgf:vertical>
		<nonterminal>AnnotationTypeElementRest</nonterminal>
	</xbgf:vertical>
</exbgf:sequence>
