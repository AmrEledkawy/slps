<?xml version="1.0" encoding="UTF-8"?>
<exbgf:sequence xmlns:bgf="http://planet-sl.org/bgf" xmlns:xbgf="http://planet-sl.org/xbgf" xmlns:exbgf="http://planet-sl.org/exbgf">
	<!-- ISSUE EXTEND
  new feature: enumerations! -->
	<xbgf:introduce>
		<bgf:production>
			<nonterminal>EnumConstant</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>Annotations</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Identifier</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>Arguments</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>ClassBody</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:introduce>
	<xbgf:introduce>
		<bgf:production>
			<nonterminal>EnumConstants</nonterminal>
			<bgf:expression>
				<nonterminal>EnumConstant</nonterminal>
			</bgf:expression>
		</bgf:production>
		<bgf:production>
			<nonterminal>EnumConstants</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>EnumConstants</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<terminal>,</terminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>EnumConstant</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:introduce>
	<xbgf:introduce>
		<bgf:production>
			<nonterminal>EnumBodyDeclarations</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>;</terminal>
					</bgf:expression>
					<bgf:expression>
						<star>
							<bgf:expression>
								<nonterminal>ClassBodyDeclaration</nonterminal>
							</bgf:expression>
						</star>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:introduce>
	<xbgf:introduce>
		<bgf:production>
			<nonterminal>EnumBody</nonterminal>
			<bgf:expression>
				<star>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>EnumConstants</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<terminal>,</terminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>EnumBodyDeclarations</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
						</sequence>
					</bgf:expression>
				</star>
			</bgf:expression>
		</bgf:production>
	</xbgf:introduce>
	<xbgf:introduce>
		<bgf:production>
			<nonterminal>EnumDeclaration</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>enum</terminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Identifier</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>implements</terminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>TypeList</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>EnumBody</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:introduce>
	<xbgf:chain>
		<bgf:production>
			<nonterminal>ClassDeclaration</nonterminal>
			<bgf:expression>
				<nonterminal>NormalClassDeclaration</nonterminal>
			</bgf:expression>
		</bgf:production>
	</xbgf:chain>
	<!-- EXTENSION -->
	<exbgf:addV>
		<bgf:production>
			<nonterminal>ClassDeclaration</nonterminal>
			<bgf:expression>
				<nonterminal>EnumDeclaration</nonterminal>
			</bgf:expression>
		</bgf:production>
	</exbgf:addV>
	<xbgf:introduce>
		<bgf:production>
			<nonterminal>EnumConstantName</nonterminal>
			<bgf:expression>
				<nonterminal>Identifier</nonterminal>
			</bgf:expression>
		</bgf:production>
	</xbgf:introduce>
	<!-- EXTENSION -->
	<exbgf:addV>
		<bgf:production>
			<nonterminal>SwitchLabel</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>case</terminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>EnumConstantName</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<terminal>:</terminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</exbgf:addV>
	<!-- ISSUE EXTEND
   - Fail: NormalClassDeclaration.
      - [], ,([t(class), n(Identifier),                       ?(,([t(extends), n(Type)])), ?(,([t(implements), n(TypeList)])), n(ClassBody)])
     vs.
      - [], ,([t(class), n(Identifier), ?(n(TypeParameters)), ?(,([t(extends), n(Type)])), ?(,([t(implements), n(TypeList)])), n(ClassBody)])
  -->
	<xbgf:introduce>
		<bgf:production>
			<nonterminal>Bound</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>Type</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<star>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>&amp;</terminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>Type</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</star>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:introduce>
	<xbgf:introduce>
		<bgf:production>
			<nonterminal>TypeParameter</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>Identifier</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>extends</terminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>Bound</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</optional>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:introduce>
	<xbgf:introduce>
		<bgf:production>
			<nonterminal>TypeParameters</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>&lt;</terminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>TypeParameter</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<star>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>,</terminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>TypeParameter</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</star>
					</bgf:expression>
					<bgf:expression>
						<terminal>&gt;</terminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:introduce>
	<!-- EXTENSION -->
	<xbgf:appear>
		<bgf:production>
			<nonterminal>NormalClassDeclaration</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>class</terminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Identifier</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<marked>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>TypeParameters</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
						</marked>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>extends</terminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>Type</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>implements</terminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>TypeList</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>ClassBody</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:appear>
	<!--
   - Fail: ClassBodyDeclaration.
      - [], ,([n(ModifiersOpt), ;([n(ClassDeclaration), n(InterfaceDeclaration)])])
      - [], ,([n(ModifiersOpt), n(Identifier), n(ConstructorDeclaratorRest)])
      - [], ,([n(ModifiersOpt), t(void), n(Identifier), n(MethodDeclaratorRest)])
      - [], ,([n(ModifiersOpt), n(MethodOrFieldDecl)])
     vs.
      - [], ,([n(ModifiersOpt), n(MemberDecl)])
  -->
	<exbgf:atomicI>
		<context>ClassBodyDeclaration</context>
		<exbgf:factor-out>
			<start>
				<bgf:expression>
					<nonterminal>ModifiersOpt</nonterminal>
				</bgf:expression>
			</start>
			<choice>
				<bgf:expression>
					<nonterminal>MethodOrFieldDecl</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<sequence>
						<bgf:expression>
							<terminal>void</terminal>
						</bgf:expression>
						<bgf:expression>
							<nonterminal>Identifier</nonterminal>
						</bgf:expression>
						<bgf:expression>
							<nonterminal>MethodDeclaratorRest</nonterminal>
						</bgf:expression>
					</sequence>
				</bgf:expression>
				<bgf:expression>
					<sequence>
						<bgf:expression>
							<nonterminal>Identifier</nonterminal>
						</bgf:expression>
						<bgf:expression>
							<nonterminal>ConstructorDeclaratorRest</nonterminal>
						</bgf:expression>
					</sequence>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ClassDeclaration</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>InterfaceDeclaration</nonterminal>
				</bgf:expression>
			</choice>
			<tail/>
		</exbgf:factor-out>
		<exbgf:extractC>
			<bgf:production>
				<nonterminal>MemberDecl</nonterminal>
				<bgf:expression>
					<choice>
						<bgf:expression>
							<nonterminal>MethodOrFieldDecl</nonterminal>
						</bgf:expression>
						<bgf:expression>
							<sequence>
								<bgf:expression>
									<terminal>void</terminal>
								</bgf:expression>
								<bgf:expression>
									<nonterminal>Identifier</nonterminal>
								</bgf:expression>
								<bgf:expression>
									<nonterminal>MethodDeclaratorRest</nonterminal>
								</bgf:expression>
							</sequence>
						</bgf:expression>
						<bgf:expression>
							<sequence>
								<bgf:expression>
									<nonterminal>Identifier</nonterminal>
								</bgf:expression>
								<bgf:expression>
									<nonterminal>ConstructorDeclaratorRest</nonterminal>
								</bgf:expression>
							</sequence>
						</bgf:expression>
						<bgf:expression>
							<nonterminal>ClassDeclaration</nonterminal>
						</bgf:expression>
						<bgf:expression>
							<nonterminal>InterfaceDeclaration</nonterminal>
						</bgf:expression>
					</choice>
				</bgf:expression>
			</bgf:production>
		</exbgf:extractC>
	</exbgf:atomicI>
	<!-- ISSUE EXTEND
   - Fail: MemberDecl.
      - [], ,([t(void), n(Identifier), n(MethodDeclaratorRest)])
     vs.
      - [], ,([t(void), n(Identifier), n(VoidMethodDeclaratorRest)])
      - [], n(GenericMethodOrConstructorDecl)
  -->
	<xbgf:introduce>
		<bgf:production>
			<nonterminal>VoidMethodDeclaratorRest</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>(</terminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>FormalParameterDecls</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<terminal>)</terminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>throws</terminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>QualifiedIdentifierList</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<choice>
							<bgf:expression>
								<nonterminal>MethodBody</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<terminal>;</terminal>
							</bgf:expression>
						</choice>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:introduce>
	<!-- BREFACTOR local re-name -->
	<exbgf:renameN>
		<from>MethodDeclaratorRest</from>
		<to>VoidMethodDeclaratorRest</to>
		<in>MemberDecl</in>
	</exbgf:renameN>
	<xbgf:introduce>
		<bgf:production>
			<nonterminal>GenericMethodOrConstructorRest</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<choice>
							<bgf:expression>
								<nonterminal>Type</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<terminal>void</terminal>
							</bgf:expression>
						</choice>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Identifier</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>MethodDeclaratorRest</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
		<bgf:production>
			<nonterminal>GenericMethodOrConstructorRest</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>Identifier</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>ConstructorDeclaratorRest</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:introduce>
	<xbgf:introduce>
		<bgf:production>
			<nonterminal>GenericMethodOrConstructorDecl</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>TypeParameters</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>GenericMethodOrConstructorRest</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:introduce>
	<!-- EXTENSION -->
	<exbgf:addV>
		<bgf:production>
			<nonterminal>MemberDecl</nonterminal>
			<bgf:expression>
				<nonterminal>GenericMethodOrConstructorDecl</nonterminal>
			</bgf:expression>
		</bgf:production>
	</exbgf:addV>
</exbgf:sequence>
