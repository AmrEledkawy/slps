<?xml version="1.0" encoding="UTF-8"?>
<exbgf:sequence xmlns:bgf="http://planet-sl.org/bgf" xmlns:xbgf="http://planet-sl.org/xbgf" xmlns:exbgf="http://planet-sl.org/exbgf">
	<!-- ISSUE EXTEND -->
	<xbgf:introduce>
		<bgf:production>
			<nonterminal>QualifiedIdentifierList</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>QualifiedIdentifier</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<star>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>,</terminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>QualifiedIdentifier</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</star>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:introduce>
	<!-- ISSUE PERMISSIVENESS
  multiple mismatches -->
	<xbgf:unfold>
		<nonterminal>TypeList</nonterminal>
		<in>
			<nonterminal>Throws</nonterminal>
		</in>
	</xbgf:unfold>
	<!-- RELAXATION -->
	<xbgf:downgrade>
		<bgf:production>
			<nonterminal>Throws</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>throws</terminal>
					</bgf:expression>
					<bgf:expression>
						<marked>
							<bgf:expression>
								<nonterminal>Type</nonterminal>
							</bgf:expression>
						</marked>
					</bgf:expression>
					<bgf:expression>
						<star>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>,</terminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>Type</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</star>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
		<bgf:production>
			<nonterminal>Type</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>QualifiedIdentifier</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>BracketsOpt</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:downgrade>
	<!-- RELAXATION -->
	<xbgf:downgrade>
		<bgf:production>
			<nonterminal>Throws</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>throws</terminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>QualifiedIdentifier</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>BracketsOpt</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<star>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>,</terminal>
									</bgf:expression>
									<bgf:expression>
										<marked>
											<bgf:expression>
												<nonterminal>Type</nonterminal>
											</bgf:expression>
										</marked>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</star>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
		<bgf:production>
			<nonterminal>Type</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>QualifiedIdentifier</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>BracketsOpt</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:downgrade>
	<xbgf:unfold>
		<nonterminal>BracketsOpt</nonterminal>
		<in>
			<nonterminal>Throws</nonterminal>
		</in>
	</xbgf:unfold>
	<!-- RELAXATION -->
	<xbgf:disappear>
		<bgf:production>
			<nonterminal>Throws</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>throws</terminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>QualifiedIdentifier</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<star>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>[</terminal>
									</bgf:expression>
									<bgf:expression>
										<terminal>]</terminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</star>
					</bgf:expression>
					<bgf:expression>
						<star>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>,</terminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>QualifiedIdentifier</nonterminal>
									</bgf:expression>
									<bgf:expression>
										<marked>
											<bgf:expression>
												<star>
													<bgf:expression>
														<sequence>
															<bgf:expression>
																<terminal>[</terminal>
															</bgf:expression>
															<bgf:expression>
																<terminal>]</terminal>
															</bgf:expression>
														</sequence>
													</bgf:expression>
												</star>
											</bgf:expression>
										</marked>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</star>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:disappear>
	<!-- RELAXATION -->
	<xbgf:disappear>
		<bgf:production>
			<nonterminal>Throws</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>throws</terminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>QualifiedIdentifier</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<marked>
							<bgf:expression>
								<star>
									<bgf:expression>
										<sequence>
											<bgf:expression>
												<terminal>[</terminal>
											</bgf:expression>
											<bgf:expression>
												<terminal>]</terminal>
											</bgf:expression>
										</sequence>
									</bgf:expression>
								</star>
							</bgf:expression>
						</marked>
					</bgf:expression>
					<bgf:expression>
						<star>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>,</terminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>QualifiedIdentifier</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</star>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:disappear>
	<xbgf:fold>
		<nonterminal>QualifiedIdentifierList</nonterminal>
	</xbgf:fold>
	<!--  
   - Fail: InterfaceDeclaration.
      - [], ,([?(n(Modifiers)), t(interface), n(Identifier), ?(n(ExtendsInterfaces)), n(InterfaceBody)])
     vs.
      - [], ,([t(interface), n(Identifier), ?(,([t(extends), n(TypeList)])), n(InterfaceBody)])
      
 with
   p([], 'ExtendsInterfaces', ;([','([t(extends), n('InterfaceType')]), ','([n('ExtendsInterfaces'), t((',')), n('InterfaceType')])]))
 -->
	<xbgf:deyaccify>
		<nonterminal>ExtendsInterfaces</nonterminal>
	</xbgf:deyaccify>
	<xbgf:fold>
		<nonterminal>TypeList</nonterminal>
		<in>
			<nonterminal>ExtendsInterfaces</nonterminal>
		</in>
	</xbgf:fold>
	<!-- RELAXATION -->
	<xbgf:disappear>
		<bgf:production>
			<nonterminal>InterfaceDeclaration</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<marked>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>Modifiers</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
						</marked>
					</bgf:expression>
					<bgf:expression>
						<terminal>interface</terminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Identifier</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>ExtendsInterfaces</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>InterfaceBody</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:disappear>
	<xbgf:inline>ExtendsInterfaces</xbgf:inline>
	<!-- 
   - Fail: ClassDeclaration.
      - [], ,([?(n(Modifiers)), t(class), n(Identifier), ?(n(Super)), ?(n(Interfaces)), n(ClassBody)])
     vs.
      - [], ,([t(class), n(Identifier), ?(,([t(extends), n(Type)])), ?(,([t(implements), n(TypeList)])), n(ClassBody)])
  -->
	<!-- RELAXATION -->
	<xbgf:disappear>
		<bgf:production>
			<nonterminal>ClassDeclaration</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<marked>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>Modifiers</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
						</marked>
					</bgf:expression>
					<bgf:expression>
						<terminal>class</terminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Identifier</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>Super</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>Interfaces</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>ClassBody</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:disappear>
	<xbgf:inline>Super</xbgf:inline>
	<xbgf:inline>Interfaces</xbgf:inline>
	<!-- 
   - Fail: TypeDeclaration.
      - [], ;([n(ClassDeclaration), n(InterfaceDeclaration), t((;))])
     vs.
      - [], ;([n(ClassOrInterfaceDeclaration), t((;))])
   - Fail: ClassOrInterfaceDeclaration.
      - [], ;([n(ClassDeclaration), n(InterfaceDeclaration)])
     vs.
      - [], ,([n(ModifiersOpt), ;([n(ClassDeclaration), n(InterfaceDeclaration)])])
  -->
	<exbgf:extractV>
		<context>TypeDeclaration</context>
		<bgf:production>
			<nonterminal>ClassOrInterfaceDeclaration</nonterminal>
			<bgf:expression>
				<choice>
					<bgf:expression>
						<nonterminal>ClassDeclaration</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>InterfaceDeclaration</nonterminal>
					</bgf:expression>
				</choice>
			</bgf:expression>
		</bgf:production>
	</exbgf:extractV>
	<!-- RELAXATION -->
	<xbgf:appear>
		<bgf:production>
			<nonterminal>ClassOrInterfaceDeclaration</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<marked>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>Modifiers</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
						</marked>
					</bgf:expression>
					<bgf:expression>
						<choice>
							<bgf:expression>
								<nonterminal>ClassDeclaration</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>InterfaceDeclaration</nonterminal>
							</bgf:expression>
						</choice>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:appear>
	<!-- ISSUE EXTEND
   - Fail: FormalParameter.
      - [], ,([n(Type), n(VariableDeclaratorId)])
     vs.
      - [], ,([?(t(final)), n(Type), n(VariableDeclaratorId)])
  -->
	<!-- EXTENSION -->
	<xbgf:appear>
		<bgf:production>
			<nonterminal>FormalParameter</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<marked>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<terminal>final</terminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
						</marked>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Type</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>VariableDeclaratorId</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:appear>
	<!-- 
   - Fail: SwitchBlockStatementGroup.
      - [], ,([n(SwitchLabels), n(BlockStatements)])
     vs.
      - [], ,([n(SwitchLabel), n(BlockStatements)])
  with
    p([], 'SwitchLabels', ;([n('SwitchLabel'), ','([n('SwitchLabels'), n('SwitchLabel')])])),
  -->
	<xbgf:deyaccify>
		<nonterminal>SwitchLabels</nonterminal>
	</xbgf:deyaccify>
	<!-- 
   - Fail: ImportDeclaration.
      - [], ;([n(SingleTypeImportDeclaration), n(TypeImportOnDemandDeclaration)])
     vs.
      - [], ,([t(import), n(QualifiedIdentifier), ?(,([t(.), t(*)])), t((;))])
      
  with
     p([], 'SingleTypeImportDeclaration', ','([t(import), n('QualifiedIdentifier'), t((;))])),
     p([], 'TypeImportOnDemandDeclaration', ','([t(import), n('QualifiedIdentifier'), t('.'), t(*), t((;))])),
  -->
	<xbgf:inline>SingleTypeImportDeclaration</xbgf:inline>
	<xbgf:inline>TypeImportOnDemandDeclaration</xbgf:inline>
	<xbgf:horizontal>
		<nonterminal>ImportDeclaration</nonterminal>
	</xbgf:horizontal>
	<exbgf:factor-out>
		<start>
			<bgf:expression>
				<terminal>import</terminal>
			</bgf:expression>
			<bgf:expression>
				<nonterminal>QualifiedIdentifier</nonterminal>
			</bgf:expression>
		</start>
		<choice>
			<bgf:expression>
				<epsilon/>
			</bgf:expression>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>.</terminal>
					</bgf:expression>
					<bgf:expression>
						<terminal>*</terminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</choice>
		<tail>
			<bgf:expression>
				<terminal>;</terminal>
			</bgf:expression>
		</tail>
	</exbgf:factor-out>
	<exbgf:massageC2O>
		<sequence>
			<bgf:expression>
				<terminal>.</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>*</terminal>
			</bgf:expression>
		</sequence>
	</exbgf:massageC2O>
	<!--  
   - Fail: ArrayInitializer.
      - [], ,([t({), ?(n(VariableInitializers)), ?(t((,))), t(})])
     vs.
      - [], ,([t({), ?(,([n(VariableInitializer), *(,([t((,)), n(VariableInitializer)])), ?(t((,)))])), t(})])
  -->
	<exbgf:inlineY>VariableInitializers</exbgf:inlineY>
	<!-- 
   - Fail: ClassBody.
      - [], ,([t({), ?(n(ClassBodyDeclarations)), t(})])
     vs.
      - [], ,([t({), *(n(ClassBodyDeclaration)), t(})])
  -->
	<exbgf:inlineYO starof="ClassBodyDeclaration">ClassBodyDeclarations</exbgf:inlineYO>
	<!-- 
   - Fail: InterfaceBody.
      - [], ,([t({), ?(n(InterfaceMemberDeclarations)), t(})])
     vs.
      - [], ,([t({), *(n(InterfaceBodyDeclaration)), t(})])
  -->
	<exbgf:inlineYO starof="InterfaceBodyDeclaration">InterfaceMemberDeclarations</exbgf:inlineYO>
	<!-- 
   - Fail: CompilationUnit.
      - [], ,([?(n(PackageDeclaration)), ?(n(ImportDeclarations)), ?(n(TypeDeclarations))])
     vs.
      - [], ,([?(,([t(package), n(QualifiedIdentifier), t((;))])), *(n(ImportDeclaration)), *(n(TypeDeclaration))])
  -->
	<exbgf:inlineYO starof="ImportDeclaration">ImportDeclarations</exbgf:inlineYO>
	<exbgf:inlineYO starof="TypeDeclaration">TypeDeclarations</exbgf:inlineYO>
	<xbgf:inline>PackageDeclaration</xbgf:inline>
	<!-- 
   - Fail: InterfaceBodyDeclaration.
      - [], ;([n(ConstantDeclaration), n(AbstractMethodDeclaration)])
     vs.
      - [], ;([t((;)), ,([n(ModifiersOpt), n(InterfaceMemberDecl)])])
  -->
	<xbgf:inline>ConstantDeclaration</xbgf:inline>
	<xbgf:inline>FieldDeclaration</xbgf:inline>
	<xbgf:inline>AbstractMethodDeclaration</xbgf:inline>
	<exbgf:inlineV>MethodHeader</exbgf:inlineV>
	<!-- 
   - Fail: ModifiersOpt.
      - [], ?(n(Modifiers))
     vs.
      - [], *(n(Modifier))
  -->
	<!-- exbgf:inlineY + exbgf:massageOP2S + xbgf:extract -->
	<exbgf:promoteY2S>
		<nonterminal>Modifiers</nonterminal>
		<starof>Modifier</starof>
		<newname>ModifiersOpt</newname>
	</exbgf:promoteY2S>
	<!-- 
   - Fail: InterfaceBodyDeclaration.
      - [], ;([,([n(ModifiersOpt), n(Type), n(VariableDeclarators), t((;))]),
               ,([n(ModifiersOpt), n(Type), n(MethodDeclarator), ?(n(Throws)), t((;))]),
               ,([n(ModifiersOpt), t(void), n(MethodDeclarator), ?(n(Throws)), t((;))])])
     vs.
      - [], ;([t((;)), ,([n(ModifiersOpt), n(InterfaceMemberDecl)])])
  -->
	<exbgf:distributeV>InterfaceBodyDeclaration</exbgf:distributeV>
	<exbgf:factor-out>
		<start>
			<bgf:expression>
				<nonterminal>ModifiersOpt</nonterminal>
			</bgf:expression>
		</start>
		<choice>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>Type</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>VariableDeclarators</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<terminal>;</terminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>Type</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>MethodDeclarator</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>Throws</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<terminal>;</terminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>void</terminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>MethodDeclarator</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>Throws</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<terminal>;</terminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</choice>
		<tail/>
	</exbgf:factor-out>
	<exbgf:atomic>
		<xbgf:extract>
			<bgf:production>
				<nonterminal>InterfaceMemberDecl</nonterminal>
				<bgf:expression>
					<choice>
						<bgf:expression>
							<sequence>
								<bgf:expression>
									<nonterminal>Type</nonterminal>
								</bgf:expression>
								<bgf:expression>
									<nonterminal>VariableDeclarators</nonterminal>
								</bgf:expression>
								<bgf:expression>
									<terminal>;</terminal>
								</bgf:expression>
							</sequence>
						</bgf:expression>
						<bgf:expression>
							<sequence>
								<bgf:expression>
									<nonterminal>Type</nonterminal>
								</bgf:expression>
								<bgf:expression>
									<nonterminal>MethodDeclarator</nonterminal>
								</bgf:expression>
								<bgf:expression>
									<optional>
										<bgf:expression>
											<nonterminal>Throws</nonterminal>
										</bgf:expression>
									</optional>
								</bgf:expression>
								<bgf:expression>
									<terminal>;</terminal>
								</bgf:expression>
							</sequence>
						</bgf:expression>
						<bgf:expression>
							<sequence>
								<bgf:expression>
									<terminal>void</terminal>
								</bgf:expression>
								<bgf:expression>
									<nonterminal>MethodDeclarator</nonterminal>
								</bgf:expression>
								<bgf:expression>
									<optional>
										<bgf:expression>
											<nonterminal>Throws</nonterminal>
										</bgf:expression>
									</optional>
								</bgf:expression>
								<bgf:expression>
									<terminal>;</terminal>
								</bgf:expression>
							</sequence>
						</bgf:expression>
					</choice>
				</bgf:expression>
			</bgf:production>
		</xbgf:extract>
		<!-- 
   - Fail: InterfaceMemberDecl.
      - [], ;([,([n(Type), n(VariableDeclarators), t((;))]),
               ,([n(Type), n(MethodDeclarator), ?(n(Throws)), t((;))]),
               ,([t(void), n(MethodDeclarator), ?(n(Throws)), t((;))])])
     vs.
      - [], ;([  n(InterfaceMethodOrFieldDecl),
              ,([t(void), n(Identifier), n(VoidInterfaceMethodDeclaratorRest)]),
                 n(ClassOrInterfaceDeclaration)])
  -->
		<xbgf:unfold>
			<nonterminal>VariableDeclarators</nonterminal>
			<in>
				<nonterminal>InterfaceMemberDecl</nonterminal>
			</in>
		</xbgf:unfold>
		<exbgf:inlineY>MethodDeclarator</exbgf:inlineY>
	</exbgf:atomic>
	<!-- 
   - Fail: InterfaceMemberDecl.
      - [], ;([,([n(Type), n(VariableDeclarator), *(,([t((,)), n(VariableDeclarator)])), t((;))]),
               ,([n(Type), n(Identifier), t((), ?(n(FormalParameterList)), t()), *(,([t([), t(])])), ?(n(Throws)), t((;))]),
               ,([t(void), n(Identifier), t((), ?(n(FormalParameterList)), t()), *(,([t([), t(])])), ?(n(Throws)), t((;))])])
     vs.
      - [], ;([n(InterfaceMethodOrFieldDecl),
               ,([t(void), n(Identifier), n(VoidInterfaceMethodDeclaratorRest)]),
               n(ClassOrInterfaceDeclaration)])
               
   p([], 'InterfaceMethodOrFieldDecl', ','([n('Type'), n('Identifier'), n('InterfaceMethodOrFieldRest')])),
  -->
	<xbgf:unfold>
		<nonterminal>VariableDeclarator</nonterminal>
		<in>
			<nonterminal>InterfaceMemberDecl</nonterminal>
		</in>
	</xbgf:unfold>
	<exbgf:factor-out>
		<start>
			<bgf:expression>
				<nonterminal>Type</nonterminal>
			</bgf:expression>
			<bgf:expression>
				<nonterminal>Identifier</nonterminal>
			</bgf:expression>
		</start>
		<choice>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>VariableDeclaratorRest</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<star>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>,</terminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>Identifier</nonterminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>VariableDeclaratorRest</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</star>
					</bgf:expression>
					<bgf:expression>
						<terminal>;</terminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>(</terminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>FormalParameterList</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<terminal>)</terminal>
					</bgf:expression>
					<bgf:expression>
						<star>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>[</terminal>
									</bgf:expression>
									<bgf:expression>
										<terminal>]</terminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</star>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>Throws</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<terminal>;</terminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</choice>
		<tail/>
	</exbgf:factor-out>
	<exbgf:atomic>
		<xbgf:extract>
			<bgf:production>
				<nonterminal>InterfaceMethodOrFieldRest</nonterminal>
				<bgf:expression>
					<choice>
						<bgf:expression>
							<sequence>
								<bgf:expression>
									<nonterminal>VariableDeclaratorRest</nonterminal>
								</bgf:expression>
								<bgf:expression>
									<star>
										<bgf:expression>
											<sequence>
												<bgf:expression>
													<terminal>,</terminal>
												</bgf:expression>
												<bgf:expression>
													<nonterminal>Identifier</nonterminal>
												</bgf:expression>
												<bgf:expression>
													<nonterminal>VariableDeclaratorRest</nonterminal>
												</bgf:expression>
											</sequence>
										</bgf:expression>
									</star>
								</bgf:expression>
								<bgf:expression>
									<terminal>;</terminal>
								</bgf:expression>
							</sequence>
						</bgf:expression>
						<bgf:expression>
							<sequence>
								<bgf:expression>
									<terminal>(</terminal>
								</bgf:expression>
								<bgf:expression>
									<optional>
										<bgf:expression>
											<nonterminal>FormalParameterList</nonterminal>
										</bgf:expression>
									</optional>
								</bgf:expression>
								<bgf:expression>
									<terminal>)</terminal>
								</bgf:expression>
								<bgf:expression>
									<star>
										<bgf:expression>
											<sequence>
												<bgf:expression>
													<terminal>[</terminal>
												</bgf:expression>
												<bgf:expression>
													<terminal>]</terminal>
												</bgf:expression>
											</sequence>
										</bgf:expression>
									</star>
								</bgf:expression>
								<bgf:expression>
									<optional>
										<bgf:expression>
											<nonterminal>Throws</nonterminal>
										</bgf:expression>
									</optional>
								</bgf:expression>
								<bgf:expression>
									<terminal>;</terminal>
								</bgf:expression>
							</sequence>
						</bgf:expression>
					</choice>
				</bgf:expression>
			</bgf:production>
		</xbgf:extract>
		<xbgf:extract>
			<bgf:production>
				<nonterminal>InterfaceMethodOrFieldDecl</nonterminal>
				<bgf:expression>
					<sequence>
						<bgf:expression>
							<nonterminal>Type</nonterminal>
						</bgf:expression>
						<bgf:expression>
							<nonterminal>Identifier</nonterminal>
						</bgf:expression>
						<bgf:expression>
							<nonterminal>InterfaceMethodOrFieldRest</nonterminal>
						</bgf:expression>
					</sequence>
				</bgf:expression>
			</bgf:production>
		</xbgf:extract>
		<xbgf:extract>
			<bgf:production>
				<nonterminal>VoidInterfaceMethodDeclaratorRest</nonterminal>
				<bgf:expression>
					<sequence>
						<bgf:expression>
							<terminal>(</terminal>
						</bgf:expression>
						<bgf:expression>
							<optional>
								<bgf:expression>
									<nonterminal>FormalParameterList</nonterminal>
								</bgf:expression>
							</optional>
						</bgf:expression>
						<bgf:expression>
							<terminal>)</terminal>
						</bgf:expression>
						<bgf:expression>
							<star>
								<bgf:expression>
									<sequence>
										<bgf:expression>
											<terminal>[</terminal>
										</bgf:expression>
										<bgf:expression>
											<terminal>]</terminal>
										</bgf:expression>
									</sequence>
								</bgf:expression>
							</star>
						</bgf:expression>
						<bgf:expression>
							<optional>
								<bgf:expression>
									<nonterminal>Throws</nonterminal>
								</bgf:expression>
							</optional>
						</bgf:expression>
						<bgf:expression>
							<terminal>;</terminal>
						</bgf:expression>
					</sequence>
				</bgf:expression>
			</bgf:production>
			<in>
				<nonterminal>InterfaceMemberDecl</nonterminal>
			</in>
		</xbgf:extract>
	</exbgf:atomic>
	<!-- ISSUE EXTEND
   - Fail: InterfaceMemberDecl.
      - [], ;([n(InterfaceMethodOrFieldDecl), ,([t(void), n(Identifier), n(VoidInterfaceMethodDeclaratorRest)])])
     vs.
      - [], ;([n(InterfaceMethodOrFieldDecl), ,([t(void), n(Identifier), n(VoidInterfaceMethodDeclaratorRest)]), n(ClassOrInterfaceDeclaration)])
  -->
	<xbgf:vertical>
		<nonterminal>InterfaceMemberDecl</nonterminal>
	</xbgf:vertical>
	<!-- EXTENSION -->
	<exbgf:addV>
		<bgf:production>
			<nonterminal>InterfaceMemberDecl</nonterminal>
			<bgf:expression>
				<nonterminal>ClassOrInterfaceDeclaration</nonterminal>
			</bgf:expression>
		</bgf:production>
	</exbgf:addV>
	<!-- 
   - Fail: VoidInterfaceMethodDeclaratorRest.
      - [], ,([t((), ?(n(FormalParameterList)), t()), *(,([t([), t(])])), ?(n(Throws)), t((;))])
     vs.
      - [], ,([n(FormalParameters), n(BracketsOpt), ?(,([t(throws), n(QualifiedIdentifierList)])), t((;))])
  -->
	<xbgf:extract>
		<bgf:production>
			<nonterminal>FormalParameters</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>(</terminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>FormalParameterList</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<terminal>)</terminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:extract>
	<exbgf:inlineY>FormalParameterList</exbgf:inlineY>
	<xbgf:inline>Throws</xbgf:inline>
	<xbgf:fold>
		<nonterminal>BracketsOpt</nonterminal>
		<in>
			<nonterminal>VoidInterfaceMethodDeclaratorRest</nonterminal>
		</in>
	</xbgf:fold>
	<!-- ISSUE CORRECT
   - Fail: ArrayInitializer.
      - [], ,([t({), ?(,([n(VariableInitializer), *(,([t((,)), n(VariableInitializer)]))])), ?(t((,))), t(})])
     vs.
      - [], ,([t({), ?(,([n(VariableInitializer), *(,([t((,)), n(VariableInitializer)])), ?(t((,)))])), t(})])
  -->
	<exbgf:massageO2C>
		<sequence>
			<bgf:expression>
				<nonterminal>VariableInitializer</nonterminal>
			</bgf:expression>
			<bgf:expression>
				<star>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<terminal>,</terminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>VariableInitializer</nonterminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
				</star>
			</bgf:expression>
		</sequence>
	</exbgf:massageO2C>
	<exbgf:atomicC>
		<context>ArrayInitializer</context>
		<!-- CORRECTION -->
		<xbgf:disappear>
			<bgf:production>
				<nonterminal>ArrayInitializer</nonterminal>
				<bgf:expression>
					<sequence>
						<bgf:expression>
							<terminal>{</terminal>
						</bgf:expression>
						<bgf:expression>
							<marked>
								<bgf:expression>
									<optional>
										<bgf:expression>
											<terminal>,</terminal>
										</bgf:expression>
									</optional>
								</bgf:expression>
							</marked>
						</bgf:expression>
						<bgf:expression>
							<terminal>}</terminal>
						</bgf:expression>
					</sequence>
				</bgf:expression>
			</bgf:production>
		</xbgf:disappear>
	</exbgf:atomicC>
	<exbgf:factor-out>
		<start>
			<bgf:expression>
				<terminal>{</terminal>
			</bgf:expression>
		</start>
		<choice>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<nonterminal>VariableInitializer</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<star>
									<bgf:expression>
										<sequence>
											<bgf:expression>
												<terminal>,</terminal>
											</bgf:expression>
											<bgf:expression>
												<nonterminal>VariableInitializer</nonterminal>
											</bgf:expression>
										</sequence>
									</bgf:expression>
								</star>
							</bgf:expression>
						</sequence>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<terminal>,</terminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
				</sequence>
			</bgf:expression>
			<bgf:expression>
				<epsilon/>
			</bgf:expression>
		</choice>
		<tail>
			<bgf:expression>
				<terminal>}</terminal>
			</bgf:expression>
		</tail>
	</exbgf:factor-out>
	<exbgf:massageC2O>
		<sequence>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>VariableInitializer</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<star>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>,</terminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>VariableInitializer</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</star>
					</bgf:expression>
				</sequence>
			</bgf:expression>
			<bgf:expression>
				<optional>
					<bgf:expression>
						<terminal>,</terminal>
					</bgf:expression>
				</optional>
			</bgf:expression>
		</sequence>
	</exbgf:massageC2O>
	<!-- BREFACTOR 
  Can't really match this
  
   - Fail: InterfaceMethodOrFieldRest.
      - [], ;([,([n(VariableDeclaratorRest), *(,([t((,)), n(Identifier), n(VariableDeclaratorRest)])), t((;))]), ,([n(FormalParameters), *(,([t([), t(])])), ?(,([t(throws), n(TypeList)])), t((;))])])
     vs.
      - [], ;([,([n(ConstantDeclaratorsRest), t((;))]), n(InterfaceMethodDeclaratorRest)])
 
  -->
	<exbgf:redefineH>
		<bgf:production>
			<nonterminal>InterfaceMethodOrFieldRest</nonterminal>
			<bgf:expression>
				<choice>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<nonterminal>ConstantDeclaratorsRest</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<terminal>;</terminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>InterfaceMethodDeclaratorRest</nonterminal>
					</bgf:expression>
				</choice>
			</bgf:expression>
		</bgf:production>
	</exbgf:redefineH>
	<!-- BREFACTOR -->
	<xbgf:define>
		<bgf:production>
			<nonterminal>ConstantDeclaratorsRest</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>ConstantDeclaratorRest</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<star>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>,</terminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>ConstantDeclarator</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</star>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:define>
	<!-- BREFACTOR -->
	<xbgf:define>
		<bgf:production>
			<nonterminal>InterfaceMethodDeclaratorRest</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>FormalParameters</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>BracketsOpt</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>throws</terminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>QualifiedIdentifierList</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<terminal>;</terminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:define>
	<!-- BREFACTOR -->
	<xbgf:define>
		<bgf:production>
			<nonterminal>ConstantDeclarator</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>Identifier</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>ConstantDeclaratorRest</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:define>
	<!-- BREFACTOR -->
	<xbgf:define>
		<bgf:production>
			<nonterminal>ConstantDeclaratorRest</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>BracketsOpt</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<terminal>=</terminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>VariableInitializer</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:define>
	<!-- 
   - Fail: ClassBodyDeclaration.
      - [], ;([n(ClassMemberDeclaration), n(StaticInitializer), n(ConstructorDeclaration)])
     vs.
      - [], ;([t((;)), ,([?(t(static)), n(Block)]), ,([n(ModifiersOpt), n(MethodOrFieldDecl)]), ,([n(ModifiersOpt), t(void), n(Identifier), n(MethodDeclaratorRest)]), ,([n(ModifiersOpt), n(Identifier), n(ConstructorDeclaratorRest)]), ,([n(ModifiersOpt), n(ClassOrInterfaceDeclaration)])])
  -->
	<exbgf:inlineV>ClassMemberDeclaration</exbgf:inlineV>
	<xbgf:inline>StaticInitializer</xbgf:inline>
	<xbgf:inline>ConstructorDeclaration</xbgf:inline>
	<xbgf:inline>MethodDeclaration</xbgf:inline>
	<exbgf:distributeH>ClassBodyDeclaration</exbgf:distributeH>
	<!-- ISSUE EXTEND
   - Fail: ClassBodyDeclaration.
               ,([t(static), n(Block)]),
     vs.
               ,([?(t(static)), n(Block)]),
  -->
	<!-- EXTENSION -->
	<exbgf:widen12O>
		<terminal>static</terminal>
		<in>ClassBodyDeclaration</in>
	</exbgf:widen12O>
	<!-- 
   - Fail: ClassBodyDeclaration.
               ,([n(ModifiersOpt), t(void), n(Identifier), n(FormalParameters), *(,([t([), t(])])), ?(,([t(throws), n(TypeList)])), n(MethodBody)]),
     vs.
               ,([n(ModifiersOpt), t(void), n(Identifier), n(MethodDeclaratorRest)]),
  -->
	<xbgf:extract>
		<bgf:production>
			<nonterminal>MethodDeclaratorRest</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>FormalParameters</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<star>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>[</terminal>
									</bgf:expression>
									<bgf:expression>
										<terminal>]</terminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</star>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>throws</terminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>QualifiedIdentifierList</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>MethodBody</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:extract>
	<xbgf:fold>
		<nonterminal>BracketsOpt</nonterminal>
		<in>
			<nonterminal>MethodDeclaratorRest</nonterminal>
		</in>
	</xbgf:fold>
	<!-- 
   - Fail: ClassBodyDeclaration.
     - [], ,([n(ModifiersOpt), n(ConstructorDeclarator), ?(,([t(throws), n(TypeList)])), n(ConstructorBody)])
     vs.
     - [], ;(,([n(ModifiersOpt), n(Identifier), n(ConstructorDeclaratorRest)]),
  -->
	<xbgf:inline>ConstructorDeclarator</xbgf:inline>
	<xbgf:extract>
		<bgf:production>
			<nonterminal>ConstructorDeclaratorRest</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>FormalParameters</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>throws</terminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>QualifiedIdentifierList</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>ConstructorBody</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:extract>
	<!-- ISSUE PERMISSIVENESS
   - Fail: ConstructorDeclaratorRest.
      - [], ,([n(FormalParameters), ?(,([t(throws), n(QualifiedIdentifierList)])), n(ConstructorBody)])
     vs.
      - [], ,([n(FormalParameters), ?(,([t(throws), n(QualifiedIdentifierList)])), n(MethodBody)])
ConstructorBody:
        "{" ExplicitConstructorInvocation ? BlockStatements "}"
MethodBody:
        Block
MethodBody:
        ";"
Block:
        "{" BlockStatements "}"
  -->
	<!-- RELAXATION -->
	<xbgf:disappear>
		<bgf:production>
			<nonterminal>ConstructorBody</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>{</terminal>
					</bgf:expression>
					<bgf:expression>
						<marked>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>ExplicitConstructorInvocation</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
						</marked>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>BlockStatements</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<terminal>}</terminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:disappear>
	<xbgf:eliminate>
		<nonterminal>ExplicitConstructorInvocation</nonterminal>
	</xbgf:eliminate>
	<xbgf:fold>
		<nonterminal>Block</nonterminal>
	</xbgf:fold>
	<!-- RELAXATION -->
	<xbgf:upgrade>
		<bgf:production>
			<nonterminal>ConstructorBody</nonterminal>
			<bgf:expression>
				<marked>
					<bgf:expression>
						<nonterminal>MethodBody</nonterminal>
					</bgf:expression>
				</marked>
			</bgf:expression>
		</bgf:production>
		<bgf:production>
			<nonterminal>MethodBody</nonterminal>
			<bgf:expression>
				<nonterminal>Block</nonterminal>
			</bgf:expression>
		</bgf:production>
	</xbgf:upgrade>
	<xbgf:inline>ConstructorBody</xbgf:inline>
	<!-- ISSUE EXTEND
  Empty class body declaration -->
	<!-- EXTENSION -->
	<exbgf:addV>
		<bgf:production>
			<nonterminal>ClassBodyDeclaration</nonterminal>
			<bgf:expression>
				<terminal>;</terminal>
			</bgf:expression>
		</bgf:production>
		<!-- EXTENSION -->
		<bgf:production>
			<nonterminal>ClassBodyDeclaration</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>ModifiersOpt</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>ClassOrInterfaceDeclaration</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</exbgf:addV>
	<!-- 
   - Fail: ClassBodyDeclaration.
      - [], ;([,([n(ModifiersOpt), n(Type), n(VariableDeclarators), t((;))]),
               ,([n(ModifiersOpt), n(Type), n(Identifier), n(FormalParameters), *(,([t([), t(])])), ?(,([t(throws), n(TypeList)])), n(MethodBody)]),
     vs.
      - [], ;([
               ,([n(ModifiersOpt), n(MethodOrFieldDecl)]),
  -->
	<xbgf:unfold>
		<nonterminal>VariableDeclarators</nonterminal>
		<in>
			<nonterminal>ClassBodyDeclaration</nonterminal>
		</in>
	</xbgf:unfold>
	<xbgf:unfold>
		<nonterminal>VariableDeclarator</nonterminal>
		<in>
			<nonterminal>ClassBodyDeclaration</nonterminal>
		</in>
	</xbgf:unfold>
	<!-- RELAXATION -->
	<xbgf:disappear>
		<bgf:production>
			<nonterminal>ClassBodyDeclaration</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>ModifiersOpt</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Type</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Identifier</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>VariableDeclaratorRest</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<marked>
							<bgf:expression>
								<star>
									<bgf:expression>
										<sequence>
											<bgf:expression>
												<terminal>,</terminal>
											</bgf:expression>
											<bgf:expression>
												<nonterminal>Identifier</nonterminal>
											</bgf:expression>
											<bgf:expression>
												<nonterminal>VariableDeclaratorRest</nonterminal>
											</bgf:expression>
										</sequence>
									</bgf:expression>
								</star>
							</bgf:expression>
						</marked>
					</bgf:expression>
					<bgf:expression>
						<terminal>;</terminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:disappear>
	<!-- RELAXATION -->
	<xbgf:abstractize>
		<bgf:production>
			<nonterminal>ClassBodyDeclaration</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>ModifiersOpt</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Type</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Identifier</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>VariableDeclaratorRest</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<marked>
							<bgf:expression>
								<terminal>;</terminal>
							</bgf:expression>
						</marked>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:abstractize>
	<!-- 
      - [], ,([n(ModifiersOpt), n(Type), n(Identifier), n(MethodDeclaratorRest)])
      - [], ,([n(ModifiersOpt), n(Type), n(Identifier), n(VariableDeclaratorRest)])
  -->
	<exbgf:atomicV>
		<context>ClassBodyDeclaration</context>
		<exbgf:factor-out>
			<start>
				<bgf:expression>
					<nonterminal>ModifiersOpt</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Type</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
			</start>
			<choice>
				<bgf:expression>
					<nonterminal>MethodDeclaratorRest</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>VariableDeclaratorRest</nonterminal>
				</bgf:expression>
			</choice>
			<tail/>
		</exbgf:factor-out>
		<exbgf:extractC>
			<bgf:production>
				<nonterminal>MethodOrFieldRest</nonterminal>
				<bgf:expression>
					<choice>
						<bgf:expression>
							<nonterminal>MethodDeclaratorRest</nonterminal>
						</bgf:expression>
						<bgf:expression>
							<nonterminal>VariableDeclaratorRest</nonterminal>
						</bgf:expression>
					</choice>
				</bgf:expression>
			</bgf:production>
		</exbgf:extractC>
		<xbgf:extract>
			<bgf:production>
				<nonterminal>MethodOrFieldDecl</nonterminal>
				<bgf:expression>
					<sequence>
						<bgf:expression>
							<nonterminal>Type</nonterminal>
						</bgf:expression>
						<bgf:expression>
							<nonterminal>Identifier</nonterminal>
						</bgf:expression>
						<bgf:expression>
							<nonterminal>MethodOrFieldRest</nonterminal>
						</bgf:expression>
					</sequence>
				</bgf:expression>
			</bgf:production>
		</xbgf:extract>
	</exbgf:atomicV>
	<!-- ISSUE  EXTEND -->
	<!-- EXTENSION -->
	<exbgf:addV>
		<bgf:production>
			<nonterminal>InterfaceBodyDeclaration</nonterminal>
			<bgf:expression>
				<terminal>;</terminal>
			</bgf:expression>
		</bgf:production>
	</exbgf:addV>
</exbgf:sequence>
