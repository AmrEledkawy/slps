<?xml version="1.0" encoding="UTF-8"?>
<exbgf:sequence xmlns:bgf="http://planet-sl.org/bgf" xmlns:xbgf="http://planet-sl.org/xbgf" xmlns:exbgf="http://planet-sl.org/exbgf">
	<xbgf:deyaccify>
		<nonterminal>VariableDeclarators</nonterminal>
	</xbgf:deyaccify>
	<!-- 
   - Fail: VariableDeclarator.
      - [], ,([n(Identifier), n(VariableDeclaratorRest)])
     vs.
      - [], ;([n(VariableDeclaratorId), ,([n(VariableDeclaratorId), t(=), n(VariableInitializer)])])
  -->
	<xbgf:deyaccify>
		<nonterminal>VariableDeclaratorId</nonterminal>
	</xbgf:deyaccify>
	<xbgf:horizontal>
		<nonterminal>VariableDeclarator</nonterminal>
	</xbgf:horizontal>
	<exbgf:factor-out>
		<start>
			<bgf:expression>
				<nonterminal>VariableDeclaratorId</nonterminal>
			</bgf:expression>
		</start>
		<choice>
			<bgf:expression>
				<epsilon/>
			</bgf:expression>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>=</terminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>VariableInitializer</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</choice>
		<tail/>
	</exbgf:factor-out>
	<exbgf:massageC2O>
		<sequence>
			<bgf:expression>
				<terminal>=</terminal>
			</bgf:expression>
			<bgf:expression>
				<nonterminal>VariableInitializer</nonterminal>
			</bgf:expression>
		</sequence>
	</exbgf:massageC2O>
	<xbgf:unfold>
		<nonterminal>VariableDeclaratorId</nonterminal>
		<in>
			<nonterminal>VariableDeclarator</nonterminal>
		</in>
	</xbgf:unfold>
	<xbgf:fold>
		<nonterminal>BracketsOpt</nonterminal>
	</xbgf:fold>
	<xbgf:extract>
		<bgf:production>
			<nonterminal>VariableDeclaratorRest</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>BracketsOpt</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<terminal>=</terminal>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>VariableInitializer</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</optional>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:extract>
	<!-- 
   - Fail: CompilationUnit.
      - [], ,([?(,([t(package), n(QualifiedIdentifier), t((;))])), *(n(ImportDeclaration)), *(n(TypeDeclaration))])
     vs.
      - [], ,([?(n(PackageDeclaration)), ?(n(ImportDeclarations)), ?(n(TypeDeclarations))])
  -->
	<xbgf:inline>PackageDeclaration</xbgf:inline>
	<exbgf:inlineYO starof="ImportDeclaration">ImportDeclarations</exbgf:inlineYO>
	<exbgf:inlineYO starof="TypeDeclaration">TypeDeclarations</exbgf:inlineYO>
	<!-- 
   - Fail: ImportDeclaration.
      - [], ,([t(import), n(Identifier), *(,([t(.), n(Identifier)])), ?(,([t(.), t(*)])), t((;))])
     vs.
      - [], ;([n(SingleTypeImportDeclaration), n(TypeImportOnDemandDeclaration)])
  -->
	<xbgf:inline>SingleTypeImportDeclaration</xbgf:inline>
	<xbgf:inline>TypeImportOnDemandDeclaration</xbgf:inline>
	<!-- 
   - Fail: ImportDeclaration.
      - [], ,([t(import), n(QualifiedIdentifier), ?(,([t(.), t(*)])), t((;))])
     vs.
      - [], ;([,([t(import), n(QualifiedIdentifier), t((;))]),
               ,([t(import), n(QualifiedIdentifier), t(.), t(*), t((;))])])
  -->
	<xbgf:horizontal>
		<nonterminal>ImportDeclaration</nonterminal>
	</xbgf:horizontal>
	<exbgf:factor-out>
		<start>
			<bgf:expression>
				<terminal>import</terminal>
			</bgf:expression>
			<bgf:expression>
				<nonterminal>QualifiedIdentifier</nonterminal>
			</bgf:expression>
		</start>
		<choice>
			<bgf:expression>
				<epsilon/>
			</bgf:expression>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>.</terminal>
					</bgf:expression>
					<bgf:expression>
						<terminal>*</terminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</choice>
		<tail>
			<bgf:expression>
				<terminal>;</terminal>
			</bgf:expression>
		</tail>
	</exbgf:factor-out>
	<exbgf:massageC2O>
		<sequence>
			<bgf:expression>
				<terminal>.</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>*</terminal>
			</bgf:expression>
		</sequence>
	</exbgf:massageC2O>
</exbgf:sequence>
