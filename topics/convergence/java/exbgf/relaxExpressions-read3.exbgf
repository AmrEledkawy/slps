<?xml version="1.0" encoding="UTF-8"?>
<exbgf:sequence xmlns:bgf="http://planet-sl.org/bgf" xmlns:xbgf="http://planet-sl.org/xbgf" xmlns:exbgf="http://planet-sl.org/exbgf">
	<!--
  Expressions in the syntax appendix look like this:
  
  Expression is defined as:
     Expression1 [ AssignmentOperator Expression1 ]
  Expression1 is defined as:
     Expression2 [ Expression1Rest ]
  Expression1Rest is defined as:
     [ "?" Expression ":" Expression1 ]
  Expression2 is defined as:
     Expression3 [ Expression2Rest ]
  Expression2Rest is defined as:
     { InfixOp Expression3 }
     Expression3 "instanceof" Type
  Expression3 is defined as:
     PrefixOp Expression3
     "(" Expression | Type ")" Expression3
     Primary { Selector } { PostfixOp }

  While in the text of the spec it is layered like this:
  
  Expression is defined as:
     AssignmentExpression
  AssignmentExpression is defined as:
     ConditionalExpression
     Assignment
  ConditionalExpression is defined as:
     ConditionalOrExpression
     ConditionalOrExpression "?" Expression ":" ConditionalExpression
  Assignment is defined as:
     LeftHandSide AssignmentOperator AssignmentExpression
  LeftHandSide is defined as:
     ExpressionName
     FieldAccess
     ArrayAccess
  FieldAccess is defined as:
     Primary "." Identifier
     "super" "." Identifier
     ClassName "." "super" "." Identifier
  ArrayAccess is defined as:
     ExpressionName "[" Expression "]"
     PrimaryNoNewArray "[" Expression "]"
  ConditionalOrExpression is defined as:
     ConditionalAndExpression
     ConditionalOrExpression "||" ConditionalAndExpression
  ConditionalAndExpression is defined as:
     InclusiveOrExpression
     ConditionalAndExpression "&amp;&amp;" InclusiveOrExpression
  InclusiveOrExpression is defined as:
     ExclusiveOrExpression
     InclusiveOrExpression "|" ExclusiveOrExpression
  ExclusiveOrExpression is defined as:
     AndExpression
     ExclusiveOrExpression "^" AndExpression
  AndExpression is defined as:
     EqualityExpression
     AndExpression "&amp;" EqualityExpression
  EqualityExpression is defined as:
     RelationalExpression
     EqualityExpression "==" RelationalExpression
     EqualityExpression "!=" RelationalExpression
  RelationalExpression is defined as:
     ShiftExpression
     RelationalExpression "&lt;" ShiftExpression
     RelationalExpression "&gt;" ShiftExpression
     RelationalExpression "&lt;=" ShiftExpression
     RelationalExpression "&gt;=" ShiftExpression
     RelationalExpression "instanceof" ReferenceType
  ShiftExpression is defined as:
     AdditiveExpression
     ShiftExpression "&lt;&lt;" AdditiveExpression
     ShiftExpression "&gt;&gt;" AdditiveExpression
     ShiftExpression "&gt;&gt;&gt;" AdditiveExpression
  AdditiveExpression is defined as:
     MultiplicativeExpression
     AdditiveExpression "+" MultiplicativeExpression
     AdditiveExpression "-" MultiplicativeExpression
  MultiplicativeExpression is defined as:
     UnaryExpression
     MultiplicativeExpression "*" UnaryExpression
     MultiplicativeExpression "/" UnaryExpression
     MultiplicativeExpression "%" UnaryExpression
  UnaryExpression is defined as:
     PreIncrementExpression
     PreDecrementExpression
     "+" UnaryExpression
     "-" UnaryExpression
     UnaryExpressionNotPlusMinus
  PreIncrementExpression is defined as:
     "++" UnaryExpression
  PreDecrementExpression is defined as:
     "- -" UnaryExpression
  UnaryExpressionNotPlusMinus is defined as:
     PostfixExpression
     "~" UnaryExpression
     "!" UnaryExpression
     CastExpression
  PostfixExpression is defined as:
     Primary
     ExpressionName
     PostIncrementExpression
     PostDecrementExpression
  PostIncrementExpression is defined as:
     PostfixExpression "++"
  PostDecrementExpression is defined as:
     PostfixExpression "- -"
  CastExpression is defined as:
     "(" PrimitiveType [ Dims ] ")" UnaryExpression
     "(" ReferenceType ")" UnaryExpressionNotPlusMinus

  -->
	<!-- ISSUE PERMISSIVENESS
  Everything that can be united to make Expression2 -->
	<exbgf:atomic>
		<!-- TODO: once migration is completed, move this to unite-read3 -->
		<!-- RELAXATION -->
		<xbgf:unite>
			<add>ConditionalAndExpression</add>
			<to>Expression2</to>
		</xbgf:unite>
		<!-- RELAXATION -->
		<xbgf:unite>
			<add>InclusiveOrExpression</add>
			<to>Expression2</to>
		</xbgf:unite>
		<!-- RELAXATION -->
		<xbgf:unite>
			<add>ExclusiveOrExpression</add>
			<to>Expression2</to>
		</xbgf:unite>
		<!-- RELAXATION -->
		<xbgf:unite>
			<add>AndExpression</add>
			<to>Expression2</to>
		</xbgf:unite>
		<!-- RELAXATION -->
		<xbgf:unite>
			<add>EqualityExpression</add>
			<to>Expression2</to>
		</xbgf:unite>
		<!-- RELAXATION -->
		<xbgf:unite>
			<add>RelationalExpression</add>
			<to>Expression2</to>
		</xbgf:unite>
		<!-- RELAXATION -->
		<xbgf:unite>
			<add>ShiftExpression</add>
			<to>Expression2</to>
		</xbgf:unite>
		<!-- RELAXATION -->
		<xbgf:unite>
			<add>AdditiveExpression</add>
			<to>Expression2</to>
		</xbgf:unite>
		<!-- RELAXATION -->
		<xbgf:unite>
			<add>MultiplicativeExpression</add>
			<to>Expression2</to>
		</xbgf:unite>
		<xbgf:horizontal>
			<nonterminal>Expression2</nonterminal>
		</xbgf:horizontal>
	</exbgf:atomic>
	<!-- Introducing another layering scheme: Expression3 -->
	<!-- GENERALITY -->
	<!-- RELAXATION -->
	<exbgf:renameN>
		<from>Expression2</from>
		<to>Expression3</to>
		<in>Expression2</in>
	</exbgf:renameN>
	<xbgf:horizontal>
		<nonterminal>Expression3</nonterminal>
	</xbgf:horizontal>
	<!--  Huge factoring for fishing out infix operators -->
	<exbgf:pull-out>
		<nonterminal>InfixOp</nonterminal>
		<start>
			<bgf:expression>
				<nonterminal>Expression3</nonterminal>
			</bgf:expression>
		</start>
		<choice>
			<bgf:expression>
				<terminal>&amp;</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>&amp;&amp;</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>||</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>|</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>^</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>==</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>!=</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>&lt;</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>&gt;</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>&lt;=</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>&gt;=</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>&lt;&lt;</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>&gt;&gt;</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>&gt;&gt;&gt;</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>+</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>-</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>*</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>/</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>%</terminal>
			</bgf:expression>
		</choice>
		<tail>
			<bgf:expression>
				<nonterminal>Expression3</nonterminal>
			</bgf:expression>
		</tail>
	</exbgf:pull-out>
	<!-- revert of l-assoc-->
	<!-- RELAXATION -->
	<exbgf:widen12S>
		<sequence>
			<bgf:expression>
				<nonterminal>InfixOp</nonterminal>
			</bgf:expression>
			<bgf:expression>
				<nonterminal>Expression3</nonterminal>
			</bgf:expression>
		</sequence>
		<in>Expression2</in>
	</exbgf:widen12S>
	<!--  extracting Expression2Rest -->
	<exbgf:pull-out>
		<nonterminal>Expression2Rest</nonterminal>
		<start>
			<bgf:expression>
				<nonterminal>Expression3</nonterminal>
			</bgf:expression>
		</start>
		<choice>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>instanceof</terminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Type</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
			<bgf:expression>
				<star>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<nonterminal>InfixOp</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>Expression3</nonterminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
				</star>
			</bgf:expression>
		</choice>
		<tail/>
	</exbgf:pull-out>
	<exbgf:factor-out>
		<start>
			<bgf:expression>
				<nonterminal>Expression3</nonterminal>
			</bgf:expression>
		</start>
		<optional>
			<bgf:expression>
				<nonterminal>Expression2Rest</nonterminal>
			</bgf:expression>
		</optional>
		<tail/>
	</exbgf:factor-out>
	<!-- 
   - Fail: Expression1.
      - [], ;([n(Expression2), ,([n(Expression2), t(?), n(Expression), t(:), n(Expression1)])])
     vs.
      - [], ,([n(Expression2), ?(n(Expression1Rest))])
  -->
	<xbgf:horizontal>
		<nonterminal>Expression1</nonterminal>
	</xbgf:horizontal>
	<xbgf:extract>
		<bgf:production>
			<nonterminal>Expression1Rest</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>?</terminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Expression</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<terminal>:</terminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Expression1</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:extract>
	<exbgf:factor-out>
		<start>
			<bgf:expression>
				<nonterminal>Expression2</nonterminal>
			</bgf:expression>
		</start>
		<optional>
			<bgf:expression>
				<nonterminal>Expression1Rest</nonterminal>
			</bgf:expression>
		</optional>
		<tail/>
	</exbgf:factor-out>
	<!-- Prefixes -->
	<xbgf:inline>PreIncrementExpression</xbgf:inline>
	<xbgf:inline>PreDecrementExpression</xbgf:inline>
	<exbgf:inlineV>UnaryExpressionNotPlusMinus</exbgf:inlineV>
	<exbgf:pull-out>
		<nonterminal>PrefixOp</nonterminal>
		<start/>
		<choice>
			<bgf:expression>
				<terminal>++</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>--</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>+</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>-</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>~</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>!</terminal>
			</bgf:expression>
		</choice>
		<tail>
			<bgf:expression>
				<nonterminal>Expression3</nonterminal>
			</bgf:expression>
		</tail>
	</exbgf:pull-out>
	<!-- ISSUE PERMISSIVENESS BRUTAL
 - Fail: StatementExpression.
      - [], ;([n(Assignment), ,([t(++), n(Expression3)]), ,([t(- -), n(Expression3)]), n(PostIncrementExpression), n(PostDecrementExpression), n(MethodInvocation), n(ClassInstanceCreationExpression)])
     vs.
      - [], n(Expression)
???
 -->
	<!-- GENERALITY -->
	<!-- RELAXATION -->
	<exbgf:redefine>
		<bgf:production>
			<nonterminal>StatementExpression</nonterminal>
			<bgf:expression>
				<nonterminal>Expression</nonterminal>
			</bgf:expression>
		</bgf:production>
	</exbgf:redefine>
	<!-- 
   - Fail: Expression3.
      - [], ;([,([n(PrefixOp), n(Expression3)]), n(PostfixExpression), n(CastExpression)])
     vs.
      - [], ,([n(Primary), *(n(Selector)), *(n(PostfixOp))])
      - [], ,([t((), ;([n(Expression), n(Type)]), t()), n(Expression3)])
      - [], ,([n(PrefixOp), n(Expression3)])
  -->
	<xbgf:vertical>
		<nonterminal>Expression3</nonterminal>
	</xbgf:vertical>
	<!-- BREFACTOR -->
	<xbgf:undefine>
		<nonterminal>CastExpression</nonterminal>
	</xbgf:undefine>
	<exbgf:inlineU>
		<bgf:production>
			<nonterminal>CastExpression</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>(</terminal>
					</bgf:expression>
					<bgf:expression>
						<choice>
							<bgf:expression>
								<nonterminal>Expression</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>Type</nonterminal>
							</bgf:expression>
						</choice>
					</bgf:expression>
					<bgf:expression>
						<terminal>)</terminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Expression3</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</exbgf:inlineU>
	<!-- 
   - Fail: Expression3.
      - [], n(PostfixExpression)
     vs.
      - [], ,([n(Primary), *(n(Selector)), *(n(PostfixOp))])
  -->
	<xbgf:inline>PostIncrementExpression</xbgf:inline>
	<xbgf:inline>PostDecrementExpression</xbgf:inline>
	<xbgf:horizontal>
		<nonterminal>PostfixExpression</nonterminal>
	</xbgf:horizontal>
	<exbgf:pull-out>
		<nonterminal>PostfixOp</nonterminal>
		<start>
			<bgf:expression>
				<nonterminal>PostfixExpression</nonterminal>
			</bgf:expression>
		</start>
		<choice>
			<bgf:expression>
				<terminal>++</terminal>
			</bgf:expression>
			<bgf:expression>
				<terminal>--</terminal>
			</bgf:expression>
		</choice>
		<tail/>
	</exbgf:pull-out>
	<!-- 
   - Fail: Expression3/PostfixExpression.
      - [], ;([n('Primary'), n('QualifiedIdentifier'), ','([n('PostfixExpression'), n('PostfixOp')])])
     vs.
      - [], ,([;([n(Primary), n(QualifiedIdentifier)]), *(n(PostfixOp))])
  -->
	<exbgf:shielded>
		<entity>
			<choice>
				<bgf:expression>
					<nonterminal>Primary</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>QualifiedIdentifier</nonterminal>
				</bgf:expression>
			</choice>
		</entity>
		<exbgf:deyaccifyH>PostfixExpression</exbgf:deyaccifyH>
	</exbgf:shielded>
	<xbgf:inline>PostfixExpression</xbgf:inline>
	<!-- 
   - Fail: Primary.
      - [], ,([n(Identifier), *(,([t(.), n(Identifier)])), ?(n(IdentifierSuffix))])
      - [], n(ParExpression)
     vs.
      - [], ;(,([n(QualifiedIdentifier), ?(n(IdentifierSuffix))]),
              ,([t((), n(Expression), t())]),
  -->
	<xbgf:unfold>
		<nonterminal>QualifiedIdentifier</nonterminal>
		<in>
			<nonterminal>PrimaryNoNewArray</nonterminal>
		</in>
	</xbgf:unfold>
	<!-- ISSUE PERMISSIVENESS
   - Fail: Expression.
      - [], ,([n(Expression1), ?(,([n(AssignmentOperator), n(Expression1)]))])
     vs.
      - [], ;([n(Expression1), n(Assignment)])
  -->
	<exbgf:inlineV>AssignmentExpression</exbgf:inlineV>
	<exbgf:deyaccifyC>Assignment</exbgf:deyaccifyC>
	<exbgf:shielded>
		<entity>
			<sequence>
				<bgf:expression>
					<nonterminal>LeftHandSide</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>AssignmentOperator</nonterminal>
				</bgf:expression>
			</sequence>
		</entity>
		<exbgf:massageS12P>
			<nonterminal>SHIELDED-ENTITY</nonterminal>
		</exbgf:massageS12P>
	</exbgf:shielded>
	<!-- replacing LeftHandSide by Expression1 in Assignment -->
	<!-- RELAXATION -->
	<xbgf:downgrade>
		<bgf:production>
			<nonterminal>Assignment</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<plus>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<marked>
											<bgf:expression>
												<nonterminal>LeftHandSide</nonterminal>
											</bgf:expression>
										</marked>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>AssignmentOperator</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</plus>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Expression1</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
		<bgf:production>
			<nonterminal>LeftHandSide</nonterminal>
			<bgf:expression>
				<nonterminal>QualifiedIdentifier</nonterminal>
			</bgf:expression>
		</bgf:production>
	</xbgf:downgrade>
	<!-- RELAXATION -->
	<xbgf:appear>
		<bgf:production>
			<nonterminal>Assignment</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<plus>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<nonterminal>QualifiedIdentifier</nonterminal>
									</bgf:expression>
									<bgf:expression>
										<marked>
											<bgf:expression>
												<star>
													<bgf:expression>
														<nonterminal>PostfixOp</nonterminal>
													</bgf:expression>
												</star>
											</bgf:expression>
										</marked>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>AssignmentOperator</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</plus>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Expression1</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:appear>
	<!-- RELAXATION -->
	<exbgf:addH>
		<bgf:production>
			<nonterminal>Assignment</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<plus>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<choice>
											<bgf:expression>
												<nonterminal>QualifiedIdentifier</nonterminal>
											</bgf:expression>
											<bgf:expression>
												<marked>
													<bgf:expression>
														<nonterminal>Primary</nonterminal>
													</bgf:expression>
												</marked>
											</bgf:expression>
										</choice>
									</bgf:expression>
									<bgf:expression>
										<star>
											<bgf:expression>
												<nonterminal>PostfixOp</nonterminal>
											</bgf:expression>
										</star>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>AssignmentOperator</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</plus>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Expression1</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</exbgf:addH>
	<!-- RELAXATION -->
	<xbgf:upgrade>
		<bgf:production>
			<nonterminal>Assignment</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<plus>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<marked>
											<bgf:expression>
												<nonterminal>Expression3</nonterminal>
											</bgf:expression>
										</marked>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>AssignmentOperator</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</plus>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Expression1</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
		<bgf:production>
			<nonterminal>Expression3</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<choice>
							<bgf:expression>
								<nonterminal>QualifiedIdentifier</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>Primary</nonterminal>
							</bgf:expression>
						</choice>
					</bgf:expression>
					<bgf:expression>
						<star>
							<bgf:expression>
								<nonterminal>PostfixOp</nonterminal>
							</bgf:expression>
						</star>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:upgrade>
	<!-- RELAXATION -->
	<xbgf:appear>
		<bgf:production>
			<nonterminal>Assignment</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<plus>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<nonterminal>Expression3</nonterminal>
									</bgf:expression>
									<bgf:expression>
										<marked>
											<bgf:expression>
												<optional>
													<bgf:expression>
														<nonterminal>Expression2Rest</nonterminal>
													</bgf:expression>
												</optional>
											</bgf:expression>
										</marked>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>AssignmentOperator</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</plus>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Expression1</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:appear>
	<!-- RELAXATION -->
	<xbgf:upgrade>
		<bgf:production>
			<nonterminal>Assignment</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<plus>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<marked>
											<bgf:expression>
												<nonterminal>Expression2</nonterminal>
											</bgf:expression>
										</marked>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>AssignmentOperator</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</plus>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Expression1</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
		<bgf:production>
			<nonterminal>Expression2</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>Expression3</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>Expression2Rest</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:upgrade>
	<!-- RELAXATION -->
	<xbgf:appear>
		<bgf:production>
			<nonterminal>Assignment</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<plus>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<nonterminal>Expression2</nonterminal>
									</bgf:expression>
									<bgf:expression>
										<marked>
											<bgf:expression>
												<optional>
													<bgf:expression>
														<nonterminal>Expression1Rest</nonterminal>
													</bgf:expression>
												</optional>
											</bgf:expression>
										</marked>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>AssignmentOperator</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</plus>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Expression1</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:appear>
	<!-- RELAXATION -->
	<xbgf:upgrade>
		<bgf:production>
			<nonterminal>Assignment</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<plus>
							<bgf:expression>
								<sequence>
									<bgf:expression>
										<marked>
											<bgf:expression>
												<nonterminal>Expression1</nonterminal>
											</bgf:expression>
										</marked>
									</bgf:expression>
									<bgf:expression>
										<nonterminal>AssignmentOperator</nonterminal>
									</bgf:expression>
								</sequence>
							</bgf:expression>
						</plus>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>Expression1</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
		<bgf:production>
			<nonterminal>Expression1</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<nonterminal>Expression2</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>Expression1Rest</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:upgrade>
	<!-- end of "replace" -->
	<xbgf:inline>Assignment</xbgf:inline>
	<xbgf:eliminate>
		<nonterminal>LeftHandSide</nonterminal>
	</xbgf:eliminate>
	<exbgf:factor-out>
		<start/>
		<optional>
			<bgf:expression>
				<plus>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<nonterminal>Expression1</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>AssignmentOperator</nonterminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
				</plus>
			</bgf:expression>
		</optional>
		<tail>
			<bgf:expression>
				<nonterminal>Expression1</nonterminal>
			</bgf:expression>
		</tail>
	</exbgf:factor-out>
	<!-- a job for lassoc/rassoc??? -->
	<!-- RELAXATION -->
	<exbgf:narrowS21>
		<sequence>
			<bgf:expression>
				<nonterminal>Expression1</nonterminal>
			</bgf:expression>
			<bgf:expression>
				<nonterminal>AssignmentOperator</nonterminal>
			</bgf:expression>
		</sequence>
	</exbgf:narrowS21>
	<!-- RELAXATION -->
	<exbgf:widen12O>
		<sequence>
			<bgf:expression>
				<nonterminal>AssignmentOperator</nonterminal>
			</bgf:expression>
			<bgf:expression>
				<nonterminal>Expression1</nonterminal>
			</bgf:expression>
		</sequence>
		<in>Expression</in>
	</exbgf:widen12O>
</exbgf:sequence>
