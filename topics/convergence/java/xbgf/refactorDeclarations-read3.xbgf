<?xml version="1.0" encoding="utf-8"?>
<xbgf:sequence
  xmlns:bgf="http://planet-sl.org/bgf"
  xmlns:xbgf="http://planet-sl.org/xbgf">

  <xbgf:deyaccify><nonterminal>VariableDeclarators</nonterminal></xbgf:deyaccify>

  <!-- 
   - Fail: VariableDeclarator.
      - [], ,([n(Identifier), n(VariableDeclaratorRest)])
     vs.
      - [], ;([n(VariableDeclaratorId), ,([n(VariableDeclaratorId), t(=), n(VariableInitializer)])])
  -->
  <!--xbgf:deyaccify>VariableDeclaratorId</xbgf:deyaccify-->
  <xbgf:horizontal><nonterminal>VariableDeclarator</nonterminal></xbgf:horizontal>
  <xbgf:factor>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <nonterminal>VariableDeclaratorId</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>VariableDeclaratorId</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>=</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>VariableInitializer</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <nonterminal>VariableDeclaratorId</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <choice>
            <bgf:expression>
              <epsilon/>
            </bgf:expression>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <terminal>=</terminal>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>VariableInitializer</nonterminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
          </choice>
        </bgf:expression>
      </sequence>
    </bgf:expression>
  </xbgf:factor>
  <xbgf:massage>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <epsilon/>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>=</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>VariableInitializer</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>=</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>VariableInitializer</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </optional>
    </bgf:expression>
  </xbgf:massage>

  <xbgf:unfold>
    <nonterminal>VariableDeclaratorId</nonterminal>
    <in>
      <nonterminal>VariableDeclarator</nonterminal>
    </in>
  </xbgf:unfold>

  <xbgf:extract>
    <bgf:production>
      <nonterminal>VariableDeclaratorRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>BracketsOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>=</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>VariableInitializer</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>

  <!-- 
   - Fail: CompilationUnit.
      - [], ,([?(,([t(package), n(QualifiedIdentifier), t((;))])), *(n(ImportDeclaration)), *(n(TypeDeclaration))])
     vs.
      - [], ,([?(n(PackageDeclaration)), ?(n(ImportDeclarations)), ?(n(TypeDeclarations))])
  -->
  <xbgf:inline>PackageDeclaration</xbgf:inline>
  <xbgf:deyaccify><nonterminal>ImportDeclarations</nonterminal></xbgf:deyaccify>
  <xbgf:inline>ImportDeclarations</xbgf:inline>
  <xbgf:massage>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <plus>
            <bgf:expression>
              <nonterminal>ImportDeclaration</nonterminal>
            </bgf:expression>
          </plus>
        </bgf:expression>
      </optional>
    </bgf:expression>
    <bgf:expression>
      <star>
        <bgf:expression>
          <nonterminal>ImportDeclaration</nonterminal>
        </bgf:expression>
      </star>
    </bgf:expression>
  </xbgf:massage>
  <xbgf:deyaccify><nonterminal>TypeDeclarations</nonterminal></xbgf:deyaccify>
  <xbgf:inline>TypeDeclarations</xbgf:inline>
  <xbgf:massage>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <plus>
            <bgf:expression>
              <nonterminal>TypeDeclaration</nonterminal>
            </bgf:expression>
          </plus>
        </bgf:expression>
      </optional>
    </bgf:expression>
    <bgf:expression>
      <star>
        <bgf:expression>
          <nonterminal>TypeDeclaration</nonterminal>
        </bgf:expression>
      </star>
    </bgf:expression>
  </xbgf:massage>

  <!-- 
   - Fail: ImportDeclaration.
      - [], ,([t(import), n(Identifier), *(,([t(.), n(Identifier)])), ?(,([t(.), t(*)])), t((;))])
     vs.
      - [], ;([n(SingleTypeImportDeclaration), n(TypeImportOnDemandDeclaration)])
  -->
  <xbgf:inline>SingleTypeImportDeclaration</xbgf:inline>
  <xbgf:inline>TypeImportOnDemandDeclaration</xbgf:inline>

  <!-- 
   - Fail: ImportDeclaration.
      - [], ,([t(import), n(QualifiedIdentifier), ?(,([t(.), t(*)])), t((;))])
     vs.
      - [], ;([,([t(import), n(QualifiedIdentifier), t((;))]),
               ,([t(import), n(QualifiedIdentifier), t(.), t(*), t((;))])])
  -->
  <xbgf:horizontal><nonterminal>ImportDeclaration</nonterminal></xbgf:horizontal>
  <xbgf:factor>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>import</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>QualifiedIdentifier</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>;</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>import</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>QualifiedIdentifier</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>.</terminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>*</terminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>;</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <terminal>import</terminal>
        </bgf:expression>
        <bgf:expression>
          <nonterminal>QualifiedIdentifier</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <choice>
            <bgf:expression>
              <epsilon/>
            </bgf:expression>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <terminal>.</terminal>
                </bgf:expression>
                <bgf:expression>
                  <terminal>*</terminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
          </choice>
        </bgf:expression>
        <bgf:expression>
          <terminal>;</terminal>
        </bgf:expression>
      </sequence>
    </bgf:expression>
  </xbgf:factor>
  <xbgf:massage>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <epsilon/>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>.</terminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>*</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>.</terminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>*</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </optional>
    </bgf:expression>
  </xbgf:massage>
  <xbgf:vertical>
    <nonterminal>ImportDeclaration</nonterminal>
  </xbgf:vertical>

  <!--
   - Fail: ImportDeclaration.
      - [], ,([t(import), ?(t(static)), n(Identifier), *(,([t(.), n(Identifier)])), ?(,([t(.), t(*)])), t((;))])
     vs.
      - [], ,([t(import), t(static), n(QualifiedIdentifier), t(.), t(*), t((;))])
      - [], ,([t(import), t(static), n(QualifiedIdentifier), t(.), n(Identifier), t((;))])
      - [], ,([t(import), n(QualifiedIdentifier), ?(,([t(.), t(*)])), t((;))])
  -->
  <xbgf:unfold>
    <nonterminal>QualifiedIdentifier</nonterminal>
    <in>
      <nonterminal>ImportDeclaration</nonterminal>
    </in>
  </xbgf:unfold>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>dotId</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
    <in>
      <nonterminal>ImportDeclaration</nonterminal>
    </in>
  </xbgf:extract>
  <xbgf:massage>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <star>
            <bgf:expression>
              <nonterminal>dotId</nonterminal>
            </bgf:expression>
          </star>
        </bgf:expression>
        <bgf:expression>
          <nonterminal>dotId</nonterminal>
        </bgf:expression>
      </sequence>
    </bgf:expression>
    <bgf:expression>
      <plus>
        <bgf:expression>
          <nonterminal>dotId</nonterminal>
        </bgf:expression>
      </plus>
    </bgf:expression>
  </xbgf:massage>
  <!-- RELAXATION -->
  <xbgf:widen>
    <bgf:expression>
      <plus>
        <bgf:expression>
          <nonterminal>dotId</nonterminal>
        </bgf:expression>
      </plus>
    </bgf:expression>
    <bgf:expression>
      <star>
        <bgf:expression>
          <nonterminal>dotId</nonterminal>
        </bgf:expression>
      </star>
    </bgf:expression>
    <in>
      <nonterminal>ImportDeclaration</nonterminal>
    </in>
  </xbgf:widen>
  <xbgf:horizontal><nonterminal>ImportDeclaration</nonterminal></xbgf:horizontal>
  <xbgf:factor>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>import</terminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>static</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Identifier</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <star>
                <bgf:expression>
                  <nonterminal>dotId</nonterminal>
                </bgf:expression>
              </star>
            </bgf:expression>
            <bgf:expression>
              <terminal>;</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>import</terminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>static</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Identifier</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <star>
                <bgf:expression>
                  <nonterminal>dotId</nonterminal>
                </bgf:expression>
              </star>
            </bgf:expression>
            <bgf:expression>
              <terminal>.</terminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>*</terminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>;</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <terminal>import</terminal>
        </bgf:expression>
        <bgf:expression>
          <terminal>static</terminal>
        </bgf:expression>
        <bgf:expression>
          <nonterminal>Identifier</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <star>
            <bgf:expression>
              <nonterminal>dotId</nonterminal>
            </bgf:expression>
          </star>
        </bgf:expression>
        <bgf:expression>
          <choice>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <terminal>.</terminal>
                </bgf:expression>
                <bgf:expression>
                  <terminal>*</terminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
            <bgf:expression>
              <epsilon/>
            </bgf:expression>
          </choice>
        </bgf:expression>
        <bgf:expression>
          <terminal>;</terminal>
        </bgf:expression>
      </sequence>
    </bgf:expression>
  </xbgf:factor>
  <xbgf:massage>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>.</terminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>*</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <epsilon/>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>.</terminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>*</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </optional>
    </bgf:expression>
  </xbgf:massage>
  <xbgf:factor>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>import</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Identifier</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <star>
                <bgf:expression>
                  <nonterminal>dotId</nonterminal>
                </bgf:expression>
              </star>
            </bgf:expression>
            <bgf:expression>
              <optional>
                <bgf:expression>
                  <sequence>
                    <bgf:expression>
                      <terminal>.</terminal>
                    </bgf:expression>
                    <bgf:expression>
                      <terminal>*</terminal>
                    </bgf:expression>
                  </sequence>
                </bgf:expression>
              </optional>
            </bgf:expression>
            <bgf:expression>
              <terminal>;</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>import</terminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>static</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Identifier</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <star>
                <bgf:expression>
                  <nonterminal>dotId</nonterminal>
                </bgf:expression>
              </star>
            </bgf:expression>
            <bgf:expression>
              <optional>
                <bgf:expression>
                  <sequence>
                    <bgf:expression>
                      <terminal>.</terminal>
                    </bgf:expression>
                    <bgf:expression>
                      <terminal>*</terminal>
                    </bgf:expression>
                  </sequence>
                </bgf:expression>
              </optional>
            </bgf:expression>
            <bgf:expression>
              <terminal>;</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <terminal>import</terminal>
        </bgf:expression>
        <bgf:expression>
          <choice>
            <bgf:expression>
              <terminal>static</terminal>
            </bgf:expression>
            <bgf:expression>
              <epsilon/>
            </bgf:expression>
          </choice>
        </bgf:expression>
        <bgf:expression>
          <nonterminal>Identifier</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <star>
            <bgf:expression>
              <nonterminal>dotId</nonterminal>
            </bgf:expression>
          </star>
        </bgf:expression>
        <bgf:expression>
          <optional>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <terminal>.</terminal>
                </bgf:expression>
                <bgf:expression>
                  <terminal>*</terminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
          </optional>
        </bgf:expression>
        <bgf:expression>
          <terminal>;</terminal>
        </bgf:expression>
      </sequence>
    </bgf:expression>
  </xbgf:factor>
  <xbgf:massage>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <terminal>static</terminal>
        </bgf:expression>
        <bgf:expression>
          <epsilon/>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <terminal>static</terminal>
        </bgf:expression>
      </optional>
    </bgf:expression>
  </xbgf:massage>
  <xbgf:inline>dotId</xbgf:inline>

  <!-- ISSUE CORRECT (;)
   - Fail: MethodDeclaratorRest.
      - [], ,([t((), ?(n(FormalParameterDecls)), t()), n(BracketsOpt), ?(,([t(throws), n(QualifiedIdentifierList)])), ;([n(MethodBody), t((;))])])
     vs.
      - [], ,([n(FormalParameters), n(BracketsOpt), ?(,([t(throws), n(QualifiedIdentifierList)])), n(MethodBody)])
  -->
  <!-- CORRECTION -->
  <xbgf:add>
    <horizontal>
      <bgf:production>
        <nonterminal>MethodDeclaratorRest</nonterminal>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>FormalParameters</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>BracketsOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <optional>
                <bgf:expression>
                  <sequence>
                    <bgf:expression>
                      <terminal>throws</terminal>
                    </bgf:expression>
                    <bgf:expression>
                      <nonterminal>QualifiedIdentifierList</nonterminal>
                    </bgf:expression>
                  </sequence>
                </bgf:expression>
              </optional>
            </bgf:expression>
            <bgf:expression>
              <choice>
                <bgf:expression>
                  <marked>
                    <bgf:expression>
                      <terminal>;</terminal>
                    </bgf:expression>
                  </marked>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>MethodBody</nonterminal>
                </bgf:expression>
              </choice>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </bgf:production>
    </horizontal>
  </xbgf:add>
  <xbgf:inline>FormalParameters</xbgf:inline>

  <!-- ISSUE PERMISSIVENESS
   - Fail: AnnotationTypeElementDeclaration.
      - [], ,([n(ModifiersOpt), n(AnnotationTypeElementRest)])
     vs.
      - [], t((;))
  x   - [], n(AnnotationTypeDeclaration)
  x   - [], n(EnumDeclaration)
  x   - [], n(InterfaceDeclaration)
  x   - [], n(ClassDeclaration)
      - [], ,([n(ModifiersOpt), n(Type), n(VariableDeclarators), t((;))])
      - [], ,([n(ModifiersOpt), n(Type), n(Identifier), t((), t()), ?(n(DefaultValue)), t((;))])
      
AnnotationTypeElementRest:
        Type Identifier AnnotationMethodOrConstantRest ";"
AnnotationTypeElementRest:
        ClassDeclaration
AnnotationTypeElementRest:
        InterfaceDeclaration
AnnotationTypeElementRest:
        EnumDeclaration
AnnotationTypeElementRest:
        AnnotationTypeDeclaration
  -->
  <!-- RELAXATION -->
  <xbgf:remove>
    <vertical>
      <bgf:production>
        <nonterminal>AnnotationTypeElementDeclaration</nonterminal>
        <bgf:expression>
          <terminal>;</terminal>
        </bgf:expression>
      </bgf:production>
    </vertical>
  </xbgf:remove>
  <!-- RELAXATION -->
  <xbgf:appear>
    <bgf:production>
      <nonterminal>AnnotationTypeElementDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <star>
                  <bgf:expression>
                    <nonterminal>Modifier</nonterminal>
                  </bgf:expression>
                </star>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>AnnotationTypeDeclaration</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:appear>
  <!-- RELAXATION -->
  <xbgf:appear>
    <bgf:production>
      <nonterminal>AnnotationTypeElementDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <star>
                  <bgf:expression>
                    <nonterminal>Modifier</nonterminal>
                  </bgf:expression>
                </star>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>EnumDeclaration</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:appear>
  <!-- RELAXATION -->
  <xbgf:appear>
    <bgf:production>
      <nonterminal>AnnotationTypeElementDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <star>
                  <bgf:expression>
                    <nonterminal>Modifier</nonterminal>
                  </bgf:expression>
                </star>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>InterfaceDeclaration</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:appear>
  <!-- RELAXATION -->
  <xbgf:appear>
    <bgf:production>
      <nonterminal>AnnotationTypeElementDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <star>
                  <bgf:expression>
                    <nonterminal>Modifier</nonterminal>
                  </bgf:expression>
                </star>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ClassDeclaration</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:appear>
  <xbgf:fold>
    <nonterminal>ModifiersOpt</nonterminal>
    <in>
      <nonterminal>AnnotationTypeElementDeclaration</nonterminal>
    </in>
  </xbgf:fold>
  <xbgf:horizontal><nonterminal>AnnotationTypeElementDeclaration</nonterminal></xbgf:horizontal>
  <xbgf:factor>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>ModifiersOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Type</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Identifier</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>(</terminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>)</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>BracketsOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <optional>
                <bgf:expression>
                  <nonterminal>DefaultValue</nonterminal>
                </bgf:expression>
              </optional>
            </bgf:expression>
            <bgf:expression>
              <terminal>;</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>ModifiersOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Type</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>VariableDeclarators</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>;</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>ModifiersOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>ClassDeclaration</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>ModifiersOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>InterfaceDeclaration</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>ModifiersOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>EnumDeclaration</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>ModifiersOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>AnnotationTypeDeclaration</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <nonterminal>ModifiersOpt</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <choice>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <nonterminal>Type</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>Identifier</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <terminal>(</terminal>
                </bgf:expression>
                <bgf:expression>
                  <terminal>)</terminal>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>BracketsOpt</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <optional>
                    <bgf:expression>
                      <nonterminal>DefaultValue</nonterminal>
                    </bgf:expression>
                  </optional>
                </bgf:expression>
                <bgf:expression>
                  <terminal>;</terminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <nonterminal>Type</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>VariableDeclarators</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <terminal>;</terminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>ClassDeclaration</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>InterfaceDeclaration</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>EnumDeclaration</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>AnnotationTypeDeclaration</nonterminal>
            </bgf:expression>
          </choice>
        </bgf:expression>
      </sequence>
    </bgf:expression>
  </xbgf:factor>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>AnnotationTypeElementRest</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>Type</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>Identifier</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>(</terminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>)</terminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>BracketsOpt</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <nonterminal>DefaultValue</nonterminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
              <bgf:expression>
                <terminal>;</terminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>Type</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>VariableDeclarators</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>;</terminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ClassDeclaration</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>InterfaceDeclaration</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>EnumDeclaration</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>AnnotationTypeDeclaration</nonterminal>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>
  <!--
   - Fail: AnnotationTypeElementRest.
      - [], ,([n(Type), n(Identifier), n(AnnotationMethodOrConstantRest), t((;))])
     vs.
      - [], ,([n(Type), n(VariableDeclarators), t((;))])
      - [], ,([n(Type), n(Identifier), t((), t()), ?(n(DefaultValue)), t((;))])
  -->
  <xbgf:extract>
    <bgf:production>
      <nonterminal>AnnotationMethodRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>BracketsOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>DefaultValue</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>AnnotationConstantRest</nonterminal>
      <bgf:expression>
        <nonterminal>VariableDeclarators</nonterminal>
      </bgf:expression>
    </bgf:production>
    <in>
      <nonterminal>AnnotationTypeElementRest</nonterminal>
    </in>
  </xbgf:extract>
  <xbgf:factor>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>Type</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Identifier</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>AnnotationMethodRest</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>;</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>Type</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>AnnotationConstantRest</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>;</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <nonterminal>Type</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <choice>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <nonterminal>Identifier</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>AnnotationMethodRest</nonterminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>AnnotationConstantRest</nonterminal>
            </bgf:expression>
          </choice>
        </bgf:expression>
        <bgf:expression>
          <terminal>;</terminal>
        </bgf:expression>
      </sequence>
    </bgf:expression>
  </xbgf:factor>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>AnnotationMethodOrConstantRest</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>Identifier</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>AnnotationMethodRest</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>AnnotationConstantRest</nonterminal>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>
  <xbgf:vertical>
    <nonterminal>AnnotationMethodOrConstantRest</nonterminal>
  </xbgf:vertical>
  <xbgf:vertical>
    <nonterminal>AnnotationTypeElementRest</nonterminal>
  </xbgf:vertical>
</xbgf:sequence>