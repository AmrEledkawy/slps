<xbgf:sequence
  xmlns:bgf="http://planet-sl.org/bgf"
  xmlns:xbgf="http://planet-sl.org/xbgf">

  <!-- ISSUE EXTEND 
     - Fail: ReferenceType.
      - [], ;([n(ClassOrInterfaceType), n(ArrayType)])
     vs.
      - [], ;([n(ClassOrInterfaceType), n(TypeVariable), n(ArrayType)])
  -->
  <xbgf:vertical>
    <nonterminal>ReferenceType</nonterminal>
  </xbgf:vertical>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>TypeVariable</nonterminal>
      <bgf:expression>
        <nonterminal>Identifier</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:add>
    <bgf:production>
      <nonterminal>ReferenceType</nonterminal>
      <bgf:expression>
        <nonterminal>TypeVariable</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:horizontal>ReferenceType</xbgf:horizontal>

  <!-- ISSUE EXTEND GENERALIZE
     - Fail: MethodHeader.
      - [], ,([?(n(MethodModifiers)), n(ResultType), n(MethodDeclarator), ?(n(Throws))])
     vs.
      - [], ,([?(n(MethodModifiers)), ?(n(TypeParameters)), n(ResultType), n(MethodDeclarator), ?(n(Throws))])
  -->
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>AdditionalBound</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>&amp;</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>InterfaceType</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>AdditionalBoundList</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>AdditionalBound</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>AdditionalBoundList</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>AdditionalBound</nonterminal>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>TypeBound</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>extends</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ClassOrInterfaceType</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>AdditionalBoundList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
 <xbgf:introduce>
    <bgf:production>
      <nonterminal>TypeParameter</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>TypeVariable</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>TypeBound</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>TypeParameterList</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>TypeParameterList</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>,</terminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>TypeParameter</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>TypeParameter</nonterminal>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>TypeParameters</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>&lt;</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>TypeParameterList</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>&gt;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:inject>
    <bgf:production>
      <nonterminal>MethodHeader</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>MethodModifiers</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>TypeParameters</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ResultType</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>MethodDeclarator</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>Throws</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>

  <!-- ISSUE EXTEND 
     - Fail: StatementWithoutTrailingSubstatement.
      - [], ;([n(Block), n(EmptyStatement), n(ExpressionStatement), n(SwitchStatement), n(DoStatement), n(BreakStatement), n(ContinueStatement), n(ReturnStatement), n(SynchronizedStatement), n(ThrowStatement), n(TryStatement)])
     vs.
      - [], ;([n(Block), n(EmptyStatement), n(ExpressionStatement), n(AssertStatement), n(SwitchStatement), n(DoStatement), n(BreakStatement), n(ContinueStatement), n(ReturnStatement), n(SynchronizedStatement), n(ThrowStatement), n(TryStatement)])
  -->
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>AssertStatement</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <terminal>assert</terminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>Expression</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>;</terminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <terminal>assert</terminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>Expression</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>:</terminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>Expression</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>;</terminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:vertical>
    <nonterminal>StatementWithoutTrailingSubstatement</nonterminal>
  </xbgf:vertical>
  <xbgf:add>
    <bgf:production>
      <nonterminal>StatementWithoutTrailingSubstatement</nonterminal>
      <bgf:expression>
        <nonterminal>AssertStatement</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:horizontal>StatementWithoutTrailingSubstatement</xbgf:horizontal>

  <!-- ISSUE EXTEND GENERALIZE
     - Fail: PackageDeclaration.
      - [], ,([t(package), n(PackageName), t((;))])
     vs.
      - [], ,([?(n(Annotations)), t(package), n(PackageName), t((;))])
  -->
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>Annotations</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <nonterminal>Annotation</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>Annotations</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>Annotation</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:inject>
    <bgf:production>
      <nonterminal>PackageDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>Annotations</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>package</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>PackageName</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>

  <!-- ISSUE EXTEND 
     - Fail: SwitchLabel.
      - [], ,([t(case), n(ConstantExpression), t(:)])
     vs.
      - [], ;([,([t(case), n(ConstantExpression), t(:)]),
               ,([t(case), n(EnumConstantName), t(:)])])
  -->
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>EnumConstantName</nonterminal>
      <bgf:expression>
        <nonterminal>Identifier</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:add>
    <bgf:production>
      <nonterminal>SwitchLabel</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>case</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>EnumConstantName</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>:</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
 <xbgf:horizontal>SwitchLabel</xbgf:horizontal>
  <xbgf:distribute>
    <nonterminal>SwitchLabel</nonterminal>
  </xbgf:distribute>
  
  <!-- ISSUE EXTEND 
     - Fail: ImportDeclaration.
      - [], ;([n(SingleTypeImportDeclaration), n(TypeImportOnDemandDeclaration)])
     vs.
      - [], ;([n(SingleTypeImportDeclaration), n(TypeImportOnDemandDeclaration), n(SingleStaticImportDeclaration), n(StaticImportOnDemandDeclaration)])
  -->
  <xbgf:vertical>
    <nonterminal>ImportDeclaration</nonterminal>
  </xbgf:vertical>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>SingleStaticImportDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>import</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>static</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>TypeName</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:add>
    <bgf:production>
      <nonterminal>ImportDeclaration</nonterminal>
      <bgf:expression>
        <nonterminal>SingleStaticImportDeclaration</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>StaticImportOnDemandDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>import</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>static</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>TypeName</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>*</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:add>
    <bgf:production>
      <nonterminal>ImportDeclaration</nonterminal>
      <bgf:expression>
        <nonterminal>StaticImportOnDemandDeclaration</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:horizontal>ImportDeclaration</xbgf:horizontal>

  <!-- ISSUE EXTEND 
     - Fail: ClassDeclaration.
      - [], ,([?(n(ClassModifiers)), t(class), n(Identifier), ?(n(Super)), ?(n(Interfaces)), n(ClassBody)])
     vs.
      - [], ;([n(NormalClassDeclaration), n(EnumDeclaration)])
  -->
  <xbgf:chain>
    <bgf:production>
      <nonterminal>ClassDeclaration</nonterminal>
      <bgf:expression>
        <nonterminal>NormalClassDeclaration</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:chain>
  <xbgf:inject>
    <bgf:production>
      <nonterminal>NormalClassDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ClassModifiers</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>class</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>TypeParameters</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>Super</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>Interfaces</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ClassBody</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>Arguments</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ArgumentList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>EnumBodyDeclarations</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ClassBodyDeclarations</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>EnumConstant</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Annotations</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>Arguments</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ClassBody</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>EnumConstants</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <nonterminal>EnumConstant</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>EnumConstants</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>,</terminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>EnumConstant</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>EnumBody</nonterminal>
      <bgf:expression>
        <star>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <nonterminal>EnumConstants</nonterminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <terminal>,</terminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <nonterminal>EnumBodyDeclarations</nonterminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </star>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>EnumDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ClassModifiers</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>enum</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>Interfaces</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>EnumBody</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:add>
    <bgf:production>
      <nonterminal>ClassDeclaration</nonterminal>
      <bgf:expression>
        <nonterminal>EnumDeclaration</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:horizontal>ClassDeclaration</xbgf:horizontal>

  <!-- ISSUE EXTEND
     - Fail: InterfaceDeclaration.
      - [], ,([?(n(InterfaceModifiers)), t(interface), n(Identifier), ?(n(ExtendsInterfaces)), n(InterfaceBody)])
     vs.
      - [], ;([n(NormalInterfaceDeclaration), n(AnnotationTypeDeclaration)])
  -->
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>DefaultValue</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>default</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ElementValue</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>AnnotationTypeDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>InterfaceModifiers</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>@</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>interface</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>AnnotationTypeBody</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>AnnotationTypeElementDeclaration</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <nonterminal>AbstractMethodModifiers</nonterminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>Type</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>Identifier</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>(</terminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>)</terminal>
              </bgf:expression>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <nonterminal>DefaultValue</nonterminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
              <bgf:expression>
                <terminal>;</terminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ConstantDeclaration</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ClassDeclaration</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>InterfaceDeclaration</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>EnumDeclaration</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>AnnotationTypeDeclaration</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>AnnotationTypeElementDeclarations</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <nonterminal>AnnotationTypeElementDeclaration</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>AnnotationTypeElementDeclarations</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>AnnotationTypeElementDeclaration</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:define>
    <bgf:production>
      <nonterminal>AnnotationTypeBody</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>{</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>AnnotationTypeElementDeclarations</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>}</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  <xbgf:chain>
    <bgf:production>
      <nonterminal>InterfaceDeclaration</nonterminal>
      <bgf:expression>
        <nonterminal>NormalInterfaceDeclaration</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:chain>
  <xbgf:add>
    <bgf:production>
      <nonterminal>InterfaceDeclaration</nonterminal>
      <bgf:expression>
        <nonterminal>AnnotationTypeDeclaration</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:horizontal>InterfaceDeclaration</xbgf:horizontal>

  <!-- ISSUE EXTEND 
     - Fail: ForStatement.
      - [], ,([t(for), t((), ?(n(ForInit)), t((;)), ?(n(Expression)), t((;)), ?(n(ForUpdate)), t()), n(Statement)])
     vs.
      - [], ;([n(BasicForStatement), n(EnhancedForStatement)])
  -->
  <xbgf:chain>
    <bgf:production>
      <nonterminal>ForStatement</nonterminal>
      <bgf:expression>
        <nonterminal>BasicForStatement</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:chain>
  <xbgf:add>
    <bgf:production>
      <nonterminal>ForStatement</nonterminal>
      <bgf:expression>
        <nonterminal>EnhancedForStatement</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:define>
    <bgf:production>
      <nonterminal>EnhancedForStatement</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>for</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>VariableModifiers</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Type</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>:</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Expression</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Statement</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  <xbgf:horizontal>ForStatement</xbgf:horizontal>

  <!-- ISSUE EXTEND GENERALIZE
     - Fail: AbstractMethodDeclaration.
      - [], ,([?(n(AbstractMethodModifiers)), n(ResultType), n(MethodDeclarator), ?(n(Throws)), t((;))])
     vs.
      - [], ,([?(n(AbstractMethodModifiers)), ?(n(TypeParameters)), n(ResultType), n(MethodDeclarator), ?(n(Throws)), t((;))])
  -->
  <xbgf:inject>
    <bgf:production>
      <nonterminal>AbstractMethodDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>AbstractMethodModifiers</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>TypeParameters</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ResultType</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>MethodDeclarator</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>Throws</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>

  <!-- ISSUE EXTEND GENERALIZE
     - Fail: MethodInvocation.
      - [], ;([,([n(MethodName), t((), ?(n(ArgumentList)), t())]),
               ,([n(Primary), t(.), n(Identifier), t((), ?(n(ArgumentList)), t())]),
               ,([t(super), t(.), n(Identifier), t((), ?(n(ArgumentList)), t())]),
               ,([n(ClassName), t(.), t(super), t(.), n(Identifier), t((), ?(n(ArgumentList)), t())])])
     vs.
      - [], ;([,([n(MethodName), t((), ?(n(ArgumentList)), t())]),
               ,([n(Primary), t(.), ?(n(NonWildTypeArguments)), n(Identifier), t((), ?(n(ArgumentList)), t())]),
               ,([t(super), t(.), ?(n(NonWildTypeArguments)), n(Identifier), t((), ?(n(ArgumentList)), t())]),
               ,([n(ClassName), t(.), t(super), t(.), ?(n(NonWildTypeArguments)), n(Identifier), t((), ?(n(ArgumentList)), t())]),
               ,([n(TypeName), t(.), n(NonWildTypeArguments), n(Identifier), t((), ?(n(ArgumentList)), t())])])
  -->
  <xbgf:vertical>
    <nonterminal>MethodInvocation</nonterminal>
  </xbgf:vertical>
  <xbgf:designate>
    <bgf:production>
      <label>target2</label>
      <nonterminal>MethodInvocation</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Primary</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ArgumentList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:designate>
  <xbgf:inject>
    <bgf:production>
      <label>target2</label>
      <nonterminal>MethodInvocation</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Primary</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>NonWildTypeArguments</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ArgumentList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>
  <xbgf:designate>
    <bgf:production>
      <label>target3</label>
      <nonterminal>MethodInvocation</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>super</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ArgumentList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:designate>
  <xbgf:inject>
    <bgf:production>
      <label>target3</label>
      <nonterminal>MethodInvocation</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>super</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>NonWildTypeArguments</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ArgumentList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>
  <xbgf:designate>
    <bgf:production>
      <label>target4</label>
      <nonterminal>MethodInvocation</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ClassName</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>super</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ArgumentList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:designate>
  <xbgf:inject>
    <bgf:production>
      <label>target4</label>
      <nonterminal>MethodInvocation</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ClassName</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>super</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>NonWildTypeArguments</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ArgumentList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>
  <xbgf:add>
    <bgf:production>
      <nonterminal>MethodInvocation</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>TypeName</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>NonWildTypeArguments</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ArgumentList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:horizontal>MethodInvocation</xbgf:horizontal>
  <xbgf:strip>
    <selector>target2</selector>
  </xbgf:strip>
  <xbgf:strip>
    <selector>target3</selector>
  </xbgf:strip>
  <xbgf:strip>
    <selector>target4</selector>
  </xbgf:strip>

  <!-- ISSUE EXTEND GENERALIZE
     - Fail: ConstructorDeclarator.
      - [], ,([n(Identifier), t((), ?(n(FormalParameterList)), t())])
     vs.
      - [], ,([?(n(TypeParameters)), n(Identifier), t((), ?(n(FormalParameterList)), t())])
  -->
  <xbgf:inject>
    <bgf:production>
      <nonterminal>ConstructorDeclarator</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>TypeParameters</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>FormalParameterList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>

  <!-- ISSUE REFACTOR EBNF
     - Fail: FormalParameterList.
      - [], ;([n(FormalParameter), ,([n(FormalParameterList), t((,)), n(FormalParameter)])])
     vs.
      - [], ;([n(LastFormalParameter), ,([n(FormalParameters), t((,)), n(LastFormalParameter)])])
   - Fail: MethodDeclarator.
      - [], ,([n(Identifier), t((), ?(n(FormalParameters)), t())])
     vs.
      - [], ,([n(Identifier), t((), ?(n(FormalParameterList)), t())])

  -->
  <xbgf:rename>
    <nonterminal>
      <from>FormalParameterList</from>
      <to>FormalParameters</to>
    </nonterminal>
  </xbgf:rename>
  <xbgf:replace>
    <bgf:expression>
      <nonterminal>FormalParameters</nonterminal>
    </bgf:expression>
    <bgf:expression>
      <nonterminal>FormalParameterList</nonterminal>
    </bgf:expression>
    <in>
      <nonterminal>MethodDeclarator</nonterminal>
    </in>
  </xbgf:replace>
  <xbgf:replace>
    <bgf:expression>
      <nonterminal>FormalParameters</nonterminal>
    </bgf:expression>
    <bgf:expression>
      <nonterminal>FormalParameterList</nonterminal>
    </bgf:expression>
    <in>
      <nonterminal>ConstructorDeclarator</nonterminal>
    </in>
  </xbgf:replace>
  
  <!-- ISSUE EXTEND -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>FormalParameterList</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <nonterminal>LastFormalParameter</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>FormalParameters</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>,</terminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>LastFormalParameter</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  <xbgf:define>
    <bgf:production>
      <nonterminal>LastFormalParameter</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>VariableModifiers</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>Type</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <terminal>...</terminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>VariableDeclaratorId</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>FormalParameter</nonterminal>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>

  <!-- ISSUE EXTEND 
     - Fail: ConstantDeclaration.
      - [], ,([?(n(ConstantModifiers)), n(Type), n(VariableDeclarators)])
     vs.
      - [], ,([?(n(ConstantModifiers)), n(Type), n(VariableDeclarators), t((;))])
  -->
  <xbgf:inject>
    <bgf:production>
      <nonterminal>ConstantDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ConstantModifiers</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Type</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>VariableDeclarators</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>

  <!-- ISSUE EXTEND -->
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>ExceptionType</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <nonterminal>ClassType</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>TypeVariable</nonterminal>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>

  <!-- ISSUE REFACTOR
     - Fail: Throws.
      - [], ,([t(throws), n(ClassTypeList)])
     vs.
      - [], ,([t(throws), n(ExceptionTypeList)])
  -->
  <xbgf:rename>
    <nonterminal>
      <from>ClassTypeList</from>
      <to>ExceptionTypeList</to>
    </nonterminal>
  </xbgf:rename>
  <xbgf:undefine>ExceptionTypeList</xbgf:undefine>
  <xbgf:define>
    <bgf:production>
      <nonterminal>ExceptionTypeList</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <nonterminal>ExceptionType</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>ExceptionTypeList</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>,</terminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>ExceptionType</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>

  <!-- ISSUE EXTEND -->
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>WildcardBounds</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <terminal>extends</terminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>ReferenceType</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <terminal>super</terminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>ReferenceType</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>Wildcard</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>?</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>WildcardBounds</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Opt</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>ActualTypeArgument</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <nonterminal>ReferenceType</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Wildcard</nonterminal>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>ActualTypeArgumentList</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <nonterminal>ActualTypeArgument</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>ActualTypeArgumentList</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>,</terminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>ActualTypeArgument</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>TypeArguments</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>&lt;</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ActualTypeArgumentList</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>&gt;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>TypeDeclSpecifier</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <nonterminal>TypeName</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>ClassOrInterfaceType</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>.</terminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>Identifier</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>

  <!-- ISSUE REFACTOR BRUTAL?
   - Fail: InterfaceType.
      - [], n(TypeName)
     vs.
      - [], ,([n(TypeDeclSpecifier), ?(n(TypeArguments))])
   - Fail: ClassType.
      - [], n(TypeName)
     vs.
      - [], ,([n(TypeDeclSpecifier), ?(n(TypeArguments))])
  -->
  <xbgf:undefine>InterfaceType</xbgf:undefine>
  <xbgf:undefine>ClassType</xbgf:undefine>
  <xbgf:define>
    <bgf:production>
      <nonterminal>InterfaceType</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>TypeDeclSpecifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>TypeArguments</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  <xbgf:define>
    <bgf:production>
      <nonterminal>ClassType</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>TypeDeclSpecifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>TypeArguments</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>

  <!-- ISSUE EXTEND 
     - Fail: ExplicitConstructorInvocation.
      - [], ;([,([t(this), t((), ?(n(ArgumentList)), t()), t((;))]),
               ,([t(super), t((), ?(n(ArgumentList)), t()), t((;))]),
               ,([n(Primary), t(.), t(super), t((), ?(n(ArgumentList)), t()), t((;))])])
     vs.
      - [], ;([,([?(n(NonWildTypeArguments)), t(this), t((), ?(n(ArgumentList)), t()), t((;))]),
               ,([?(n(NonWildTypeArguments)), t(super), t((), ?(n(ArgumentList)), t()), t((;))]),
               ,([n(Primary), t(.), ?(n(NonWildTypeArguments)), t(super), t((), ?(n(ArgumentList)), t()), t((;))])])
  -->
  <xbgf:vertical>
    <nonterminal>ExplicitConstructorInvocation</nonterminal>
  </xbgf:vertical>
  <xbgf:designate>
    <bgf:production>
      <label>target1</label>
      <nonterminal>ExplicitConstructorInvocation</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>this</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ArgumentList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:designate>
  <xbgf:inject>
    <bgf:production>
      <label>target1</label>
      <nonterminal>ExplicitConstructorInvocation</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>NonWildTypeArguments</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>this</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ArgumentList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>
  <xbgf:designate>
    <bgf:production>
      <label>target2</label>
      <nonterminal>ExplicitConstructorInvocation</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>super</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ArgumentList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:designate>
  <xbgf:inject>
    <bgf:production>
      <label>target2</label>
      <nonterminal>ExplicitConstructorInvocation</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>NonWildTypeArguments</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>super</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ArgumentList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>
  <xbgf:designate>
    <bgf:production>
      <label>target3</label>
      <nonterminal>ExplicitConstructorInvocation</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Primary</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>super</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ArgumentList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:designate>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>ReferenceTypeList</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <nonterminal>ReferenceType</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>ReferenceTypeList</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>,</terminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>ReferenceType</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:define>
    <bgf:production>
      <nonterminal>NonWildTypeArguments</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>&lt;</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ReferenceTypeList</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>&gt;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  <xbgf:inject>
    <bgf:production>
      <label>target3</label>
      <nonterminal>ExplicitConstructorInvocation</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Primary</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>NonWildTypeArguments</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>super</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ArgumentList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>
  <xbgf:horizontal>ExplicitConstructorInvocation</xbgf:horizontal>
  <xbgf:strip>
    <selector>target1</selector>
  </xbgf:strip>
  <xbgf:strip>
    <selector>target2</selector>
  </xbgf:strip>
  <xbgf:strip>
    <selector>target3</selector>
  </xbgf:strip>


  <!-- ISSUE EXTEND GENERALIZE
     - Fail: ClassInstanceCreationExpression.
      - [], ;([,([t(new), n(ClassOrInterfaceType), t((), ?(n(ArgumentList)), t()), ?(n(ClassBody))]),
               ,([n(Primary), t(.), t(new), n(Identifier), t((), ?(n(ArgumentList)), t()), ?(n(ClassBody))])])
     vs.
      - [], ;([,([t(new), ?(n(TypeArguments)), n(ClassOrInterfaceType), t((), ?(n(ArgumentList)), t()), ?(n(ClassBody))]),
               ,([n(Primary), t(.), t(new), ?(n(TypeArguments)), n(Identifier), ?(n(TypeArguments)), t((), ?(n(ArgumentList)), t()), ?(n(ClassBody))])])
  -->
  <xbgf:vertical>
    <nonterminal>ClassInstanceCreationExpression</nonterminal>
  </xbgf:vertical>
  <xbgf:designate>
    <bgf:production>
      <label>target1</label>
      <nonterminal>ClassInstanceCreationExpression</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>new</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ClassOrInterfaceType</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ArgumentList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ClassBody</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:designate>
  <xbgf:designate>
    <bgf:production>
      <label>target2</label>
      <nonterminal>ClassInstanceCreationExpression</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Primary</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>new</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ArgumentList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ClassBody</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:designate>
  <xbgf:inject>
    <bgf:production>
      <label>target1</label>
      <nonterminal>ClassInstanceCreationExpression</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>new</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>TypeArguments</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ClassOrInterfaceType</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ArgumentList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ClassBody</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>
  <xbgf:inject>
    <bgf:production>
      <label>target2</label>
      <nonterminal>ClassInstanceCreationExpression</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Primary</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>new</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>TypeArguments</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>TypeArguments</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ArgumentList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ClassBody</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>
  <xbgf:horizontal>ClassInstanceCreationExpression</xbgf:horizontal>

  <!-- ISSUE REFACTOR
     - Fail: ArrayCreationExpression.
      - [], ;([,([t(new), n(PrimitiveType), n(DimExprs), ?(n(Dims))]),
               ,([t(new), n(TypeName), n(DimExprs), ?(n(Dims))]),
               ,([t(new), n(PrimitiveType), n(Dims), n(ArrayInitializer)]),
               ,([t(new), n(TypeName), n(Dims), n(ArrayInitializer)])])
     vs.
      - [], ;([,([t(new), n(PrimitiveType), n(DimExprs), ?(n(Dims))]),
               ,([t(new), n(ClassOrInterfaceType), n(DimExprs), ?(n(Dims))]),
               ,([t(new), n(PrimitiveType), n(Dims), n(ArrayInitializer)]),
               ,([t(new), n(ClassOrInterfaceType), n(Dims), n(ArrayInitializer)])])
  -->
  <xbgf:vertical>
    <nonterminal>ArrayCreationExpression</nonterminal>
  </xbgf:vertical>
  <xbgf:designate>
    <bgf:production>
      <label>target1</label>
      <nonterminal>ArrayCreationExpression</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>new</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>TypeName</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>DimExprs</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>Dims</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:designate>
  <xbgf:project>
    <bgf:production>
      <label>target1</label>
      <nonterminal>ArrayCreationExpression</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>new</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>DimExprs</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>Dims</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:project>
  <xbgf:inject>
    <bgf:production>
      <label>target1</label>
      <nonterminal>ArrayCreationExpression</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>new</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ClassOrInterfaceType</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>DimExprs</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>Dims</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>
  <xbgf:designate>
    <bgf:production>
      <label>target2</label>
      <nonterminal>ArrayCreationExpression</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>new</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>TypeName</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Dims</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ArrayInitializer</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:designate>
  <xbgf:project>
    <bgf:production>
      <label>target2</label>
      <nonterminal>ArrayCreationExpression</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>new</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Dims</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ArrayInitializer</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:project>
  <xbgf:inject>
    <bgf:production>
      <label>target2</label>
      <nonterminal>ArrayCreationExpression</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>new</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ClassOrInterfaceType</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Dims</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ArrayInitializer</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>
  <xbgf:horizontal>ArrayCreationExpression</xbgf:horizontal>
  <xbgf:strip>
    <selector>target1</selector>
  </xbgf:strip>
  <xbgf:strip>
    <selector>target2</selector>
  </xbgf:strip>

</xbgf:sequence>