<xbgf:sequence
  xmlns:bgf="http://planet-sl.org/bgf"
  xmlns:xbgf="http://planet-sl.org/xbgf">

  <!-- in the extracted version root is undefined -->
  <xbgf:reroot>
    <root>CompilationUnit</root>
  </xbgf:reroot>
  
  <!-- ISSUE CORRECT SPECERROR
  This is an error (typo) in JLS2.
  
     - Fail: ConstantModifiers.
      - [], ;([n(ConstantModifier), ,([n(ConstantModifiers), n(ConstantModifier)])])
     vs.
      - [], ;([n(ConstantModifier), ,([n(ConstantModifiers), n(ConstantModifer)])])
  -->
  <xbgf:unite>
    <add>ConstantModifer</add>
    <to>ConstantModifier</to>
  </xbgf:unite>
  
  <!-- ISSUE CORRECT SPECERROR
  Another typo of JLS2 -->
  <xbgf:unite>
    <add>Identifer</add>
    <to>Identifier</to>
  </xbgf:unite>
  
  <!--  ISSUE EXTRACTERROR
  Error in markup of JLS2
     - Fail: InterfaceBody.
      - [], ,([t({), ?(n(InterfaceMemberDeclarations)), t(})])
     vs.
      - [], *(?(n(InterfaceMemberDeclarations)))
  -->
  <!-- BREFACTOR -->
  <xbgf:undefine>InterfaceBody</xbgf:undefine>
  <!-- GENERALITY -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>InterfaceBody</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>{</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>InterfaceMemberDeclarations</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>}</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  
  <!-- ISSUE EXTRACTERROR
   Error in markup of JLS2
     - Fail: ClassBody.
      - [], ,([t({), ?(n(ClassBodyDeclarations)), t(})])
     vs.
      - [], *(?(n(ClassBodyDeclarations)))
  -->
  <!-- BREFACTOR -->
  <xbgf:undefine>ClassBody</xbgf:undefine>
  <!-- GENERALITY -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>ClassBody</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>{</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ClassBodyDeclarations</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>}</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  
  <!-- ISSUE EXTRACTERROR
  Error in markup in JLS2
  
     - Fail: ConstructorBody.
      - [], ,([t({), ?(n(ExplicitConstructorInvocation)), ?(n(BlockStatements)), t(})])
     vs.
      - [], *(,([?(n(ExplicitConstructorInvocation)), ?(n(BlockStatements))]))
  -->
  <!-- BREFACTOR -->
  <xbgf:undefine>ConstructorBody</xbgf:undefine>
  <!-- GENERALITY -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>ConstructorBody</nonterminal>
      <bgf:expression>
        <star>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <nonterminal>ExplicitConstructorInvocation</nonterminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <nonterminal>BlockStatements</nonterminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </star>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>

  <!-- ISSUE EXTRACTERROR
     - Fail: Block.
      - [], ,([t({), ?(n(BlockStatements)), t(})])
     vs.
      - [], *(?(n(BlockStatements)))
  -->
  <!-- BREFACTOR -->
  <xbgf:undefine>Block</xbgf:undefine>
  <!-- GENERALITY -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>Block</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>{</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>BlockStatements</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>}</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  
  <!-- ISSUE EXTRACTERROR
     - Fail: SwitchBlock.
      - [], ,([t({), ?(n(SwitchBlockStatementGroups)), ?(n(SwitchLabels)), t(})])
     vs.
      - [], *(,([?(n(SwitchBlockStatementGroups)), ?(n(SwitchLabels))]))
  -->
  <!-- BREFACTOR -->
  <xbgf:undefine>SwitchBlock</xbgf:undefine>
  <!-- GENERALITY -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>SwitchBlock</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>{</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>SwitchBlockStatementGroups</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>SwitchLabels</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>}</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  
  <!-- ISSUE EXTRACTERROR
     - Fail: ConstructorBody.
      - [], ,([t({), ?(n(ExplicitConstructorInvocation)), ?(n(BlockStatements)), t(})])
     vs.
      - [], *(,([?(n(ExplicitConstructorInvocation)), ?(n(BlockStatements))]))
  -->
  <!-- BREFACTOR -->
  <xbgf:undefine>ConstructorBody</xbgf:undefine>
  <!-- GENERALITY -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>ConstructorBody</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>{</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ExplicitConstructorInvocation</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>BlockStatements</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>}</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>

  <!-- ISSUE CORRECT SPECERROR
  Left forgotten and undefined -->
  <!-- GENERALITY -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>ClassName</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>AmbiguousName</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>.</terminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>Identifier</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  
  <!-- ISSUE EXTRACTERROR
  Error in PrimaryNoNewArray undetected by the extractor due to lacking definition -->
  <!-- REVISE -->
  <xbgf:replace>
    <bgf:expression>
      <terminal>ClassName</terminal>
    </bgf:expression>
    <bgf:expression>
      <nonterminal>ClassName</nonterminal>
    </bgf:expression>
  </xbgf:replace>

  <!-- ISSUE CORRECT SPECERROR
   - Fail: ConstructorDeclarator.
      - [], ,([n(Identifier), t((), ?(n(FormalParameterList)), t())])
     vs.
      - [], ,([n(SimpleTypeName), t((), ?(n(FormalParameterList)), t())])
      
  SimpleTypeName is not defined formally in the JLS2
  -->
  <xbgf:unite>
    <add>SimpleTypeName</add>
    <to>Identifier</to>
  </xbgf:unite>

  <!-- ISSUE CORRECT SPECERROR
  The productions were "repeated for convenience", but repeated incorrectly, which led to this ugly thing:
  
  p([], 'CastExpression',
  ;([','([t('('), n('PrimitiveType'), t(')'), n('UnaryExpression')]),
     ','([t('('), n('ReferenceType'), t(')'), n('UnaryExpressionNotPlusMinus')]),
     ','([t('('), n('PrimitiveType'), ?(n('Dims')), t(')'), n('UnaryExpression')])])),
  -->
  <xbgf:factor>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>(</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>PrimitiveType</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>)</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>UnaryExpression</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>(</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>PrimitiveType</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <optional>
                <bgf:expression>
                  <nonterminal>Dims</nonterminal>
                </bgf:expression>
              </optional>
            </bgf:expression>
            <bgf:expression>
              <terminal>)</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>UnaryExpression</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <terminal>(</terminal>
        </bgf:expression>
        <bgf:expression>
          <nonterminal>PrimitiveType</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <choice>
            <bgf:expression>
              <epsilon/>
            </bgf:expression>
            <bgf:expression>
              <optional>
                <bgf:expression>
                  <nonterminal>Dims</nonterminal>
                </bgf:expression>
              </optional>
            </bgf:expression>
          </choice>
        </bgf:expression>
        <bgf:expression>
          <terminal>)</terminal>
        </bgf:expression>
        <bgf:expression>
          <nonterminal>UnaryExpression</nonterminal>
        </bgf:expression>
      </sequence>
    </bgf:expression>
  </xbgf:factor>
  <xbgf:massage>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <epsilon/>
        </bgf:expression>
        <bgf:expression>
          <optional>
            <bgf:expression>
              <nonterminal>Dims</nonterminal>
            </bgf:expression>
          </optional>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <optional>
            <bgf:expression>
              <nonterminal>Dims</nonterminal>
            </bgf:expression>
          </optional>
        </bgf:expression>
      </optional>
    </bgf:expression>
  </xbgf:massage>
  <xbgf:massage>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <optional>
            <bgf:expression>
              <nonterminal>Dims</nonterminal>
            </bgf:expression>
          </optional>
        </bgf:expression>
      </optional>
    </bgf:expression>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <nonterminal>Dims</nonterminal>
        </bgf:expression>
      </optional>
    </bgf:expression>
  </xbgf:massage>
 
</xbgf:sequence>