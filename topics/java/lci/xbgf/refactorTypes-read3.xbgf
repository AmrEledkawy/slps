<?xml version="1.0" encoding="utf-8"?>
<xbgf:sequence
  xmlns:bgf="http://planet-sl.org/bgf"
  xmlns:xbgf="http://planet-sl.org/xbgf">

  <!--
  The type system of the syntax appendix looks like this:
  
  Type is defined as:
     Identifier [ TypeArguments ] { "." Identifier [ TypeArguments ] } { "[" "]" }
     BasicType
  BasicType is defined as:
     "byte"
     "short"
     "char"
     "int"
     "long"
     "float"
     "double"
     "boolean"
  TypeList is defined as:
     Type { "," Type }
  
  While the collected version is more complicated:
  
  Type is defined as:
     PrimitiveType
     ReferenceType
  PrimitiveType is defined as:
     NumericType
     "boolean"
  NumericType is defined as:
     IntegralType
     FloatingPointType
  IntegralType is defined as:
     "byte"
     "short"
     "int"
     "long"
     "char"
  FloatingPointType is defined as:
     "float"
     "double"
  ReferenceType is defined as:
     ClassOrInterfaceType
     ArrayType
  ClassOrInterfaceType is defined as:
     ClassType
     InterfaceType
  ClassType is defined as:
     TypeName
  ClassTypeList is defined as:
     ClassType
     ClassTypeList "," ClassType
  InterfaceType is defined as:
     TypeName
  InterfaceTypeList is defined as:
     InterfaceType
     InterfaceTypeList "," InterfaceType
  TypeName is defined as:
     Identifier
     PackageOrTypeName "." Identifier
  PackageOrTypeName is defined as:
     Identifier
     PackageOrTypeName "." Identifier
  ArrayType is defined as:
     Type "[" "]"
  ResultType is defined as:
     Type
     "void"
     
  TypeDeclSpecifier is defined as:
     TypeName
     ClassOrInterfaceType "." Identifier
  -->

  <!--   First composing BasicType out of PrimitiveType, NumericType, FloatingPointType & IntegralType -->
  <xbgf:horizontal>IntegralType</xbgf:horizontal>
  <xbgf:inline>IntegralType</xbgf:inline>
  <xbgf:horizontal>FloatingPointType</xbgf:horizontal>
  <xbgf:inline>FloatingPointType</xbgf:inline>
  <xbgf:horizontal>NumericType</xbgf:horizontal>
  <xbgf:inline>NumericType</xbgf:inline>
  <!--
  <xbgf:distribute>
    <nonterminal>BasicType</nonterminal>
  </xbgf:distribute>
  -->

  <!-- ISSUE PERMISSIVENESS
  Merging interfaces with classes and making lists and other things conform -->
  <!-- exactly like in refactorTypes-doc2
  *Type:
        ReferenceType
  ReferenceType:
        ClassOrInterfaceType
  *ClassOrInterfaceType:
        ClassType
  -->
  <!-- RELAXATION -->
  <xbgf:remove>
    <vertical>
      <bgf:production>
        <nonterminal>ReferenceType</nonterminal>
        <bgf:expression>
          <nonterminal>ArrayType</nonterminal>
        </bgf:expression>
      </bgf:production>
    </vertical>
  </xbgf:remove>
  <xbgf:eliminate>ArrayType</xbgf:eliminate>
  <xbgf:inline>TypeVariable</xbgf:inline>
  <!-- RELAXATION -->
  <xbgf:remove>
    <vertical>
      <bgf:production>
        <nonterminal>ReferenceType</nonterminal>
        <bgf:expression>
          <nonterminal>Identifier</nonterminal>
        </bgf:expression>
      </bgf:production>
    </vertical>
  </xbgf:remove>
  <xbgf:inline>ReferenceType</xbgf:inline>
  <!--ex-InterfaceTypeList-->
  <!-- RELAXATION -->
  <xbgf:upgrade>
    <bgf:production>
      <nonterminal>TypeList</nonterminal>
      <bgf:expression>
        <marked>
          <bgf:expression>
            <nonterminal>ClassOrInterfaceType</nonterminal>
          </bgf:expression>
        </marked>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>ClassOrInterfaceType</nonterminal>
      <bgf:expression>
        <nonterminal>InterfaceType</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:upgrade>
  <!-- RELAXATION -->
  <xbgf:upgrade>
    <bgf:production>
      <nonterminal>TypeList</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>TypeList</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>,</terminal>
          </bgf:expression>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <nonterminal>ClassOrInterfaceType</nonterminal>
              </bgf:expression>
            </marked>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>ClassOrInterfaceType</nonterminal>
      <bgf:expression>
        <nonterminal>InterfaceType</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:upgrade>
  <!-- RELAXATION -->
  <xbgf:upgrade>
    <bgf:production>
      <nonterminal>TypeList</nonterminal>
      <bgf:expression>
        <marked>
          <bgf:expression>
            <nonterminal>Type</nonterminal>
          </bgf:expression>
        </marked>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>Type</nonterminal>
      <bgf:expression>
        <nonterminal>ClassOrInterfaceType</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:upgrade>
  <!-- RELAXATION -->
  <xbgf:upgrade>
    <bgf:production>
      <nonterminal>TypeList</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>TypeList</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>,</terminal>
          </bgf:expression>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <nonterminal>Type</nonterminal>
              </bgf:expression>
            </marked>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>Type</nonterminal>
      <bgf:expression>
        <nonterminal>ClassOrInterfaceType</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:upgrade>
  <!--ExtendsInterfaces-->
  <!-- RELAXATION -->
  <xbgf:upgrade>
    <bgf:production>
      <nonterminal>ExtendsInterfaces</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>extends</terminal>
          </bgf:expression>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <nonterminal>ClassOrInterfaceType</nonterminal>
              </bgf:expression>
            </marked>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>ClassOrInterfaceType</nonterminal>
      <bgf:expression>
        <nonterminal>InterfaceType</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:upgrade>
  <!-- RELAXATION -->
  <xbgf:upgrade>
    <bgf:production>
      <nonterminal>ExtendsInterfaces</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ExtendsInterfaces</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>,</terminal>
          </bgf:expression>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <nonterminal>ClassOrInterfaceType</nonterminal>
              </bgf:expression>
            </marked>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>ClassOrInterfaceType</nonterminal>
      <bgf:expression>
        <nonterminal>InterfaceType</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:upgrade>
  <!-- RELAXATION -->
  <xbgf:upgrade>
    <bgf:production>
      <nonterminal>ExtendsInterfaces</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>extends</terminal>
          </bgf:expression>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <nonterminal>Type</nonterminal>
              </bgf:expression>
            </marked>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>Type</nonterminal>
      <bgf:expression>
        <nonterminal>ClassOrInterfaceType</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:upgrade>
  <!-- RELAXATION -->
  <xbgf:upgrade>
    <bgf:production>
      <nonterminal>ExtendsInterfaces</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ExtendsInterfaces</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>,</terminal>
          </bgf:expression>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <nonterminal>Type</nonterminal>
              </bgf:expression>
            </marked>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>Type</nonterminal>
      <bgf:expression>
        <nonterminal>ClassOrInterfaceType</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:upgrade>
  <!--Super-->
  <!-- RELAXATION -->
  <xbgf:upgrade>
    <bgf:production>
      <nonterminal>Super</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>extends</terminal>
          </bgf:expression>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <nonterminal>ClassOrInterfaceType</nonterminal>
              </bgf:expression>
            </marked>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>ClassOrInterfaceType</nonterminal>
      <bgf:expression>
        <nonterminal>ClassType</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:upgrade>
  <!-- RELAXATION -->
  <xbgf:upgrade>
    <bgf:production>
      <nonterminal>Super</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>extends</terminal>
          </bgf:expression>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <nonterminal>Type</nonterminal>
              </bgf:expression>
            </marked>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>Type</nonterminal>
      <bgf:expression>
        <nonterminal>ClassOrInterfaceType</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:upgrade>
  <xbgf:inline>Super</xbgf:inline>

  <!-- RELAXATION -->
  <xbgf:unite>
    <add>InterfaceType</add>
    <to>ClassType</to>
  </xbgf:unite>
  <xbgf:deyaccify>TypeList</xbgf:deyaccify>

  <!-- Introducing brackets -->
  <!-- CORRECTION -->
  <xbgf:appear>
    <bgf:production>
      <nonterminal>ClassOrInterfaceType</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ClassType</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <star>
                  <bgf:expression>
                    <sequence>
                      <bgf:expression>
                        <terminal>[</terminal>
                      </bgf:expression>
                      <bgf:expression>
                        <terminal>]</terminal>
                      </bgf:expression>
                    </sequence>
                  </bgf:expression>
                </star>
              </bgf:expression>
            </marked>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:appear>

  <!-- Finishing touches -->
  <xbgf:inline>ClassOrInterfaceType</xbgf:inline>
  <xbgf:inline>ClassType</xbgf:inline>

  <!-- 
  p([], 'TypeDeclSpecifier',
  ;([n('QualifiedIdentifier'),
    ','([n('TypeDeclSpecifier'), ?(n('TypeArguments')), n('BracketsOpt'), t('.'), n('Identifier')])])),
    
  vs
  
  p([], 'Type', ','([n('Identifier'), ?(n('TypeArguments')), *(','([t('.'), n('Identifier'), ?(n('TypeArguments'))])), n('BracketsOpt')])),
  p([], 'Type', n('BasicType')),
  -->
  <xbgf:deyaccify>TypeDeclSpecifier</xbgf:deyaccify>

  <xbgf:fold>
    <nonterminal>BracketsOpt</nonterminal>
  </xbgf:fold>
  <!-- RELAXATION -->
  <xbgf:upgrade>
    <bgf:production>
      <nonterminal>RelationalExpression</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>RelationalExpression</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>instanceof</terminal>
          </bgf:expression>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <nonterminal>Type</nonterminal>
              </bgf:expression>
            </marked>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>Type</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>TypeDeclSpecifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>TypeArguments</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>BracketsOpt</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:upgrade>

  <!-- ISSUE PERMISSIVENESS
  
   - Fail: TypeParameter.
      - [], ,([n(Identifier), ?(,([t(extends), n(Bound)]))])
     vs.
      - [], ,([n(Identifier), ?(,([t(extends), n(TypeDeclSpecifier), ?(n(TypeArguments)), n(BracketsOpt), *(,([t(&), n(TypeDeclSpecifier), ?(n(TypeArguments))]))]))])
      
 Bound:
        Type ( ( "&" Type ))*
  -->
  <xbgf:deyaccify>AdditionalBoundList</xbgf:deyaccify>
  <xbgf:inline>AdditionalBoundList</xbgf:inline>
  <xbgf:massage>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <plus>
            <bgf:expression>
              <nonterminal>AdditionalBound</nonterminal>
            </bgf:expression>
          </plus>
        </bgf:expression>
      </optional>
    </bgf:expression>
    <bgf:expression>
      <star>
        <bgf:expression>
          <nonterminal>AdditionalBound</nonterminal>
        </bgf:expression>
      </star>
    </bgf:expression>
  </xbgf:massage>
  <xbgf:inline>AdditionalBound</xbgf:inline>
  <xbgf:inline>TypeBound</xbgf:inline>
  <!-- RELAXATION -->
  <xbgf:upgrade>
    <bgf:production>
      <nonterminal>TypeParameter</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>extends</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <marked>
                      <bgf:expression>
                        <nonterminal>Type</nonterminal>
                      </bgf:expression>
                    </marked>
                  </bgf:expression>
                  <bgf:expression>
                    <star>
                      <bgf:expression>
                        <sequence>
                          <bgf:expression>
                            <terminal>&#38;</terminal>
                          </bgf:expression>
                          <bgf:expression>
                            <nonterminal>TypeDeclSpecifier</nonterminal>
                          </bgf:expression>
                          <bgf:expression>
                            <optional>
                              <bgf:expression>
                                <nonterminal>TypeArguments</nonterminal>
                              </bgf:expression>
                            </optional>
                          </bgf:expression>
                        </sequence>
                      </bgf:expression>
                    </star>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>Type</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>TypeDeclSpecifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>TypeArguments</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>BracketsOpt</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:upgrade>
  <!-- RELAXATION -->
  <xbgf:appear>
    <bgf:production>
      <nonterminal>TypeParameter</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>extends</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>Type</nonterminal>
                  </bgf:expression>
                  <bgf:expression>
                    <star>
                      <bgf:expression>
                        <sequence>
                          <bgf:expression>
                            <terminal>&#38;</terminal>
                          </bgf:expression>
                          <bgf:expression>
                            <nonterminal>TypeDeclSpecifier</nonterminal>
                          </bgf:expression>
                          <bgf:expression>
                            <optional>
                              <bgf:expression>
                                <nonterminal>TypeArguments</nonterminal>
                              </bgf:expression>
                            </optional>
                          </bgf:expression>
                          <bgf:expression>
                            <marked>
                              <bgf:expression>
                                <star>
                                  <bgf:expression>
                                    <sequence>
                                      <bgf:expression>
                                        <terminal>[</terminal>
                                      </bgf:expression>
                                      <bgf:expression>
                                        <terminal>]</terminal>
                                      </bgf:expression>
                                    </sequence>
                                  </bgf:expression>
                                </star>
                              </bgf:expression>
                            </marked>
                          </bgf:expression>
                        </sequence>
                      </bgf:expression>
                    </star>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:appear>
  <xbgf:fold>
    <nonterminal>BracketsOpt</nonterminal>
  </xbgf:fold>
  <!-- RELAXATION -->
  <xbgf:upgrade>
    <bgf:production>
      <nonterminal>TypeParameter</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>extends</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>Type</nonterminal>
                  </bgf:expression>
                  <bgf:expression>
                    <star>
                      <bgf:expression>
                        <sequence>
                          <bgf:expression>
                            <terminal>&#38;</terminal>
                          </bgf:expression>
                          <bgf:expression>
                            <marked>
                              <bgf:expression>
                                <nonterminal>Type</nonterminal>
                              </bgf:expression>
                            </marked>
                          </bgf:expression>
                        </sequence>
                      </bgf:expression>
                    </star>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>Type</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>TypeDeclSpecifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>TypeArguments</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>BracketsOpt</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:upgrade>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>Bound</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Type</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <star>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>&amp;</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>Type</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </star>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>

  <!-- 
   - Fail: Type.
      - [], n(BasicType)
      - [], ,([n(Identifier), ?(n(TypeArguments)), *(,([t(.), n(Identifier), ?(n(TypeArguments))])), n(BracketsOpt)])
     vs.
      - [], ;([n(BasicType), ,([n(TypeDeclSpecifier), ?(n(TypeArguments)), n(BracketsOpt)])])
  -->
  <xbgf:unfold>
    <nonterminal>TypeDeclSpecifier</nonterminal>
    <in>
      <nonterminal>Type</nonterminal>
    </in>
  </xbgf:unfold>

  <!-- finishing touch -->
  <xbgf:vertical>
    <nonterminal>BasicType</nonterminal>
  </xbgf:vertical>

  <!--
     - Fail: TypeArguments.
      - [], ,([t(<), n(TypeArgument), *(,([t((,)), n(TypeArgument)])), t(>)])
     vs.
      - [], ,([t(<), n(ActualTypeArgumentList), t(>)])
      
ActualTypeArgumentList:
        ActualTypeArgument
ActualTypeArgumentList:
        ActualTypeArgumentList "," ActualTypeArgument
ActualTypeArgument:
        TypeDeclSpecifier TypeArguments ? BracketsOpt
ActualTypeArgument:
        Wildcard
TypeArgument:
        Type
TypeArgument:
        "?" ( ( "extends" | "super" ) Type )?

  -->
  <xbgf:deyaccify>ActualTypeArgumentList</xbgf:deyaccify>
  <xbgf:unfold>
    <nonterminal>TypeDeclSpecifier</nonterminal>
    <in>
      <nonterminal>WildcardBounds</nonterminal>
    </in>
  </xbgf:unfold>
  <xbgf:unfold>
    <nonterminal>TypeDeclSpecifier</nonterminal>
    <in>
      <nonterminal>TypeArgument</nonterminal>
    </in>
  </xbgf:unfold>
  <!-- RELAXATION -->
  <xbgf:upgrade>
    <bgf:production>
      <nonterminal>WildcardBounds</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>extends</terminal>
          </bgf:expression>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <nonterminal>Type</nonterminal>
              </bgf:expression>
            </marked>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>Type</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>QualifiedIdentifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <star>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <optional>
                      <bgf:expression>
                        <nonterminal>TypeArguments</nonterminal>
                      </bgf:expression>
                    </optional>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>BracketsOpt</nonterminal>
                  </bgf:expression>
                  <bgf:expression>
                    <terminal>.</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>Identifier</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </star>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>TypeArguments</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>BracketsOpt</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:upgrade>
  <!-- RELAXATION -->
  <xbgf:upgrade>
    <bgf:production>
      <nonterminal>WildcardBounds</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>super</terminal>
          </bgf:expression>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <nonterminal>Type</nonterminal>
              </bgf:expression>
            </marked>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>Type</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>QualifiedIdentifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <star>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <optional>
                      <bgf:expression>
                        <nonterminal>TypeArguments</nonterminal>
                      </bgf:expression>
                    </optional>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>BracketsOpt</nonterminal>
                  </bgf:expression>
                  <bgf:expression>
                    <terminal>.</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>Identifier</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </star>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>TypeArguments</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>BracketsOpt</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:upgrade>
  <!-- RELAXATION -->
  <xbgf:upgrade>
    <bgf:production>
      <nonterminal>TypeArgument</nonterminal>
      <bgf:expression>
        <marked>
          <bgf:expression>
            <nonterminal>Type</nonterminal>
          </bgf:expression>
        </marked>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>Type</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>QualifiedIdentifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <star>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <optional>
                      <bgf:expression>
                        <nonterminal>TypeArguments</nonterminal>
                      </bgf:expression>
                    </optional>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>BracketsOpt</nonterminal>
                  </bgf:expression>
                  <bgf:expression>
                    <terminal>.</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>Identifier</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </star>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>TypeArguments</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>BracketsOpt</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:upgrade>
  <xbgf:horizontal>WildcardBounds</xbgf:horizontal>
  <xbgf:inline>WildcardBounds</xbgf:inline>
  <xbgf:inline>Wildcard</xbgf:inline>
  <xbgf:factor>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>extends</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Type</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>super</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Type</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <choice>
            <bgf:expression>
              <terminal>extends</terminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>super</terminal>
            </bgf:expression>
          </choice>
        </bgf:expression>
        <bgf:expression>
          <nonterminal>Type</nonterminal>
        </bgf:expression>
      </sequence>
    </bgf:expression>
  </xbgf:factor>

  <xbgf:inline>ActualTypeArgumentList</xbgf:inline>

  <!-- ...the story of BracketsOpt is continued in refactorExpressions-doc3 -->
  <xbgf:unfold>
    <nonterminal>BracketsOpt</nonterminal>
    <in>
      <nonterminal>Type</nonterminal>
    </in>
  </xbgf:unfold>
  <!-- CORRECTION -->
  <xbgf:disappear>
    <bgf:production>
      <nonterminal>Type</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>QualifiedIdentifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <star>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <optional>
                      <bgf:expression>
                        <nonterminal>TypeArguments</nonterminal>
                      </bgf:expression>
                    </optional>
                  </bgf:expression>
                  <bgf:expression>
                    <marked>
                      <bgf:expression>
                        <star>
                          <bgf:expression>
                            <sequence>
                              <bgf:expression>
                                <terminal>[</terminal>
                              </bgf:expression>
                              <bgf:expression>
                                <terminal>]</terminal>
                              </bgf:expression>
                            </sequence>
                          </bgf:expression>
                        </star>
                      </bgf:expression>
                    </marked>
                  </bgf:expression>
                  <bgf:expression>
                    <terminal>.</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>Identifier</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </star>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>TypeArguments</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <star>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>[</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <terminal>]</terminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </star>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:disappear>
  <xbgf:fold>
    <nonterminal>BracketsOpt</nonterminal>
    <in>
      <nonterminal>Type</nonterminal>
    </in>
  </xbgf:fold>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>dotId</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>
  <xbgf:massage>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <star>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <optional>
                    <bgf:expression>
                      <nonterminal>TypeArguments</nonterminal>
                    </bgf:expression>
                  </optional>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>dotId</nonterminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
          </star>
        </bgf:expression>
        <bgf:expression>
          <optional>
            <bgf:expression>
              <nonterminal>TypeArguments</nonterminal>
            </bgf:expression>
          </optional>
        </bgf:expression>
      </sequence>
    </bgf:expression>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <optional>
            <bgf:expression>
              <nonterminal>TypeArguments</nonterminal>
            </bgf:expression>
          </optional>
        </bgf:expression>
        <bgf:expression>
          <star>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <nonterminal>dotId</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <optional>
                    <bgf:expression>
                      <nonterminal>TypeArguments</nonterminal>
                    </bgf:expression>
                  </optional>
                </bgf:expression>
              </sequence>
            </bgf:expression>
          </star>
        </bgf:expression>
      </sequence>
    </bgf:expression>
  </xbgf:massage>
  <xbgf:inline>dotId</xbgf:inline>

  <!--
   - Fail: Type.
      - [], ,([n(QualifiedIdentifier), ?(n(TypeArguments)), *(,([t(.), n(Identifier), ?(n(TypeArguments))])), n(BracketsOpt)])
     vs.
      - [], ,([n(Identifier),          ?(n(TypeArguments)), *(,([t(.), n(Identifier), ?(n(TypeArguments))])), n(BracketsOpt)])
  -->
  <xbgf:unfold>
    <nonterminal>QualifiedIdentifier</nonterminal>
    <in>
      <nonterminal>Type</nonterminal>
    </in>
  </xbgf:unfold>
  <!-- CORRECTION -->
  <xbgf:disappear>
    <bgf:production>
      <nonterminal>Type</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <star>
                  <bgf:expression>
                    <sequence>
                      <bgf:expression>
                        <terminal>.</terminal>
                      </bgf:expression>
                      <bgf:expression>
                        <nonterminal>Identifier</nonterminal>
                      </bgf:expression>
                    </sequence>
                  </bgf:expression>
                </star>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>TypeArguments</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <star>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>.</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>Identifier</nonterminal>
                  </bgf:expression>
                  <bgf:expression>
                    <optional>
                      <bgf:expression>
                        <nonterminal>TypeArguments</nonterminal>
                      </bgf:expression>
                    </optional>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </star>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>BracketsOpt</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:disappear>

</xbgf:sequence>