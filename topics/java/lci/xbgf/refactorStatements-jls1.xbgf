<xbgf:sequence
  xmlns:bgf="http://planet-sl.org/bgf"
  xmlns:xbgf="http://planet-sl.org/xbgf">

  <!-- 
  Mismatches like this 
   - Fail: Statement.
      - [], ,([t(while), t((), n(Expression), t()), n(Statement)])
     vs.
      - [], ,([t(while), n(ParExpression), n(Statement)])
  -->
  <xbgf:extract>
    <bgf:production>
      <nonterminal>ParExpression</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Expression</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>

  <!-- 
   - Fail: SwitchBlockStatementGroups.
      - [], ;([n(SwitchBlockStatementGroup), ,([n(SwitchBlockStatementGroups), n(SwitchBlockStatementGroup)])])
     vs.
      - [], *(n(SwitchBlockStatementGroup))
  -->
  <xbgf:deyaccify>SwitchBlockStatementGroups</xbgf:deyaccify>
  <xbgf:inline>SwitchBlockStatementGroups</xbgf:inline>
  <xbgf:massage>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <plus>
            <bgf:expression>
              <nonterminal>SwitchBlockStatementGroup</nonterminal>
            </bgf:expression>
          </plus>
        </bgf:expression>
      </optional>
    </bgf:expression>
    <bgf:expression>
      <star>
        <bgf:expression>
          <nonterminal>SwitchBlockStatementGroup</nonterminal>
        </bgf:expression>
      </star>
    </bgf:expression>
  </xbgf:massage>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>SwitchBlockStatementGroups</nonterminal>
      <bgf:expression>
        <star>
          <bgf:expression>
            <nonterminal>SwitchBlockStatementGroup</nonterminal>
          </bgf:expression>
        </star>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>

  <!-- ISSUE PERMISSIVENESS
   - Fail: Statement.
      - [], ,([t(switch), n(ParExpression), t({), n(SwitchBlockStatementGroups), ?(n(SwitchLabels)), t(})])
     vs.
      - [], ,([t(switch), n(ParExpression), t({), n(SwitchBlockStatementGroups), t(})])
  -->
  <xbgf:inline>SwitchBlock</xbgf:inline>
  <xbgf:disappear>
    <bgf:production>
      <nonterminal>SwitchStatement</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>switch</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ParExpression</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>{</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>SwitchBlockStatementGroups</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <nonterminal>SwitchLabels</nonterminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <terminal>}</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:disappear>

  <!-- 
   - Fail: Statement.
      - [], n(ForStatement)
      - [], n(WhileStatement)
      - [], n(IfThenElseStatement)
      - [], n(IfThenStatement)
      - [], n(LabeledStatement)
      - [], n(StatementWithoutTrailingSubstatement)
     vs.
      - [], ;([n(Block), ,([t(if), n(ParExpression), n(Statement), ?(,([t(else), n(Statement)]))]), ,([t(for), t((), ?(n(ForInit)), t((;)), ?(n(Expression)), t((;)), ?(n(ForUpdate)), t()), n(Statement)]), ,([t(while), n(ParExpression), n(Statement)]), ,([t(do), n(Statement), t(while), n(ParExpression), t((;))]), ,([t(try), n(Block), n(Catches)]), ,([t(try), n(Block), ?(n(Catches)), t(finally), n(Block)]), ,([t(switch), n(ParExpression), t({), n(SwitchBlockStatementGroups), t(})]), ,([t(synchronized), n(ParExpression), n(Block)]), ,([t(return), ?(n(Expression)), t((;))]), ,([t(throw), n(Expression), t((;))]), ,([t(break), ?(n(Identifier)), t((;))]), ,([t(continue), ?(n(Identifier)), t((;))]), t((;)), n(ExpressionStatement), ,([n(Identifier), t(:), n(Statement)])])
  -->
  <xbgf:inline>ForStatement</xbgf:inline>
  <xbgf:inline>WhileStatement</xbgf:inline>
  <xbgf:inline>IfThenStatement</xbgf:inline>
  <xbgf:inline>IfThenElseStatement</xbgf:inline>
  <xbgf:inline>LabeledStatement</xbgf:inline>
  <xbgf:horizontal>StatementWithoutTrailingSubstatement</xbgf:horizontal>
  <xbgf:inline>StatementWithoutTrailingSubstatement</xbgf:inline>
  <xbgf:horizontal>Statement</xbgf:horizontal>
  <xbgf:inline>EmptyStatement</xbgf:inline>
  <xbgf:inline>SwitchStatement</xbgf:inline>
  <xbgf:inline>DoStatement</xbgf:inline>
  <xbgf:inline>BreakStatement</xbgf:inline>
  <xbgf:inline>ContinueStatement</xbgf:inline>
  <xbgf:inline>ReturnStatement</xbgf:inline>
  <xbgf:inline>SynchronizedStatement</xbgf:inline>
  <xbgf:inline>ThrowStatement</xbgf:inline>
  <xbgf:horizontal>TryStatement</xbgf:horizontal>
  <xbgf:inline>TryStatement</xbgf:inline>
  <xbgf:inline>Finally</xbgf:inline>

  <!-- ISSUE PERMISSIVENESS
   - Fail: Statement.
      - [], ,([t(if), n(ParExpression), n(StatementNoShortIf), t(else), n(Statement)])
      - [], ,([t(if), n(ParExpression), n(Statement)])
     vs.
      - [], ,([t(if), n(ParExpression), n(Statement), ?(,([t(else), n(Statement)]))])
  -->
  <!-- GENERALITY -->
  <xbgf:replace>
    <bgf:expression>
      <nonterminal>StatementNoShortIf</nonterminal>
    </bgf:expression>
    <bgf:expression>
      <nonterminal>Statement</nonterminal>
    </bgf:expression>
    <in>
      <nonterminal>Statement</nonterminal>
    </in>
  </xbgf:replace>
  <xbgf:factor>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>if</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>ParExpression</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Statement</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>else</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Statement</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>if</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>ParExpression</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Statement</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <terminal>if</terminal>
        </bgf:expression>
        <bgf:expression>
          <nonterminal>ParExpression</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <nonterminal>Statement</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <choice>
            <bgf:expression>
              <epsilon/>
            </bgf:expression>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <terminal>else</terminal>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>Statement</nonterminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
          </choice>
        </bgf:expression>
      </sequence>
    </bgf:expression>
  </xbgf:factor>
  <xbgf:massage>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <epsilon/>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>else</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Statement</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>else</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Statement</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </optional>
    </bgf:expression>
  </xbgf:massage>
  <xbgf:vertical>
    <nonterminal>Statement</nonterminal>
  </xbgf:vertical>

  <!-- Getting rid of all of them -->
  <!-- BREFACTOR -->
  <xbgf:undefine>StatementNoShortIf</xbgf:undefine>
  <xbgf:eliminate>ForStatementNoShortIf</xbgf:eliminate>
  <xbgf:eliminate>WhileStatementNoShortIf</xbgf:eliminate>
  <xbgf:eliminate>LabeledStatementNoShortIf</xbgf:eliminate>
  <xbgf:eliminate>IfThenElseStatementNoShortIf</xbgf:eliminate>

  <!-- 
   - Fail: BlockStatements.
      - [], ;([n(BlockStatement), ,([n(BlockStatements), n(BlockStatement)])])
     vs.
      - [], *(n(BlockStatement))
   - Fail: Block.
      - [], ,([t({), ?(n(BlockStatements)), t(})])
     vs.
      - [], ,([t({), n(BlockStatements), t(})])
   ...
  -->
  <xbgf:deyaccify>BlockStatements</xbgf:deyaccify>
  <xbgf:inline>BlockStatements</xbgf:inline>
  <xbgf:massage>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <plus>
            <bgf:expression>
              <nonterminal>BlockStatement</nonterminal>
            </bgf:expression>
          </plus>
        </bgf:expression>
      </optional>
    </bgf:expression>
    <bgf:expression>
      <star>
        <bgf:expression>
          <nonterminal>BlockStatement</nonterminal>
        </bgf:expression>
      </star>
    </bgf:expression>
  </xbgf:massage>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>BlockStatements</nonterminal>
      <bgf:expression>
        <star>
          <bgf:expression>
            <nonterminal>BlockStatement</nonterminal>
          </bgf:expression>
        </star>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>

  <!-- ISSUE EXTEND
   - Fail: BlockStatement.
      - [], ;([n(LocalVariableDeclarationStatement), n(Statement)])
     vs.
      - [], ;([n(LocalVariableDeclarationStatement), n(ClassOrInterfaceDeclaration), ,([?(,([n(Identifier), t(:)])), n(Statement)])])
  -->
  <xbgf:add>
    <vertical>
      <bgf:production>
        <nonterminal>BlockStatement</nonterminal>
        <bgf:expression>
          <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
        </bgf:expression>
      </bgf:production>
    </vertical>
  </xbgf:add>
  <xbgf:appear>
    <bgf:production>
      <nonterminal>BlockStatement</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <sequence>
                      <bgf:expression>
                        <nonterminal>Identifier</nonterminal>
                      </bgf:expression>
                      <bgf:expression>
                        <terminal>:</terminal>
                      </bgf:expression>
                    </sequence>
                  </bgf:expression>
                </optional>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Statement</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:appear>

  <!-- 
   - Fail: ForUpdate.
      - [], n(StatementExpressionList)
     vs.
      - [], ,([n(StatementExpression), n(MoreStatementExpressions)])
   - Fail: ForInit.
      - [], ;([n(StatementExpressionList), n(LocalVariableDeclaration)])
     vs.
      - [], ;([,([n(StatementExpression), n(MoreStatementExpressions)]), ,([?(t(final)), n(Type), n(VariableDeclarators)])])
      
  i.e.
    p([], 'StatementExpressionList', ;([n('StatementExpression'), ','([n('StatementExpressionList'), t((',')), n('StatementExpression')])])),
   vs
    p([], 'MoreStatementExpressions', *(','([t((',')), n('StatementExpression')]))),
  -->
  <xbgf:deyaccify>StatementExpressionList</xbgf:deyaccify>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>MoreStatementExpressions</nonterminal>
      <bgf:expression>
        <star>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <terminal>,</terminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>StatementExpression</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </star>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>
  <xbgf:inline>StatementExpressionList</xbgf:inline>

  <!-- ISSUE EXTEND
   - Fail: ForInit.
      - [], ;([,([n(StatementExpression), n(MoreStatementExpressions)]), n(LocalVariableDeclaration)])
     vs.
      - [], ;([,([n(StatementExpression), n(MoreStatementExpressions)]), ,([?(t(final)), n(Type), n(VariableDeclarators)])])
  -->
  <xbgf:appear>
    <bgf:production>
      <nonterminal>LocalVariableDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <terminal>final</terminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Type</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>VariableDeclarators</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:appear>
  <xbgf:inline>LocalVariableDeclaration</xbgf:inline>

  <!-- 
   - Fail: Catches.
      - [], ;([n(CatchClause), ,([n(Catches), n(CatchClause)])])
     vs.
      - [], +n(CatchClause)
  -->
  <xbgf:deyaccify>Catches</xbgf:deyaccify>

  <!-- 
   - Fail: VariableDeclarators.
      - [], ;([n(VariableDeclarator), ,([n(VariableDeclarators), t((,)), n(VariableDeclarator)])])
     vs.
      - [], ,([n(VariableDeclarator), *(,([t((,)), n(VariableDeclarator)]))])
  -->
  <xbgf:deyaccify>VariableDeclarators</xbgf:deyaccify>

  <!-- 
   - Fail: VariableDeclaratorId.
      - [], ;([n(Identifier), ,([n(VariableDeclaratorId), t([), t(])])])
     vs.
      - [], ,([n(Identifier), n(BracketsOpt)])
  -->
  <xbgf:deyaccify>VariableDeclaratorId</xbgf:deyaccify>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>BracketsOpt</nonterminal>
      <bgf:expression>
        <star>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <terminal>[</terminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>]</terminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </star>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>

  <!-- 
   - Fail: VariableDeclarator.
      - [], ;([n(VariableDeclaratorId), ,([n(VariableDeclaratorId), t(=), n(VariableInitializer)])])
     vs.
      - [], ,([n(Identifier), n(VariableDeclaratorRest)])
      
   with
     p([], 'VariableDeclaratorRest', ','([n('BracketsOpt'), ?(','([t(=), n('VariableInitializer')]))])),
  -->
  <xbgf:horizontal>VariableDeclarator</xbgf:horizontal>
  <xbgf:factor>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <nonterminal>VariableDeclaratorId</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>VariableDeclaratorId</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>=</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>VariableInitializer</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <nonterminal>VariableDeclaratorId</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <choice>
            <bgf:expression>
              <epsilon/>
            </bgf:expression>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <terminal>=</terminal>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>VariableInitializer</nonterminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
          </choice>
        </bgf:expression>
      </sequence>
    </bgf:expression>
  </xbgf:factor>
  <xbgf:massage>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <epsilon/>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>=</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>VariableInitializer</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>=</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>VariableInitializer</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </optional>
    </bgf:expression>
  </xbgf:massage>
  <xbgf:unfold>
    <nonterminal>VariableDeclaratorId</nonterminal>
    <in>
      <nonterminal>VariableDeclarator</nonterminal>
    </in>
  </xbgf:unfold>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>VariableDeclaratorRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>BracketsOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>=</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>VariableInitializer</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>

</xbgf:sequence>
