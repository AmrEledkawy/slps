<xbgf:sequence
  xmlns:bgf="http://planet-sl.org/bgf"
  xmlns:xbgf="http://planet-sl.org/xbgf">

  <!--
   - Fail: InterfaceDeclaration.
      - [], ,([t(interface), n(Identifier), ?(,([t(extends), n(TypeList)])), n(InterfaceBody)])
     vs.
      - [], ,([n(ModifiersOpt), t(interface), n(Identifier), ?(n(ExtendsInterfaces)), n(InterfaceBody)])
  -->
  <xbgf:deyaccify>ExtendsInterfaces</xbgf:deyaccify>
  <xbgf:fold>
    <nonterminal>TypeList</nonterminal>
    <in>
      <nonterminal>ExtendsInterfaces</nonterminal>
    </in>
  </xbgf:fold>
  <xbgf:project>
    <bgf:production>
      <nonterminal>InterfaceDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>interface</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ExtendsInterfaces</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>InterfaceBody</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:project>
  <xbgf:inline>ExtendsInterfaces</xbgf:inline>

  <!--
   - Fail: InterfaceBody.
      - [], ,([t({), *(n(InterfaceBodyDeclaration)), t(})])
     vs.
      - [], ,([t({), ?(n(InterfaceMemberDeclarations)), t(})])
  -->
  <xbgf:deyaccify>InterfaceMemberDeclarations</xbgf:deyaccify>
  <xbgf:inline>InterfaceMemberDeclarations</xbgf:inline>
  <xbgf:rename>
    <nonterminal>
      <from>InterfaceMemberDeclaration</from>
      <to>InterfaceBodyDeclaration</to>
    </nonterminal>
  </xbgf:rename>
  <xbgf:massage>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <plus>
            <bgf:expression>
              <nonterminal>InterfaceBodyDeclaration</nonterminal>
            </bgf:expression>
          </plus>
        </bgf:expression>
      </optional>
    </bgf:expression>
    <bgf:expression>
      <star>
        <bgf:expression>
          <nonterminal>InterfaceBodyDeclaration</nonterminal>
        </bgf:expression>
      </star>
    </bgf:expression>
  </xbgf:massage>

  <!--
   - Fail: InterfaceBodyDeclaration.
      - [], ;([t((;)), ,([n(ModifiersOpt), n(InterfaceMemberDecl)])])
     vs.
      - [], ;([n(ConstantDeclaration), n(AbstractMethodDeclaration), n(ClassOrInterfaceDeclaration), t((;))])
  -->
  <xbgf:inline>ConstantDeclaration</xbgf:inline>
  <xbgf:inline>AbstractMethodDeclaration</xbgf:inline>

  <!--
  - Fail: VariableDeclaratorId.
      - [], ,([n(Identifier), n(BracketsOpt)])
     vs.
      - [], ;([n(Identifier), ,([n(VariableDeclaratorId), t([), t(])])])
   - Fail: VariableDeclarator.
      - [], ,([n(Identifier), n(VariableDeclaratorRest)])
     vs.
      - [], ;([n(VariableDeclaratorId), ,([n(VariableDeclaratorId), t(=), n(VariableInitializer)])])
   -->
  <xbgf:deyaccify>VariableDeclaratorId</xbgf:deyaccify>
  <xbgf:fold>
    <nonterminal>BracketsOpt</nonterminal>
  </xbgf:fold>
  <!-- Need a smart operation here instead of this ugly thing -->
  <xbgf:replace>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <nonterminal>VariableDeclaratorId</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>VariableDeclaratorId</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>=</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>VariableInitializer</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <nonterminal>VariableDeclaratorId</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <optional>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <terminal>=</terminal>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>VariableInitializer</nonterminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
          </optional>
        </bgf:expression>
      </sequence>
    </bgf:expression>
  </xbgf:replace>
  <xbgf:unfold>
    <nonterminal>VariableDeclaratorId</nonterminal>
    <in>
      <nonterminal>VariableDeclarator</nonterminal>
    </in>
  </xbgf:unfold>
  <xbgf:fold>
    <nonterminal>VariableDeclaratorRest</nonterminal>
  </xbgf:fold>
  <!-- end of ugly thing -->

  <!--
   - Fail: CompilationUnit.
      - [], ,([?(,([t(package), n(QualifiedIdentifier), t((;))])), *(n(ImportDeclaration)), *(n(TypeDeclaration))])
     vs.
      - [], ,([?(n(PackageDeclaration)), ?(n(ImportDeclarations)), ?(n(TypeDeclarations))])
  -->
  <xbgf:inline>PackageDeclaration</xbgf:inline>
  <xbgf:deyaccify>ImportDeclarations</xbgf:deyaccify>
  <xbgf:inline>ImportDeclarations</xbgf:inline>
  <xbgf:massage>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <plus>
            <bgf:expression>
              <nonterminal>ImportDeclaration</nonterminal>
            </bgf:expression>
          </plus>
        </bgf:expression>
      </optional>
    </bgf:expression>
    <bgf:expression>
      <star>
        <bgf:expression>
          <nonterminal>ImportDeclaration</nonterminal>
        </bgf:expression>
      </star>
    </bgf:expression>
  </xbgf:massage>
  <xbgf:deyaccify>TypeDeclarations</xbgf:deyaccify>
  <xbgf:inline>TypeDeclarations</xbgf:inline>
  <xbgf:massage>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <plus>
            <bgf:expression>
              <nonterminal>TypeDeclaration</nonterminal>
            </bgf:expression>
          </plus>
        </bgf:expression>
      </optional>
    </bgf:expression>
    <bgf:expression>
      <star>
        <bgf:expression>
          <nonterminal>TypeDeclaration</nonterminal>
        </bgf:expression>
      </star>
    </bgf:expression>
  </xbgf:massage>

  <!--
   - Fail: ImportDeclaration.
      - [], ,([t(import), n(Identifier), *(,([t(.), n(Identifier)])), ?(,([t(.), t(*)])), t((;))])
     vs.
      - [], ;([n(SingleTypeImportDeclaration), n(TypeImportOnDemandDeclaration)])
  -->
  <xbgf:inline>SingleTypeImportDeclaration</xbgf:inline>
  <xbgf:inline>TypeImportOnDemandDeclaration</xbgf:inline>
  <!--
   - Fail: ImportDeclaration.
      - [], ,([t(import), n(QualifiedIdentifier), ?(,([t(.), t(*)])), t((;))])
     vs.
      - [], ;([,([t(import), n(QualifiedIdentifier), t((;))]),
               ,([t(import), n(QualifiedIdentifier), t(.), t(*), t((;))])])
  -->
  <!-- Need a smart "fold-ebnf" operation here, really -->
  <!-- What follows is a straightforward replacement -->
  <xbgf:vertical>
    <nonterminal>ImportDeclaration</nonterminal>
  </xbgf:vertical>
  <xbgf:remove>
    <bgf:production>
      <nonterminal>ImportDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>import</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>QualifiedIdentifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>*</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:remove>
  <xbgf:inject>
    <bgf:production>
      <nonterminal>ImportDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>import</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>QualifiedIdentifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>.</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <terminal>*</terminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>
  <!-- End of substitute -->
  
  <!--
   - Fail: InterfaceBodyDeclaration.
      - [], ;([t((;)),
             ,([n(ModifiersOpt), n(InterfaceMemberDecl)])])
     vs.
      - [], ;([,([n(ModifiersOpt), n(Type), n(VariableDeclarators)]),
               ,([n(ModifiersOpt), n(ResultType), n(MethodDeclarator), ?(n(Throws)), t((;))]),
               n(ClassOrInterfaceDeclaration),
               t((;))])
               
  Solved brutally for now
  -->
  <xbgf:undefine>InterfaceBodyDeclaration</xbgf:undefine>
  <xbgf:define>
    <bgf:production>
      <nonterminal>InterfaceBodyDeclaration</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>ModifiersOpt</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>InterfaceMemberDecl</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  <xbgf:define>
    <bgf:production>
      <nonterminal>InterfaceMemberDecl</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <nonterminal>InterfaceMethodOrFieldDecl</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <terminal>void</terminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>Identifier</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>VoidInterfaceMethodDeclaratorRest</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>

  <!-- ArgumentList -->
  <xbgf:deyaccify>ArgumentList</xbgf:deyaccify>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>Arguments</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ArgumentList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>
  <xbgf:inline>ArgumentList</xbgf:inline>
  
  
</xbgf:sequence>