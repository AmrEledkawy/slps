<?xml version="1.0"?>
<xbgf:sequence
  xmlns:bgf="http://planet-sl.org/bgf"
  xmlns:xbgf="http://planet-sl.org/xbgf">

  <!--
   - Fail: ConstructorDeclaratorRest.
      - [], ,([n(FormalParameters), ?(,([t(throws), n(QualifiedIdentifierList)])), n(MethodBody)])
     vs.
      - [], ,([t((), ?(n(FormalParameterDecls)), t()), ?(,([t(throws), n(QualifiedIdentifierList)])), n(MethodBody)])
-->
  <xbgf:inline>FormalParameters</xbgf:inline>

  <!-- ISSUE EXTEND
   - Fail: ImportDeclaration.
      - [], ,([t(import),               n(QualifiedIdentifier),                     ?(,([t(.), t(*)])), t((;))])
     vs.
      - [], ,([t(import), ?(t(static)), n(Identifier), *(,([t(.), n(Identifier)])), ?(,([t(.), t(*)])), t((;))])
  -->
  <xbgf:unfold>
    <nonterminal>QualifiedIdentifier</nonterminal>
    <in>
      <nonterminal>ImportDeclaration</nonterminal>
    </in>
  </xbgf:unfold>
  <!-- EXTENSION -->
  <xbgf:appear>
    <bgf:production>
      <nonterminal>ImportDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>import</terminal>
          </bgf:expression>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <terminal>static</terminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <star>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>.</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>Identifier</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </star>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>.</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <terminal>*</terminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:appear>
  <xbgf:unfold>
    <nonterminal>ModifiersOpt</nonterminal>
    <in>
      <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
    </in>
  </xbgf:unfold>
  <!-- RELAXATION -->
  <xbgf:disappear>
    <bgf:production>
      <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <star>
                  <bgf:expression>
                    <nonterminal>Modifier</nonterminal>
                  </bgf:expression>
                </star>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <choice>
              <bgf:expression>
                <nonterminal>ClassDeclaration</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>InterfaceDeclaration</nonterminal>
              </bgf:expression>
            </choice>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:disappear>
  <xbgf:unfold>
    <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
  </xbgf:unfold>

  <!--
   - Fail: TypeDeclaration.
      - [], ;([n(ClassDeclaration), n(InterfaceDeclaration)])
     vs.
      - [], n(ClassOrInterfaceDeclaration)
  -->
  <xbgf:fold>
    <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
    <in>
      <nonterminal>TypeDeclaration</nonterminal>
    </in>
  </xbgf:fold>
  <xbgf:fold>
    <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
    <in>
      <nonterminal>BlockStatement</nonterminal>
    </in>
  </xbgf:fold>
  <!-- return ClassOrInterfaceDeclaration to its original form -->
  <!-- RELAXATION -->
  <xbgf:appear>
    <bgf:production>
      <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <star>
                  <bgf:expression>
                    <nonterminal>Modifier</nonterminal>
                  </bgf:expression>
                </star>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <choice>
              <bgf:expression>
                <nonterminal>ClassDeclaration</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>InterfaceDeclaration</nonterminal>
              </bgf:expression>
            </choice>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:appear>
  <xbgf:fold>
    <nonterminal>ModifiersOpt</nonterminal>
    <in>
      <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
    </in>
  </xbgf:fold>

  <!-- ISSUE EXTEND
   - Fail: IdentifierSuffix.
      - [], ,([t(.), ;([t(class),                               t(this), ,([t(super), n(Arguments)]), ,([t(new),                                 n(InnerCreator)])])])
     vs.
      - [], ,([t(.), ;([t(class), n(ExplicitGenericInvocation), t(this), ,([t(super), n(Arguments)]), ,([t(new), ?(n(NonWildcardTypeArguments)), n(InnerCreator)])])])
  -->
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>NonWildcardTypeArguments</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>&lt;</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>TypeList</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>&gt;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>ExplicitGenericInvocationSuffix</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>super</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>SuperSuffix</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>ExplicitGenericInvocationSuffix</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Arguments</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>ExplicitGenericInvocation</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>NonWildcardTypeArguments</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ExplicitGenericInvocationSuffix</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>

  <!-- EXTENSION -->
  <xbgf:add>
    <horizontal>
      <bgf:production>
        <nonterminal>IdentifierSuffix</nonterminal>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>.</terminal>
            </bgf:expression>
            <bgf:expression>
              <choice>
                <bgf:expression>
                  <marked>
                    <bgf:expression>
                      <nonterminal>ExplicitGenericInvocation</nonterminal>
                    </bgf:expression>
                  </marked>
                </bgf:expression>
                <bgf:expression>
                  <terminal>class</terminal>
                </bgf:expression>
                <bgf:expression>
                  <terminal>this</terminal>
                </bgf:expression>
                <bgf:expression>
                  <sequence>
                    <bgf:expression>
                      <terminal>super</terminal>
                    </bgf:expression>
                    <bgf:expression>
                      <nonterminal>Arguments</nonterminal>
                    </bgf:expression>
                  </sequence>
                </bgf:expression>
                <bgf:expression>
                  <sequence>
                    <bgf:expression>
                      <terminal>new</terminal>
                    </bgf:expression>
                    <bgf:expression>
                      <nonterminal>InnerCreator</nonterminal>
                    </bgf:expression>
                  </sequence>
                </bgf:expression>
              </choice>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </bgf:production>
    </horizontal>
  </xbgf:add>
  <!-- EXTENSION -->
  <xbgf:appear>
    <bgf:production>
      <nonterminal>IdentifierSuffix</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <choice>
              <bgf:expression>
                <terminal>class</terminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>ExplicitGenericInvocation</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>this</terminal>
              </bgf:expression>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>super</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>Arguments</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>new</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <marked>
                      <bgf:expression>
                        <optional>
                          <bgf:expression>
                            <nonterminal>NonWildcardTypeArguments</nonterminal>
                          </bgf:expression>
                        </optional>
                      </bgf:expression>
                    </marked>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>InnerCreator</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </choice>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:appear>

  <!-- extendWithAnnotations.xbgf -->
  <!-- extendClassDeclarations.xbgf -->
  <!-- extendInterfaceDeclarations.xbgf -->
  <!-- extendWithTypeArguments.xbgf -->

</xbgf:sequence>