<?xml version="1.0"?>
<xbgf:sequence
  xmlns:bgf="http://planet-sl.org/bgf"
  xmlns:xbgf="http://planet-sl.org/xbgf">

  <!--  ISSUE EXTEND
  new feature: annotations! -->
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>ElementValue</nonterminal>
      <bgf:expression>
        <nonterminal>Expression1</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>ElementValueArrayInitializer</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>{</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <nonterminal>ElementValue</nonterminal>
                  </bgf:expression>
                  <bgf:expression>
                    <optional>
                      <bgf:expression>
                        <sequence>
                          <bgf:expression>
                            <terminal>,</terminal>
                          </bgf:expression>
                          <bgf:expression>
                            <nonterminal>ElementValues</nonterminal>
                          </bgf:expression>
                        </sequence>
                      </bgf:expression>
                    </optional>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <terminal>,</terminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>}</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:add>
    <bgf:production>
      <nonterminal>ElementValue</nonterminal>
      <bgf:expression>
        <nonterminal>ElementValueArrayInitializer</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>ElementValues</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ElementValue</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>,</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>ElementValues</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>Annotation</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>@</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>QualifiedIdentifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>(</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <optional>
                      <bgf:expression>
                        <sequence>
                          <bgf:expression>
                            <nonterminal>Identifier</nonterminal>
                          </bgf:expression>
                          <bgf:expression>
                            <terminal>=</terminal>
                          </bgf:expression>
                        </sequence>
                      </bgf:expression>
                    </optional>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>ElementValue</nonterminal>
                  </bgf:expression>
                  <bgf:expression>
                    <terminal>)</terminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:add>
    <bgf:production>
      <nonterminal>ElementValue</nonterminal>
      <bgf:expression>
        <nonterminal>Annotation</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:add>
    <bgf:production>
      <nonterminal>Modifier</nonterminal>
      <bgf:expression>
        <nonterminal>Annotation</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>Annotations</nonterminal>
      <bgf:expression>
        <plus>
          <bgf:expression>
            <nonterminal>Annotation</nonterminal>
          </bgf:expression>
        </plus>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>

  <!-- ISSUE EXTEND
  new feature: enumerations! -->
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>EnumConstant</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Annotations</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>Arguments</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ClassBody</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>EnumConstants</nonterminal>
      <bgf:expression>
        <nonterminal>EnumConstant</nonterminal>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>EnumConstants</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>EnumConstants</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>,</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>EnumConstant</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>EnumBodyDeclarations</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
          <bgf:expression>
            <star>
              <bgf:expression>
                <nonterminal>ClassBodyDeclaration</nonterminal>
              </bgf:expression>
            </star>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>EnumBody</nonterminal>
      <bgf:expression>
        <star>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <nonterminal>EnumConstants</nonterminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <terminal>,</terminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <nonterminal>EnumBodyDeclarations</nonterminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </star>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>EnumDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>enum</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>implements</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>TypeList</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>EnumBody</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:chain>
    <bgf:production>
      <nonterminal>ClassDeclaration</nonterminal>
      <bgf:expression>
        <nonterminal>NormalClassDeclaration</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:chain>
  <xbgf:add>
    <bgf:production>
      <nonterminal>ClassDeclaration</nonterminal>
      <bgf:expression>
        <nonterminal>EnumDeclaration</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>EnumConstantName</nonterminal>
      <bgf:expression>
        <nonterminal>Identifier</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:add>
    <bgf:production>
      <nonterminal>SwitchLabel</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>case</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>EnumConstantName</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>:</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>

  <!-- ISSUE EXTEND
  annotated declarations -->
  <xbgf:chain>
    <bgf:production>
      <nonterminal>InterfaceDeclaration</nonterminal>
      <bgf:expression>
        <nonterminal>NormalInterfaceDeclaration</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:chain>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>DefaultValue</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>default</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ElementValue</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>AnnotationMethodRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>DefaultValue</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>AnnotationConstantRest</nonterminal>
      <bgf:expression>
        <nonterminal>VariableDeclarators</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>AnnotationMethodOrConstantRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>AnnotationMethodRest</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>AnnotationMethodOrConstantRest</nonterminal>
      <bgf:expression>
        <nonterminal>AnnotationConstantRest</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>AnnotationTypeElementRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Type</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>AnnotationMethodOrConstantRest</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>AnnotationTypeElementRest</nonterminal>
      <bgf:expression>
        <nonterminal>ClassDeclaration</nonterminal>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>AnnotationTypeElementRest</nonterminal>
      <bgf:expression>
        <nonterminal>InterfaceDeclaration</nonterminal>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>AnnotationTypeElementRest</nonterminal>
      <bgf:expression>
        <nonterminal>EnumDeclaration</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>AnnotationTypeElementDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ModifiersOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>AnnotationTypeElementRest</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>AnnotationTypeElementDeclarations</nonterminal>
      <bgf:expression>
        <nonterminal>AnnotationTypeElementDeclaration</nonterminal>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>AnnotationTypeElementDeclarations</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>AnnotationTypeElementDeclarations</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>AnnotationTypeElementDeclaration</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>AnnotationTypeBody</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>{</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>AnnotationTypeElementDeclarations</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>}</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>AnnotationTypeDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>@</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>interface</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>AnnotationTypeBody</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:add>
    <bgf:production>
      <nonterminal>InterfaceDeclaration</nonterminal>
      <bgf:expression>
        <nonterminal>AnnotationTypeDeclaration</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:add>
    <bgf:production>
      <nonterminal>AnnotationTypeElementRest</nonterminal>
      <bgf:expression>
        <nonterminal>AnnotationTypeDeclaration</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>

  <!--
   - Fail: ConstructorDeclaratorRest.
      - [], ,([n(FormalParameters), ?(,([t(throws), n(QualifiedIdentifierList)])), n(MethodBody)])
     vs.
      - [], ,([t((), ?(n(FormalParameterDecls)), t()), ?(,([t(throws), n(QualifiedIdentifierList)])), n(MethodBody)])
-->
  <xbgf:inline>FormalParameters</xbgf:inline>

  <!-- ISSUE EXTEND
   - Fail: NormalClassDeclaration.
      - [], ,([t(class), n(Identifier),                       ?(,([t(extends), n(Type)])), ?(,([t(implements), n(TypeList)])), n(ClassBody)])
     vs.
      - [], ,([t(class), n(Identifier), ?(n(TypeParameters)), ?(,([t(extends), n(Type)])), ?(,([t(implements), n(TypeList)])), n(ClassBody)])
  -->
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>Bound</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Type</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <star>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>&#38;</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>Type</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </star>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>TypeParameter</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>extends</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>Bound</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>TypeParameters</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>&lt;</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>TypeParameter</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <star>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>,</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>TypeParameter</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </star>
          </bgf:expression>
          <bgf:expression>
            <terminal>&gt;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:appear>
    <bgf:production>
      <nonterminal>NormalClassDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>class</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <nonterminal>TypeParameters</nonterminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>extends</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>Type</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>implements</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>TypeList</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ClassBody</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:appear>

  <!--
   - Fail: CompilationUnit.
      - [], ,([?(,([                   t(package), n(QualifiedIdentifier), t((;))])), *(n(ImportDeclaration)), *(n(TypeDeclaration))])
     vs.
      - [], ,([?(,([?(n(Annotations)), t(package), n(QualifiedIdentifier), t((;))])), *(n(ImportDeclaration)), *(n(TypeDeclaration))])
  -->
  <xbgf:appear>
    <bgf:production>
      <nonterminal>CompilationUnit</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <marked>
                      <bgf:expression>
                        <optional>
                          <bgf:expression>
                            <nonterminal>Annotations</nonterminal>
                          </bgf:expression>
                        </optional>
                      </bgf:expression>
                    </marked>
                  </bgf:expression>
                  <bgf:expression>
                    <terminal>package</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>QualifiedIdentifier</nonterminal>
                  </bgf:expression>
                  <bgf:expression>
                    <terminal>;</terminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <star>
              <bgf:expression>
                <nonterminal>ImportDeclaration</nonterminal>
              </bgf:expression>
            </star>
          </bgf:expression>
          <bgf:expression>
            <star>
              <bgf:expression>
                <nonterminal>TypeDeclaration</nonterminal>
              </bgf:expression>
            </star>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:appear>

  <!-- ISSUE EXTEND
   - Fail: ImportDeclaration.
      - [], ,([t(import),               n(QualifiedIdentifier),                     ?(,([t(.), t(*)])), t((;))])
     vs.
      - [], ,([t(import), ?(t(static)), n(Identifier), *(,([t(.), n(Identifier)])), ?(,([t(.), t(*)])), t((;))])
  -->
  <xbgf:unfold>
    <nonterminal>QualifiedIdentifier</nonterminal>
    <in>
      <nonterminal>ImportDeclaration</nonterminal>
    </in>
  </xbgf:unfold>
  <xbgf:appear>
    <bgf:production>
      <nonterminal>ImportDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>import</terminal>
          </bgf:expression>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <terminal>static</terminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <star>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>.</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>Identifier</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </star>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>.</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <terminal>*</terminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:appear>

  <!-- ISSUE EXTEND
   - Fail: NormalInterfaceDeclaration.
      - [], ,([t(interface), n(Identifier),                       ?(,([t(extends), n(TypeList)])), n(InterfaceBody)])
     vs.
      - [], ,([t(interface), n(Identifier), ?(n(TypeParameters)), ?(,([t(extends), n(TypeList)])), n(InterfaceBody)])
  -->
  <xbgf:appear>
    <bgf:production>
      <nonterminal>NormalInterfaceDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>interface</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <nonterminal>TypeParameters</nonterminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>extends</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>TypeList</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>InterfaceBody</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:appear>

  <!--
   - Fail: Type.
      - [], ,([n(QualifiedIdentifier), n(BracketsOpt)])
     vs.
      - [], ,([n(Identifier), ?(n(TypeArguments)), *(,([t(.), n(Identifier), ?(n(TypeArguments))])), n(BracketsOpt)])
  -->
  <xbgf:unfold>
    <nonterminal>QualifiedIdentifier</nonterminal>
    <in>
      <nonterminal>Type</nonterminal>
    </in>
  </xbgf:unfold>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>TypeArgument</nonterminal>
      <bgf:expression>
        <nonterminal>Type</nonterminal>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>TypeArgument</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>?</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <choice>
                      <bgf:expression>
                        <terminal>extends</terminal>
                      </bgf:expression>
                      <bgf:expression>
                        <terminal>super</terminal>
                      </bgf:expression>
                    </choice>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>Type</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>TypeArguments</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>&lt;</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>TypeArgument</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <star>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>,</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>TypeArgument</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </star>
          </bgf:expression>
          <bgf:expression>
            <terminal>&gt;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:appear>
    <bgf:production>
      <nonterminal>Type</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <nonterminal>TypeArguments</nonterminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <star>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>.</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>Identifier</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </star>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>BracketsOpt</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:appear>
  <xbgf:appear>
    <bgf:production>
      <nonterminal>Type</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>TypeArguments</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <star>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>.</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>Identifier</nonterminal>
                  </bgf:expression>
                  <bgf:expression>
                    <marked>
                      <bgf:expression>
                        <optional>
                          <bgf:expression>
                            <nonterminal>TypeArguments</nonterminal>
                          </bgf:expression>
                        </optional>
                      </bgf:expression>
                    </marked>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </star>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>BracketsOpt</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:appear>

  <!--
   - Fail: InterfaceBodyDeclaration.
      - [], ,([n(ModifiersOpt), n(InterfaceMemberDecl)])
     vs.
      - [], ,([n(ModifiersOpt), n(ClassDeclaration)])
      - [], ,([n(ModifiersOpt), n(InterfaceDeclaration)])
      - [], ,([n(ModifiersOpt), t(void), n(Identifier), t((), ?(n(FormalParameterDecls)), t()), ?(,([t(throws), n(QualifiedIdentifierList)])), t((;))])
      - [], ,([n(ModifiersOpt), n(TypeParameters), t(void), n(Identifier), t((), ?(n(FormalParameterDecls)), t()), n(BracketsOpt), ?(,([t(throws), n(QualifiedIdentifierList)])), t((;))])
      - [], ,([n(ModifiersOpt), n(TypeParameters), n(Type), n(Identifier), t((), ?(n(FormalParameterDecls)), t()), n(BracketsOpt), ?(,([t(throws), n(QualifiedIdentifierList)])), t((;))])
      - [], ,([n(ModifiersOpt), n(Type), n(Identifier), t((), ?(n(FormalParameterDecls)), t()), n(BracketsOpt), ?(,([t(throws), n(QualifiedIdentifierList)])), t((;))])
      - [], ,([n(ModifiersOpt), n(Type), n(Identifier), n(ConstantDeclaratorRest), *(,([t((,)), n(ConstantDeclarator)])), t((;))])
  -->
  <xbgf:horizontal>InterfaceMemberDecl</xbgf:horizontal>
  <xbgf:inline>InterfaceMemberDecl</xbgf:inline>
  <xbgf:unfold>
    <nonterminal>ModifiersOpt</nonterminal>
    <in>
      <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
    </in>
  </xbgf:unfold>
  <xbgf:disappear>
    <bgf:production>
      <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <star>
                  <bgf:expression>
                    <nonterminal>Modifier</nonterminal>
                  </bgf:expression>
                </star>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <choice>
              <bgf:expression>
                <nonterminal>ClassDeclaration</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>InterfaceDeclaration</nonterminal>
              </bgf:expression>
            </choice>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:disappear>
  <xbgf:unfold>
    <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
  </xbgf:unfold>
  <xbgf:inline>InterfaceMethodOrFieldDecl</xbgf:inline>
  <xbgf:inline>VoidInterfaceMethodDeclaratorRest</xbgf:inline>
  <xbgf:horizontal>InterfaceMethodOrFieldRest</xbgf:horizontal>
  <xbgf:inline>InterfaceMethodOrFieldRest</xbgf:inline>
  <xbgf:inline>InterfaceMethodDeclaratorRest</xbgf:inline>
  <xbgf:inline>ConstantDeclaratorsRest</xbgf:inline>
  <xbgf:distribute>
    <nonterminal>InterfaceBodyDeclaration</nonterminal>
  </xbgf:distribute>
  <xbgf:vertical>
    <nonterminal>InterfaceBodyDeclaration</nonterminal>
  </xbgf:vertical>

  <!--
   - Fail: InterfaceBodyDeclaration.
      - [], ,([n(ModifiersOpt), t(void), n(Identifier), t((), ?(,([n(FormalParameter), *(,([t((,)), n(FormalParameter)]))])), t()), n(BracketsOpt), ?(,([t(throws), n(QualifiedIdentifierList)])), t((;))])
     vs.
      - [], ,([n(ModifiersOpt), t(void), n(Identifier), t((), ?(n(FormalParameterDecls)), t()), ?(,([t(throws), n(QualifiedIdentifierList)])), t((;))])
  -->
  <xbgf:extract>
    <bgf:production>
      <nonterminal>FormalParameterDecls</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>FormalParameter</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <star>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>,</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>FormalParameter</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </star>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>
  <xbgf:unfold>
    <nonterminal>BracketsOpt</nonterminal>
    <in>
      <nonterminal>InterfaceBodyDeclaration</nonterminal>
    </in>
  </xbgf:unfold>
  <xbgf:disappear>
    <bgf:production>
      <nonterminal>InterfaceBodyDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ModifiersOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>void</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>FormalParameterDecls</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <star>
                  <bgf:expression>
                    <sequence>
                      <bgf:expression>
                        <terminal>[</terminal>
                      </bgf:expression>
                      <bgf:expression>
                        <terminal>]</terminal>
                      </bgf:expression>
                    </sequence>
                  </bgf:expression>
                </star>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>throws</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>QualifiedIdentifierList</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:disappear>
  <xbgf:fold>
    <nonterminal>BracketsOpt</nonterminal>
    <in>
      <nonterminal>InterfaceBodyDeclaration</nonterminal>
    </in>
  </xbgf:fold>

  <!-- ISSUE EXTEND
   - Fail: InterfaceBodyDeclaration.
     vs.
      - [], ,([n(ModifiersOpt), n(TypeParameters), t(void), n(Identifier), t((), ?(n(FormalParameterDecls)), t()), n(BracketsOpt), ?(,([t(throws), n(QualifiedIdentifierList)])), t((;))])
      - [], ,([n(ModifiersOpt), n(TypeParameters), n(Type), n(Identifier), t((), ?(n(FormalParameterDecls)), t()), n(BracketsOpt), ?(,([t(throws), n(QualifiedIdentifierList)])), t((;))])
  -->
  <xbgf:add>
    <bgf:production>
      <nonterminal>InterfaceBodyDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ModifiersOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>TypeParameters</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Type</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>FormalParameterDecls</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>BracketsOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>throws</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>QualifiedIdentifierList</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:add>
    <bgf:production>
      <nonterminal>InterfaceBodyDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ModifiersOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>TypeParameters</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>void</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>FormalParameterDecls</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>BracketsOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>throws</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>QualifiedIdentifierList</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>

  <!--
   - Fail: TypeDeclaration.
      - [], ;([n(ClassDeclaration), n(InterfaceDeclaration)])
     vs.
      - [], n(ClassOrInterfaceDeclaration)
  -->
  <xbgf:fold>
    <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
    <in>
      <nonterminal>TypeDeclaration</nonterminal>
    </in>
  </xbgf:fold>
  <xbgf:fold>
    <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
    <in>
      <nonterminal>BlockStatement</nonterminal>
    </in>
  </xbgf:fold>

  <!-- ISSUE PERMISSIVENESS
   - Fail: FormalParameterDecls.
      - [], ,([n(FormalParameter), *(,([t((,)), n(FormalParameter)]))])
     vs.
      - [], ?(,([t(final), ?(n(Annotations)), n(Type), n(FormalParameterDeclsRest)]))
  -->
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>FormalParameterDeclsRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>VariableDeclaratorId</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>,</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>FormalParameterDecls</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>FormalParameterDeclsRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>...</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>VariableDeclaratorId</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <!-- REVISE -->
  <xbgf:redefine>
    <bgf:production>
      <nonterminal>FormalParameterDecls</nonterminal>
      <bgf:expression>
        <optional>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <terminal>final</terminal>
              </bgf:expression>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <nonterminal>Annotations</nonterminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>Type</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>FormalParameterDeclsRest</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </optional>
      </bgf:expression>
    </bgf:production>
  </xbgf:redefine>

  <!-- ISSUE PERMISSIVENESS
  (LocalVariableDeclaration as ForInit -> is a part of ForVarControl)
   - Fail: ForInit.
      - [], ,([?(t(final)), n(Type), n(VariableDeclarators)])
  -->
  <xbgf:remove>
    <bgf:production>
      <nonterminal>ForInit</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <terminal>final</terminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Type</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>VariableDeclarators</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:remove>

  <!--
   - Fail: ClassBodyDeclaration.
      - [], ,([n(ModifiersOpt), ;([n(ClassDeclaration), n(InterfaceDeclaration)])])
      - [], ,([n(ModifiersOpt), n(Identifier), n(ConstructorDeclaratorRest)])
      - [], ,([n(ModifiersOpt), t(void), n(Identifier), n(MethodDeclaratorRest)])
      - [], ,([n(ModifiersOpt), n(MethodOrFieldDecl)])
     vs.
      - [], ,([n(ModifiersOpt), n(MemberDecl)])
  -->
  <!-- TODO! should be a better way -->
  <xbgf:horizontal>ClassBodyDeclaration</xbgf:horizontal>
  <xbgf:distribute>
    <nonterminal>ClassBodyDeclaration</nonterminal>
  </xbgf:distribute>
  <xbgf:factor>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>ModifiersOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>MethodOrFieldDecl</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>ModifiersOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>void</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Identifier</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>MethodDeclaratorRest</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>ModifiersOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Identifier</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>ConstructorDeclaratorRest</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>ModifiersOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>ClassDeclaration</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>ModifiersOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>InterfaceDeclaration</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <nonterminal>ModifiersOpt</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <choice>
            <bgf:expression>
              <nonterminal>MethodOrFieldDecl</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <terminal>void</terminal>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>Identifier</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>MethodDeclaratorRest</nonterminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <nonterminal>Identifier</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>ConstructorDeclaratorRest</nonterminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>ClassDeclaration</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>InterfaceDeclaration</nonterminal>
            </bgf:expression>
          </choice>
        </bgf:expression>
      </sequence>
    </bgf:expression>
  </xbgf:factor>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>MemberDecl</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <nonterminal>MethodOrFieldDecl</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <terminal>void</terminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>Identifier</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>MethodDeclaratorRest</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>Identifier</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>ConstructorDeclaratorRest</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ClassDeclaration</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>InterfaceDeclaration</nonterminal>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>
  <xbgf:vertical>
    <nonterminal>ClassBodyDeclaration</nonterminal>
  </xbgf:vertical>
  <xbgf:vertical>
    <nonterminal>MemberDecl</nonterminal>
  </xbgf:vertical>

  <!-- ISSUE EXTEND
   - Fail: MemberDecl.
      - [], ,([t(void), n(Identifier), n(MethodDeclaratorRest)])
     vs.
      - [], ,([t(void), n(Identifier), n(VoidMethodDeclaratorRest)])
      - [], n(GenericMethodOrConstructorDecl)
  -->
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>VoidMethodDeclaratorRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>FormalParameterDecls</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>throws</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>QualifiedIdentifierList</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <choice>
              <bgf:expression>
                <nonterminal>MethodBody</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>;</terminal>
              </bgf:expression>
            </choice>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <!-- BREFACTOR local rename -->
  <xbgf:replace>
    <bgf:expression>
      <nonterminal>MethodDeclaratorRest</nonterminal>
    </bgf:expression>
    <bgf:expression>
      <nonterminal>VoidMethodDeclaratorRest</nonterminal>
    </bgf:expression>
    <in>
      <nonterminal>MemberDecl</nonterminal>
    </in>
  </xbgf:replace>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>GenericMethodOrConstructorRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <choice>
              <bgf:expression>
                <nonterminal>Type</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>void</terminal>
              </bgf:expression>
            </choice>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>MethodDeclaratorRest</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>GenericMethodOrConstructorRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ConstructorDeclaratorRest</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>GenericMethodOrConstructorDecl</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>TypeParameters</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>GenericMethodOrConstructorRest</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:add>
    <bgf:production>
      <nonterminal>MemberDecl</nonterminal>
      <bgf:expression>
        <nonterminal>GenericMethodOrConstructorDecl</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>

  <!-- ISSUE EXTEND
   - Fail: IdentifierSuffix.
      - [], ,([t(.), ;([t(class),                               t(this), ,([t(super), n(Arguments)]), ,([t(new),                                 n(InnerCreator)])])])
     vs.
      - [], ,([t(.), ;([t(class), n(ExplicitGenericInvocation), t(this), ,([t(super), n(Arguments)]), ,([t(new), ?(n(NonWildcardTypeArguments)), n(InnerCreator)])])])
  -->
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>NonWildcardTypeArguments</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>&lt;</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>TypeList</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>&gt;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>ExplicitGenericInvocationSuffix</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>super</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>SuperSuffix</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>ExplicitGenericInvocationSuffix</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Arguments</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>ExplicitGenericInvocation</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>NonWildcardTypeArguments</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ExplicitGenericInvocationSuffix</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>
  <!-- TODO: must be add when add3 test case is working -->
  <!-- GENERALITY -->
  <xbgf:replace>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <terminal>.</terminal>
        </bgf:expression>
        <bgf:expression>
          <choice>
            <bgf:expression>
              <terminal>class</terminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>this</terminal>
            </bgf:expression>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <terminal>super</terminal>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>Arguments</nonterminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <terminal>new</terminal>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>InnerCreator</nonterminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
          </choice>
        </bgf:expression>
      </sequence>
    </bgf:expression>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <terminal>.</terminal>
        </bgf:expression>
        <bgf:expression>
          <choice>
            <bgf:expression>
              <terminal>class</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>ExplicitGenericInvocation</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>this</terminal>
            </bgf:expression>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <terminal>super</terminal>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>Arguments</nonterminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <terminal>new</terminal>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>InnerCreator</nonterminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
          </choice>
        </bgf:expression>
      </sequence>
    </bgf:expression>
  </xbgf:replace>
  <xbgf:appear>
    <bgf:production>
      <nonterminal>IdentifierSuffix</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <choice>
              <bgf:expression>
                <terminal>class</terminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>ExplicitGenericInvocation</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>this</terminal>
              </bgf:expression>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>super</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>Arguments</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>new</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <marked>
                      <bgf:expression>
                        <optional>
                          <bgf:expression>
                            <nonterminal>NonWildcardTypeArguments</nonterminal>
                          </bgf:expression>
                        </optional>
                      </bgf:expression>
                    </marked>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>InnerCreator</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </choice>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:appear>

  <!-- return ClassOrInterfaceDeclaration to its original form -->
  <xbgf:appear>
    <bgf:production>
      <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <star>
                  <bgf:expression>
                    <nonterminal>Modifier</nonterminal>
                  </bgf:expression>
                </star>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <choice>
              <bgf:expression>
                <nonterminal>ClassDeclaration</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>InterfaceDeclaration</nonterminal>
              </bgf:expression>
            </choice>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:appear>
  <xbgf:fold>
    <nonterminal>ModifiersOpt</nonterminal>
    <in>
      <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
    </in>
  </xbgf:fold>

</xbgf:sequence>