<xbgf:sequence
  xmlns:bgf="http://planet-sl.org/bgf"
  xmlns:xbgf="http://planet-sl.org/xbgf">
  
  <!--  ISSUE EXTRACTERROR
  Error in markup of JLS2
     - Fail: InterfaceBody.
      - [], ,([t({), ?(n(InterfaceMemberDeclarations)), t(})])
     vs.
      - [], *(?(n(InterfaceMemberDeclarations)))
  -->
  <!-- BREFACTOR -->
  <xbgf:undefine>InterfaceBody</xbgf:undefine>
  <!-- REVISE -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>InterfaceBody</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>{</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>InterfaceMemberDeclarations</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>}</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  
  <!-- ISSUE EXTRACTERROR
   Error in markup of JLS2
     - Fail: ClassBody.
      - [], ,([t({), ?(n(ClassBodyDeclarations)), t(})])
     vs.
      - [], *(?(n(ClassBodyDeclarations)))
  -->
  <!-- BREFACTOR -->
  <xbgf:undefine>ClassBody</xbgf:undefine>
  <!-- REVISE -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>ClassBody</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>{</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ClassBodyDeclarations</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>}</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  
  <!-- ISSUE EXTRACTERROR
  Error in markup in JLS2
  
     - Fail: ConstructorBody.
      - [], ,([t({), ?(n(ExplicitConstructorInvocation)), ?(n(BlockStatements)), t(})])
     vs.
      - [], *(,([?(n(ExplicitConstructorInvocation)), ?(n(BlockStatements))]))
  -->
  <!-- BREFACTOR -->
  <xbgf:undefine>ConstructorBody</xbgf:undefine>
  <!-- REVISE -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>ConstructorBody</nonterminal>
      <bgf:expression>
        <star>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <nonterminal>ExplicitConstructorInvocation</nonterminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <nonterminal>BlockStatements</nonterminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </star>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>

  <!-- ISSUE EXTRACTERROR
     - Fail: Block.
      - [], ,([t({), ?(n(BlockStatements)), t(})])
     vs.
      - [], *(?(n(BlockStatements)))
  -->
  <!-- BREFACTOR -->
  <xbgf:undefine>Block</xbgf:undefine>
  <!-- REVISE -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>Block</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>{</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>BlockStatements</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>}</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  
  <!-- ISSUE EXTRACTERROR
     - Fail: SwitchBlock.
      - [], ,([t({), ?(n(SwitchBlockStatementGroups)), ?(n(SwitchLabels)), t(})])
     vs.
      - [], *(,([?(n(SwitchBlockStatementGroups)), ?(n(SwitchLabels))]))
  -->
  <!-- BREFACTOR -->
  <xbgf:undefine>SwitchBlock</xbgf:undefine>
  <!-- REVISE -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>SwitchBlock</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>{</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>SwitchBlockStatementGroups</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>SwitchLabels</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>}</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  
  <!-- ISSUE EXTRACTERROR
     - Fail: ConstructorBody.
      - [], ,([t({), ?(n(ExplicitConstructorInvocation)), ?(n(BlockStatements)), t(})])
     vs.
      - [], *(,([?(n(ExplicitConstructorInvocation)), ?(n(BlockStatements))]))
  -->
  <!-- BREFACTOR -->
  <xbgf:undefine>ConstructorBody</xbgf:undefine>
  <!-- REVISE -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>ConstructorBody</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>{</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ExplicitConstructorInvocation</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>BlockStatements</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>}</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  
  <!-- ISSUE EXTRACTERROR
  Error in PrimaryNoNewArray undetected by the extractor due to lacking definition -->
  <!-- REVISE -->
  <xbgf:replace>
    <bgf:expression>
      <terminal>ClassName</terminal>
    </bgf:expression>
    <bgf:expression>
      <nonterminal>ClassName</nonterminal>
    </bgf:expression>
  </xbgf:replace>

</xbgf:sequence>