<xbgf:sequence
  xmlns:bgf="http://planet-sl.org/bgf"
  xmlns:xbgf="http://planet-sl.org/xbgf">

  <!--
  Classes in the syntax appendix look like this:
  
  ClassDeclaration is defined as:
     NormalClassDeclaration
     EnumDeclaration
  NormalClassDeclaration is defined as:
     "class" Identifier [ TypeParameters ] [ "extends" Type ] [ "implements" TypeList ] ClassBody
  ClassBody is defined as:
     "{" { ClassBodyDeclaration } "}"
  ClassBodyDeclaration is defined as:
     ";"
     [ "static" ] Block
     ModifiersOpt MemberDecl
  MemberDecl is defined as:
     MethodOrFieldDecl
     "void" Identifier MethodDeclaratorRest
     Identifier ConstructorDeclaratorRest
     ClassOrInterfaceDeclaration
  MethodOrFieldDecl is defined as:
     Type Identifier MethodOrFieldRest
  MethodOrFieldRest is defined as:
     VariableDeclaratorRest
     MethodDeclaratorRest
  VariableDeclaratorRest is defined as:
     BracketsOpt [ "=" VariableInitializer ]
  VariableInitializer is defined as:
     ArrayInitializer
     Expression
  MethodDeclaratorRest is defined as:
     FormalParameters BracketsOpt [ "throws" QualifiedIdentifierList ] ( MethodBody | ";" )


  While in the text of the spec it is yaccified:

  ClassDeclaration is defined as:
     [ ClassModifiers ] "class" Identifier [ Super ] [ Interfaces ] ClassBody
  Super is defined as:
     "extends" ClassType
  Interfaces is defined as:
     "implements" InterfaceTypeList
  ClassBody is defined as:
     { [ ClassBodyDeclarations ] }
  ClassBodyDeclarations is defined as:
     ClassBodyDeclaration
     ClassBodyDeclarations ClassBodyDeclaration
  ClassBodyDeclaration is defined as:
     ClassMemberDeclaration
     InstanceInitializer
     StaticInitializer
     ConstructorDeclaration
  ClassMemberDeclaration is defined as:
     FieldDeclaration
     MethodDeclaration
     ClassDeclaration
     InterfaceDeclaration
     ";"
  FieldDeclaration is defined as:
     [ FieldModifiers ] Type VariableDeclarators ";"
  MethodDeclaration is defined as:
     MethodHeader MethodBody
  MethodHeader is defined as:
     [ MethodModifiers ] ResultType MethodDeclarator [ Throws ]
  
  -->

  <!-- 
   - Fail: TypeDeclaration.
      - [], ;([n(ClassOrInterfaceDeclaration), t((;))])
     vs.
      - [], ;([n(ClassDeclaration), n(InterfaceDeclaration), t((;))])
  -->
  <xbgf:extract>
    <bgf:production>
      <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <nonterminal>ClassDeclaration</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>InterfaceDeclaration</nonterminal>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
    <in>
      <nonterminal>TypeDeclaration</nonterminal>
    </in>
  </xbgf:extract>

  <!-- 
   - Fail: ClassBody.
      - [], ,([t({), *(n(ClassBodyDeclaration)), t(})])
     vs.
      - [], ,([t({), ?(n(ClassBodyDeclarations)), t(})])
  -->
  <xbgf:deyaccify>ClassBodyDeclarations</xbgf:deyaccify>
  <xbgf:inline>ClassBodyDeclarations</xbgf:inline>
  <xbgf:massage>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <plus>
            <bgf:expression>
              <nonterminal>ClassBodyDeclaration</nonterminal>
            </bgf:expression>
          </plus>
        </bgf:expression>
      </optional>
    </bgf:expression>
    <bgf:expression>
      <star>
        <bgf:expression>
          <nonterminal>ClassBodyDeclaration</nonterminal>
        </bgf:expression>
      </star>
    </bgf:expression>
  </xbgf:massage>

  <!-- BREFACTOR 
  modifiers -->
  <xbgf:project>
    <bgf:production>
      <nonterminal>NormalClassDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>class</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>TypeParameters</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>Super</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>Interfaces</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ClassBody</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:project>
  <xbgf:vertical>
    <nonterminal>ClassMemberDeclaration</nonterminal>
  </xbgf:vertical>
  <xbgf:designate>
    <bgf:production>
      <label>target</label>
      <nonterminal>ClassMemberDeclaration</nonterminal>
      <bgf:expression>
        <nonterminal>ClassDeclaration</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:designate>
  <!-- BREFACTOR -->
  <xbgf:inject>
    <bgf:production>
      <label>target</label>
      <nonterminal>ClassMemberDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ModifiersOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ClassDeclaration</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>
  <xbgf:strip>
    <label>target</label>
  </xbgf:strip>
  <xbgf:designate>
    <bgf:production>
      <label>target</label>
      <nonterminal>ClassMemberDeclaration</nonterminal>
      <bgf:expression>
        <nonterminal>InterfaceDeclaration</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:designate>
  <!-- BREFACTOR -->
  <xbgf:inject>
    <bgf:production>
      <label>target</label>
      <nonterminal>ClassMemberDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ModifiersOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>InterfaceDeclaration</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>
  <xbgf:strip>
    <label>target</label>
  </xbgf:strip>
  <xbgf:horizontal>ClassMemberDeclaration</xbgf:horizontal>

  <!-- 
   - Fail: NormalClassDeclaration.
      - [], ,([t(class), n(Identifier), ?(,([t(extends), n(Type)])), ?(,([t(implements), n(TypeList)])), n(ClassBody)])
     vs.
      - [], ,([n(ModifiersOpt), t(class), n(Identifier), ?(n(Super)), ?(n(Interfaces)), n(ClassBody)])
  -->
  <xbgf:inline>Super</xbgf:inline>
  <xbgf:inline>Interfaces</xbgf:inline>

  <!-- 
   - Fail: ClassBodyDeclaration.
      - [], ;([... ,([?(t(static)), n(Block)]), ...])
     vs.
      - [], ;([..., n(InstanceInitializer), n(StaticInitializer), ...])
  -->
  <xbgf:inline>InstanceInitializer</xbgf:inline>
  <xbgf:inline>StaticInitializer</xbgf:inline>
  <xbgf:factor>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <nonterminal>Block</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>static</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Block</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <choice>
            <bgf:expression>
              <epsilon/>
            </bgf:expression>
            <bgf:expression>
              <terminal>static</terminal>
            </bgf:expression>
          </choice>
        </bgf:expression>
        <bgf:expression>
          <nonterminal>Block</nonterminal>
        </bgf:expression>
      </sequence>
    </bgf:expression>
  </xbgf:factor>
  <xbgf:massage>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <epsilon/>
        </bgf:expression>
        <bgf:expression>
          <terminal>static</terminal>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <terminal>static</terminal>
        </bgf:expression>
      </optional>
    </bgf:expression>
  </xbgf:massage>

  <!-- 
   - Fail: FormalParameters.
      - [], ,([t((), ?(n(FormalParameterDecls)), t())])
     vs.
      - [], ;([n(FormalParameter), ,([n(FormalParameters), t((,)), n(FormalParameter)])])
  -->
  <!-- BREFACTOR -->
  <xbgf:undefine>FormalParameters</xbgf:undefine>
  <!-- BREFACTOR -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>FormalParameters</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>FormalParameterDecls</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  <!-- BREFACTOR -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>FormalParameterDecls</nonterminal>
      <bgf:expression>
        <optional>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <terminal>final</terminal>
              </bgf:expression>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <nonterminal>Annotations</nonterminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>Type</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>FormalParameterDeclsRest</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </optional>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  <!-- BREFACTOR -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>FormalParameterDeclsRest</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>VariableDeclaratorId</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <sequence>
                      <bgf:expression>
                        <terminal>,</terminal>
                      </bgf:expression>
                      <bgf:expression>
                        <nonterminal>FormalParameterDecls</nonterminal>
                      </bgf:expression>
                    </sequence>
                  </bgf:expression>
                </optional>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <terminal>...</terminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>VariableDeclaratorId</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>

  <!-- 
   - Fail: ClassBodyDeclaration.
      - [], ;([t((;)), ... ,([n(ModifiersOpt), n(MemberDecl)])])
     vs.
      - [], ;([n(ClassMemberDeclaration), ... , n(ConstructorDeclaration)])
  -->
  <xbgf:inline>ClassMemberDeclaration</xbgf:inline>
  <xbgf:inline>ConstructorDeclaration</xbgf:inline>
  <xbgf:inline>MethodDeclaration</xbgf:inline>
  <xbgf:inline>ConstructorDeclarator</xbgf:inline>
  <xbgf:inline>MethodHeader</xbgf:inline>
  <xbgf:inline>FieldDeclaration</xbgf:inline>
  <xbgf:distribute>
    <nonterminal>ClassBodyDeclaration</nonterminal>
  </xbgf:distribute>

  <!-- 
  MethodDeclarator is defined as:
     Identifier "(" [ FormalParameterList ] ")"
     MethodDeclarator "[" "]"
  -->
  <xbgf:deyaccify>MethodDeclarator</xbgf:deyaccify>
  <xbgf:inline>MethodDeclarator</xbgf:inline>

  <!--   BREFACTOR 
      - [], ,([*(n(Modifier)), ?(n(TypeParameters)), n(Identifier), t((), ?(n(FormalParameterList)), t()), ?(n(Throws)), n(ConstructorBody)])
  -->
  <xbgf:replace>
    <bgf:expression>
      <nonterminal>FormalParameterList</nonterminal>
    </bgf:expression>
    <bgf:expression>
      <nonterminal>FormalParameterDecls</nonterminal>
    </bgf:expression>
    <in>
      <nonterminal>ClassBodyDeclaration</nonterminal>
    </in>
  </xbgf:replace>
  <xbgf:fold>
    <nonterminal>FormalParameters</nonterminal>
    <in>
      <nonterminal>ClassBodyDeclaration</nonterminal>
    </in>
  </xbgf:fold>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>ConstructorDeclaratorRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>FormalParameters</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>Throws</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ConstructorBody</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>

  <!--
      - [], ,([*(n(Modifier)), ?(n(TypeParameters)), n(ResultType), n(MethodDeclarator), ?(n(Throws)), n(MethodBody)])
  -->
  <xbgf:fold>
    <nonterminal>BracketsOpt</nonterminal>
  </xbgf:fold>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>MethodDeclaratorRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>FormalParameters</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>BracketsOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>Throws</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>MethodBody</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
    <in>
      <nonterminal>ClassBodyDeclaration</nonterminal>
    </in>
  </xbgf:extract>

  <!-- 
     vs.
      - [], ,([*(n(Modifier)), ?(n(TypeParameters)), n(Identifier), n(ConstructorDeclaratorRest)])
      - [], ,([*(n(Modifier)), ?(n(TypeParameters)), ;([n(Type), t(void)]), n(Identifier), n(MethodDeclaratorRest)])
  -->
  <xbgf:factor>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>ModifiersOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <optional>
                <bgf:expression>
                  <nonterminal>TypeParameters</nonterminal>
                </bgf:expression>
              </optional>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Identifier</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>ConstructorDeclaratorRest</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>ModifiersOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <optional>
                <bgf:expression>
                  <nonterminal>TypeParameters</nonterminal>
                </bgf:expression>
              </optional>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>ResultType</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Identifier</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>MethodDeclaratorRest</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <nonterminal>ModifiersOpt</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <optional>
            <bgf:expression>
              <nonterminal>TypeParameters</nonterminal>
            </bgf:expression>
          </optional>
        </bgf:expression>
        <bgf:expression>
          <choice>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <nonterminal>Identifier</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>ConstructorDeclaratorRest</nonterminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <nonterminal>ResultType</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>Identifier</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>MethodDeclaratorRest</nonterminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
          </choice>
        </bgf:expression>
      </sequence>
    </bgf:expression>
  </xbgf:factor>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>GenericMethodOrConstructorRest</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>Identifier</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>ConstructorDeclaratorRest</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>ResultType</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>Identifier</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>MethodDeclaratorRest</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>

  <!-- 
      - [], ,([*(n(Modifier)), ?(n(TypeParameters)), n(GenericMethodOrConstructorRest)])
  -->
  <xbgf:extract>
    <bgf:production>
      <nonterminal>GenericMethodOrConstructorDecl</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>TypeParameters</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>GenericMethodOrConstructorRest</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>
  <!-- ISSUE PERMISSIVENESS -->
  <xbgf:narrow>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <nonterminal>TypeParameters</nonterminal>
        </bgf:expression>
      </optional>
    </bgf:expression>
    <bgf:expression>
      <nonterminal>TypeParameters</nonterminal>
    </bgf:expression>
    <in>
      <nonterminal>GenericMethodOrConstructorDecl</nonterminal>
    </in>
  </xbgf:narrow>

  <xbgf:inline>ResultType</xbgf:inline>

  <xbgf:vertical>
    <nonterminal>ClassBodyDeclaration</nonterminal>
  </xbgf:vertical>

  <!-- 
   - Fail: VariableDeclaratorId.
      - [], ,([n(Identifier), *(,([t([), t(])]))])
     vs.
      - [], ;([n(Identifier), ,([n(VariableDeclaratorId), t([), t(])])])
   -->
  <xbgf:deyaccify>VariableDeclaratorId</xbgf:deyaccify>

  <!--  
      - [], ,([*(n(Modifier)), n(Type), n(VariableDeclarators), t((;))])
  -->
  <xbgf:remove>
    <bgf:production>
      <nonterminal>ClassBodyDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ModifiersOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Type</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>VariableDeclarators</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:remove>
  <xbgf:add>
    <bgf:production>
      <nonterminal>ClassBodyDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ModifiersOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>void</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>VoidMethodDeclaratorRest</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <!-- BREFACTOR -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>VoidMethodDeclaratorRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>FormalParameters</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>throws</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>QualifiedIdentifierList</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <choice>
              <bgf:expression>
                <nonterminal>MethodBody</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>;</terminal>
              </bgf:expression>
            </choice>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  <xbgf:add>
    <bgf:production>
      <nonterminal>ClassBodyDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ModifiersOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>MethodOrFieldDecl</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <!-- BREFACTOR -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>MethodOrFieldDecl</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Type</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>MethodOrFieldRest</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  <!-- BREFACTOR -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>MethodOrFieldRest</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <nonterminal>VariableDeclaratorRest</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>MethodDeclaratorRest</nonterminal>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  <xbgf:add>
    <bgf:production>
      <nonterminal>ClassBodyDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ModifiersOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ConstructorDeclaratorRest</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:horizontal>ClassBodyDeclaration</xbgf:horizontal>

  <!-- 
   - Fail: ClassBodyDeclaration.
      - [], ;([... ,([*(n(Modifier)), n(MemberDecl)])])
     vs.
      - [], ,([*(n(Modifier)), n(Identifier), n(ConstructorDeclaratorRest)])
      - [], ,([*(n(Modifier)), n(MethodOrFieldDecl)])
      - [], ,([*(n(Modifier)), t(void), n(Identifier), n(VoidMethodDeclaratorRest)])
      - [], ,([*(n(Modifier)), n(InterfaceDeclaration)])
      - [], ,([*(n(Modifier)), n(ClassDeclaration)])
      - [], ,([*(n(Modifier)), n(GenericMethodOrConstructorDecl)])
  -->
  <xbgf:factor>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>ModifiersOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Identifier</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>ConstructorDeclaratorRest</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>ModifiersOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>MethodOrFieldDecl</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>ModifiersOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>void</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Identifier</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>VoidMethodDeclaratorRest</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>ModifiersOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>InterfaceDeclaration</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>ModifiersOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>ClassDeclaration</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>ModifiersOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>GenericMethodOrConstructorDecl</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <nonterminal>ModifiersOpt</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <choice>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <nonterminal>Identifier</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>ConstructorDeclaratorRest</nonterminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>MethodOrFieldDecl</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <terminal>void</terminal>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>Identifier</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>VoidMethodDeclaratorRest</nonterminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>InterfaceDeclaration</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>ClassDeclaration</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>GenericMethodOrConstructorDecl</nonterminal>
            </bgf:expression>
          </choice>
        </bgf:expression>
      </sequence>
    </bgf:expression>
  </xbgf:factor>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>MemberDecl</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>Identifier</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>ConstructorDeclaratorRest</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>MethodOrFieldDecl</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <terminal>void</terminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>Identifier</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>VoidMethodDeclaratorRest</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>InterfaceDeclaration</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ClassDeclaration</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>GenericMethodOrConstructorDecl</nonterminal>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>

  <!-- BREFACTOR 
   - Fail: ClassOrInterfaceDeclaration.
      - [], ,([n(ModifiersOpt), ;([n(ClassDeclaration), n(InterfaceDeclaration)])])
     vs.
      - [], ;([n(ClassDeclaration), n(InterfaceDeclaration)])
      
  -->
  <xbgf:inject>
    <bgf:production>
      <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ModifiersOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <choice>
              <bgf:expression>
                <nonterminal>ClassDeclaration</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>InterfaceDeclaration</nonterminal>
              </bgf:expression>
            </choice>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>

  <!-- 
   - Fail: ConstructorDeclaratorRest.
      - [], ,([n(FormalParameters), ?(,([t(throws), n(QualifiedIdentifierList)])), n(MethodBody)])
     vs.
      - [], ,([n(FormalParameters), ?(n(Throws)), n(ConstructorBody)])
  -->
  <!-- GENERALITY -->
  <xbgf:replace>
    <bgf:expression>
      <nonterminal>ConstructorBody</nonterminal>
    </bgf:expression>
    <bgf:expression>
      <nonterminal>MethodBody</nonterminal>
    </bgf:expression>
    <in>
      <nonterminal>ConstructorDeclaratorRest</nonterminal>
    </in>
  </xbgf:replace>
  <xbgf:eliminate>ConstructorBody</xbgf:eliminate>

  <!-- 
  This is used by class definitions and interface definitions
   - Fail: TypeParameters.
      - [], ,([t(<), n(TypeParameter), *(,([t((,)), n(TypeParameter)])), t(>)])
     vs.
      - [], ,([t(<), n(TypeParameterList), t(>)])
  -->
  <xbgf:deyaccify>TypeParameterList</xbgf:deyaccify>
  <xbgf:inline>TypeParameterList</xbgf:inline>

  <!-- 
   - Fail: TypeParameter.
      - [], ,([n(Identifier), ?(,([t(extends), n(Bound)]))])
     vs.
      - [], ,([n(Identifier), ?(n(TypeBound))])
      
  Bound is defined as:
     Type { "&amp;" Type }

  TypeBound is defined as:
     "extends" ClassOrInterfaceType [ AdditionalBoundList ]
  AdditionalBoundList is defined as:
     AdditionalBound AdditionalBoundList
     AdditionalBound
  AdditionalBound is defined as:
     "&amp;" InterfaceType
  -->
  <xbgf:deyaccify>AdditionalBoundList</xbgf:deyaccify>
  <xbgf:inline>AdditionalBoundList</xbgf:inline>
  <xbgf:massage>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <plus>
            <bgf:expression>
              <nonterminal>AdditionalBound</nonterminal>
            </bgf:expression>
          </plus>
        </bgf:expression>
      </optional>
    </bgf:expression>
    <bgf:expression>
      <star>
        <bgf:expression>
          <nonterminal>AdditionalBound</nonterminal>
        </bgf:expression>
      </star>
    </bgf:expression>
  </xbgf:massage>
  <xbgf:inline>AdditionalBound</xbgf:inline>
  <xbgf:inline>TypeBound</xbgf:inline>
  <!-- WTF??? -->
  <!--   - Fail: TypeParameter.
      - [], ,([n(Identifier), ?(,([t(extends), n(Bound)]))])
     vs.
      - [], ,([n(Identifier), ?(,([t(extends), n(TypeDeclSpecifier), ?(n(TypeArguments)), n(BracketsOpt), *(,([t(&), n(TypeDeclSpecifier), ?(n(TypeArguments))]))]))])
-->
</xbgf:sequence>