<xbgf:sequence
  xmlns:bgf="http://planet-sl.org/bgf"
  xmlns:xbgf="http://planet-sl.org/xbgf">
  <xbgf:reroot>
    <root>CompilationUnit</root>
  </xbgf:reroot>
  
  <xbgf:vertical>
    <nonterminal>Type</nonterminal>
  </xbgf:vertical>
  <xbgf:vertical>
    <nonterminal>Primary</nonterminal>
  </xbgf:vertical>
  <xbgf:vertical>
    <nonterminal>Statement</nonterminal>
  </xbgf:vertical>

  <xbgf:rename>
    <nonterminal>
      <from>QualifiedIdentifier</from>
      <to>Name</to>
    </nonterminal>
  </xbgf:rename>
  
  <!--
   - Fail: ClassOrInterfaceType.
      - [], ;([n(ClassType), n(InterfaceType)])
     vs.
      - [], n(Name)
   - Fail: ClassType.
      - [], n(Name)
     vs.
      - [], n(ClassOrInterfaceType)
   - Fail: InterfaceType.
      - [], n(Name)
     vs.
      - [], n(ClassOrInterfaceType)
      
      NB: The following two folds are virtually chain transformations, but performed for an existing definition.
  -->
  <xbgf:replace>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <nonterminal>ClassType</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <nonterminal>InterfaceType</nonterminal>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <nonterminal>Name</nonterminal>
    </bgf:expression>
    <in>
      <nonterminal>ClassOrInterfaceType</nonterminal>
    </in>
  </xbgf:replace>
  <xbgf:fold>
    <nonterminal>ClassOrInterfaceType</nonterminal>
    <in>
      <nonterminal>ClassType</nonterminal>
    </in>
  </xbgf:fold>
  <xbgf:fold>
    <nonterminal>ClassOrInterfaceType</nonterminal>
    <in>
      <nonterminal>InterfaceType</nonterminal>
    </in>
  </xbgf:fold>

  <!--
   - Fail: FieldDeclaration.
      - [], ,([?(n(FieldModifiers)), n(Type), n(VariableDeclarators), t((;))])
     vs.
      - [], ,([?(n(Modifiers)), n(Type), n(VariableDeclarators), t((;))])
   (and many similar ones)
  -->
  <xbgf:vertical>
    <nonterminal>ClassModifier</nonterminal>
  </xbgf:vertical>
  <xbgf:vertical>
    <nonterminal>InterfaceModifier</nonterminal>
  </xbgf:vertical>
  <xbgf:vertical>
    <nonterminal>ConstructorModifier</nonterminal>
  </xbgf:vertical>
  <xbgf:vertical>
    <nonterminal>AbstractMethodModifier</nonterminal>
  </xbgf:vertical>
  <xbgf:vertical>
    <nonterminal>MethodModifier</nonterminal>
  </xbgf:vertical>
  <xbgf:vertical>
    <nonterminal>FieldModifier</nonterminal>
  </xbgf:vertical>
  <xbgf:vertical>
    <nonterminal>ConstantModifier</nonterminal>
  </xbgf:vertical>
  <xbgf:rename>
    <nonterminal>
      <from>ClassModifier</from>
      <to>Modifier</to>
    </nonterminal>
  </xbgf:rename>
  <xbgf:unite>
    <add>InterfaceModifier</add>
    <to>Modifier</to>
  </xbgf:unite>
  <xbgf:unite>
    <add>ConstructorModifier</add>
    <to>Modifier</to>
  </xbgf:unite>
  <xbgf:unite>
    <add>AbstractMethodModifier</add>
    <to>Modifier</to>
  </xbgf:unite>
  <xbgf:unite>
    <add>MethodModifier</add>
    <to>Modifier</to>
  </xbgf:unite>
  <xbgf:unite>
    <add>FieldModifier</add>
    <to>Modifier</to>
  </xbgf:unite>
  <!-- NB: was a weird name (plural) -->
  <xbgf:unite>
    <add>ConstantModifier</add>
    <to>Modifier</to>
  </xbgf:unite>
  <xbgf:rename>
    <nonterminal>
      <from>ClassModifiers</from>
      <to>Modifiers</to>
    </nonterminal>
  </xbgf:rename>
  <xbgf:unite>
    <add>ConstantModifiers</add>
    <to>Modifiers</to>
  </xbgf:unite>
  <xbgf:unite>
    <add>InterfaceModifiers</add>
    <to>Modifiers</to>
  </xbgf:unite>
  <xbgf:unite>
    <add>ConstructorModifiers</add>
    <to>Modifiers</to>
  </xbgf:unite>
  <xbgf:unite>
    <add>AbstractMethodModifiers</add>
    <to>Modifiers</to>
  </xbgf:unite>
  <xbgf:unite>
    <add>MethodModifiers</add>
    <to>Modifiers</to>
  </xbgf:unite>
  <xbgf:unite>
    <add>FieldModifiers</add>
    <to>Modifiers</to>
  </xbgf:unite>
  
  <!--
  This is weird: looks like we are adding a new feature
  
   - Fail: MethodDeclarator.
      - [], ,([n(MethodDeclarator), t([), t(])])
     vs.
      - [], ;([,([n(Identifier), t((), ?(n(FormalParameterList)), t())]), ,([n(MethodDeclarator), t([), t(])])])
  -->
  <xbgf:add>
    <bgf:production>
      <nonterminal>MethodDeclarator</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>MethodDeclarator</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>[</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>]</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:horizontal>MethodDeclarator</xbgf:horizontal>

  <!--
  - Fail: MethodHeader.
      - [], ,([?(n(MethodModifiers)), n(ResultType), n(MethodDeclarator), ?(n(Throws))])
     vs.
      - [], ;([,([?(n(Modifiers)), n(Type), n(MethodDeclarator), ?(n(Throws))]),
               ,([?(n(Modifiers)), t(void), n(MethodDeclarator), ?(n(Throws))])])
  - Fail: AbstractMethodDeclaration.
      - [], ,([?(n(Modifiers)), n(ResultType), n(MethodDeclarator), ?(n(Throws)), t((;))])
     vs.
      - [], ,([n(MethodHeader), t((;))])
  -->
  <xbgf:fold>
    <nonterminal>MethodHeader</nonterminal>
    <in>
      <nonterminal>AbstractMethodDeclaration</nonterminal>
    </in>
  </xbgf:fold>
  <xbgf:inline>ResultType</xbgf:inline>
  <xbgf:distribute>
    <nonterminal>MethodHeader</nonterminal>
  </xbgf:distribute>
  
  <!--
   - Fail: ArrayCreationExpression.
      - [], ;([,([t(new), n(PrimitiveType), n(DimExprs), ?(n(Dims))]), ,([t(new), n(Name), n(DimExprs), ?(n(Dims))])])
     vs.
      - [], ;([,([t(new), n(PrimitiveType), n(DimExprs), ?(n(Dims))]), ,([t(new), n(ClassOrInterfaceType), n(DimExprs), ?(n(Dims))])])
   -->
  <xbgf:fold>
    <nonterminal>ClassOrInterfaceType</nonterminal>
    <in>
      <nonterminal>ArrayCreationExpression</nonterminal>
    </in>
  </xbgf:fold>

  <!--
   - Fail: CastExpression.
      - [], ;([,([t((), n(PrimitiveType), ?(n(Dims)), t()), n(UnaryExpression)]),
               ,([t((), n(ReferenceType), t()), n(UnaryExpressionNotPlusMinus)])])
     vs.
      - [], ;([,([t((), n(PrimitiveType), ?(n(Dims)), t()), n(UnaryExpression)]),
               ,([t((), n(Expression), t()), n(UnaryExpressionNotPlusMinus)]),
               ,([t((), n(Name), n(Dims), t()), n(UnaryExpressionNotPlusMinus)])])
  -->
  <xbgf:replace>
    <bgf:expression>
      <nonterminal>ReferenceType</nonterminal>
    </bgf:expression>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <nonterminal>Expression</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>Name</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Dims</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <in>
      <nonterminal>CastExpression</nonterminal>
    </in>
  </xbgf:replace>
  <xbgf:distribute>
    <nonterminal>CastExpression</nonterminal>
  </xbgf:distribute>

  <!--
   - Fail: ConstantDeclaration.
      - [], ,([?(n(Modifiers)), n(Type), n(VariableDeclarator)])
     vs.
      - [], n(FieldDeclaration)
      
  FieldDeclaration is completely structurally different, so this is the only way.
  Possibly a spec error - there should be multiple modifiers allowed, really.
  -->
  <xbgf:replace>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <optional>
            <bgf:expression>
              <nonterminal>Modifiers</nonterminal>
            </bgf:expression>
          </optional>
        </bgf:expression>
        <bgf:expression>
          <nonterminal>Type</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <nonterminal>VariableDeclarator</nonterminal>
        </bgf:expression>
      </sequence>
    </bgf:expression>
    <bgf:expression>
      <nonterminal>FieldDeclaration</nonterminal>
    </bgf:expression>
    <in>
      <nonterminal>ConstantDeclaration</nonterminal>
    </in>
  </xbgf:replace>
  
  <!--
   - Fail: ArrayType.
      - [], ,([n(Type), t([), t(])])
     vs.
      - [], ;([,([n(PrimitiveType), t([), t(])]), ,([n(Name), t([), t(])]), ,([n(ArrayType), t([), t(])])])
  -->
  <xbgf:horizontal>Type</xbgf:horizontal>
  <xbgf:unfold>
    <nonterminal>Type</nonterminal>
    <in>
      <nonterminal>ArrayType</nonterminal>
    </in>
  </xbgf:unfold>
  <xbgf:unfold>
    <nonterminal>ReferenceType</nonterminal>
    <in>
      <nonterminal>ArrayType</nonterminal>
    </in>
  </xbgf:unfold>
  <xbgf:unfold>
    <nonterminal>ClassOrInterfaceType</nonterminal>
    <in>
      <nonterminal>ArrayType</nonterminal>
    </in>
  </xbgf:unfold>
  <xbgf:distribute>
    <nonterminal>ArrayType</nonterminal>
  </xbgf:distribute>
  
</xbgf:sequence>