<xbgf:sequence
  xmlns:bgf="http://planet-sl.org/bgf"
  xmlns:xbgf="http://planet-sl.org/xbgf">

 <!--
    - Fail: FieldAccess.
      - [], ;([,([n(Primary), t(.), n(Identifier)]), ,([t(super), t(.), n(Identifier)])])
     vs.
      - [], ;([,([n(Primary), t(.), n(Identifier)]), ,([t(super), t(.), n(Identifier)]), ,([n(ClassName), t(.), t(super), t(.), n(Identifier)])])
 -->
  <xbgf:vertical>
    <nonterminal>FieldAccess</nonterminal>
  </xbgf:vertical>
  <xbgf:add>
    <bgf:production>
      <nonterminal>FieldAccess</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ClassName</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>super</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:horizontal>FieldAccess</xbgf:horizontal>
  
  <!--
     - Fail: LocalVariableDeclaration.
      - [], ,([n(Type), n(VariableDeclarators)])
     vs.
      - [], ,([?(t(final)), n(Type), n(VariableDeclarators)])
   -->
  <xbgf:inject>
    <bgf:production>
      <nonterminal>LocalVariableDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <terminal>final</terminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Type</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>VariableDeclarators</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>
  
  <!--
     - Fail: MethodModifier.
      - [], ;([t(public), t(protected), t(private), t(abstract), t(static), t(final), t(synchronized), t(native)])
     vs.
      - [], ;([t(public), t(protected), t(private), t(abstract), t(static), t(final), t(synchronized), t(native), t(strictfp)])
   -->
  <xbgf:vertical>
    <nonterminal>MethodModifier</nonterminal>
  </xbgf:vertical>
  <xbgf:add>
    <bgf:production>
      <nonterminal>MethodModifier</nonterminal>
      <bgf:expression>
        <terminal>strictfp</terminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:horizontal>MethodModifier</xbgf:horizontal>
  
  <!--
     - Fail: ClassBodyDeclaration.
      - [], ;([n(ClassMemberDeclaration), n(StaticInitializer), n(ConstructorDeclaration)])
     vs.
      - [], ;([n(ClassMemberDeclaration), n(InstanceInitializer), n(StaticInitializer), n(ConstructorDeclaration)])
   -->
  <xbgf:vertical>
    <nonterminal>ClassBodyDeclaration</nonterminal>
  </xbgf:vertical>
  <xbgf:add>
    <bgf:production>
      <nonterminal>ClassBodyDeclaration</nonterminal>
      <bgf:expression>
        <nonterminal>InstanceInitializer</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:horizontal>ClassBodyDeclaration</xbgf:horizontal>
  <xbgf:define>
    <bgf:production>
      <nonterminal>InstanceInitializer</nonterminal>
      <bgf:expression>
        <nonterminal>Block</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  <!--
     - Fail: ClassMemberDeclaration.
      - [], ;([n(FieldDeclaration), n(MethodDeclaration)])
     vs.
      - [], ;([n(FieldDeclaration), n(MethodDeclaration), n(ClassDeclaration), n(InterfaceDeclaration), t((;))])
  -->
  <xbgf:vertical>
    <nonterminal>ClassMemberDeclaration</nonterminal>
  </xbgf:vertical>
  <xbgf:add>
    <bgf:production>
      <nonterminal>ClassMemberDeclaration</nonterminal>
      <bgf:expression>
        <nonterminal>ClassDeclaration</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:add>
    <bgf:production>
      <nonterminal>ClassMemberDeclaration</nonterminal>
      <bgf:expression>
        <nonterminal>InterfaceDeclaration</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:add>
    <bgf:production>
      <nonterminal>ClassMemberDeclaration</nonterminal>
      <bgf:expression>
        <terminal>;</terminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:horizontal>ClassMemberDeclaration</xbgf:horizontal>
  
  <!--
     - Fail: InterfaceMemberDeclaration.
      - [], ;([n(ConstantDeclaration), n(AbstractMethodDeclaration)])
     vs.
      - [], ;([n(ConstantDeclaration), n(AbstractMethodDeclaration), n(ClassDeclaration), n(InterfaceDeclaration), t((;))])
  -->
  <xbgf:vertical>
    <nonterminal>InterfaceMemberDeclaration</nonterminal>
  </xbgf:vertical>
  <xbgf:add>
    <bgf:production>
      <nonterminal>InterfaceMemberDeclaration</nonterminal>
      <bgf:expression>
        <nonterminal>ClassDeclaration</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:add>
    <bgf:production>
      <nonterminal>InterfaceMemberDeclaration</nonterminal>
      <bgf:expression>
        <nonterminal>InterfaceDeclaration</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:add>
    <bgf:production>
      <nonterminal>InterfaceMemberDeclaration</nonterminal>
      <bgf:expression>
        <terminal>;</terminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:horizontal>InterfaceMemberDeclaration</xbgf:horizontal>

  <!--
     - Fail: BlockStatement.
      - [], ;([n(LocalVariableDeclarationStatement), n(Statement)])
     vs.
      - [], ;([n(LocalVariableDeclarationStatement), n(ClassDeclaration), n(Statement)])
   -->
  <xbgf:vertical>
    <nonterminal>BlockStatement</nonterminal>
  </xbgf:vertical>
  <xbgf:add>
    <bgf:production>
      <nonterminal>BlockStatement</nonterminal>
      <bgf:expression>
        <nonterminal>ClassDeclaration</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:horizontal>BlockStatement</xbgf:horizontal>
  
  <!--
     - Fail: ClassModifier.
      - [], ;([t(public), t(abstract), t(final)])
     vs.
      - [], ;([t(public), t(protected), t(private), t(abstract), t(static), t(final), t(strictfp)])
  -->
  <xbgf:vertical>
    <nonterminal>ClassModifier</nonterminal>
  </xbgf:vertical>
  <xbgf:add>
    <bgf:production>
      <nonterminal>ClassModifier</nonterminal>
      <bgf:expression>
        <terminal>protected</terminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:add>
    <bgf:production>
      <nonterminal>ClassModifier</nonterminal>
      <bgf:expression>
        <terminal>private</terminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:add>
    <bgf:production>
      <nonterminal>ClassModifier</nonterminal>
      <bgf:expression>
        <terminal>static</terminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:add>
    <bgf:production>
      <nonterminal>ClassModifier</nonterminal>
      <bgf:expression>
        <terminal>strictfp</terminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:horizontal>ClassModifier</xbgf:horizontal>
  
  <!--
     - Fail: ExplicitConstructorInvocation.
      - [], ;([,([t(this), t((), ?(n(ArgumentList)), t()), t((;))]), ,([t(super), t((), ?(n(ArgumentList)), t()), t((;))])])
     vs.
      - [], ;([,([t(this), t((), ?(n(ArgumentList)), t()), t((;))]), ,([t(super), t((), ?(n(ArgumentList)), t()), t((;))]), ,([n(Primary), t(.), t(super), t((), ?(n(ArgumentList)), t()), t((;))])])
  -->
  <xbgf:vertical>
    <nonterminal>ExplicitConstructorInvocation</nonterminal>
  </xbgf:vertical>
  <xbgf:add>
    <bgf:production>
      <nonterminal>ExplicitConstructorInvocation</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Primary</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>super</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ArgumentList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:horizontal>ExplicitConstructorInvocation</xbgf:horizontal>
  
  <!--
     - Fail: MethodInvocation.
      - [], ;([,([n(MethodName), t((), ?(n(ArgumentList)), t())]), ,([n(Primary), t(.), n(Identifier), t((), ?(n(ArgumentList)), t())]), ,([t(super), t(.), n(Identifier), t((), ?(n(ArgumentList)), t())])])
     vs.
      - [], ;([,([n(MethodName), t((), ?(n(ArgumentList)), t())]), ,([n(Primary), t(.), n(Identifier), t((), ?(n(ArgumentList)), t())]), ,([t(super), t(.), n(Identifier), t((), ?(n(ArgumentList)), t())]), ,([n(ClassName), t(.), t(super), t(.), n(Identifier), t((), ?(n(ArgumentList)), t())])])
  -->
  <xbgf:vertical>
    <nonterminal>MethodInvocation</nonterminal>
  </xbgf:vertical>
  <xbgf:add>
    <bgf:production>
      <nonterminal>MethodInvocation</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ClassName</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>super</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ArgumentList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:horizontal>MethodInvocation</xbgf:horizontal>
  
  <!--
     - Fail: InterfaceModifier.
      - [], ;([t(public), t(abstract)])
     vs.
      - [], ;([t(public), t(protected), t(private), t(abstract), t(static), t(strictfp)])
  -->
  <xbgf:vertical>
    <nonterminal>InterfaceModifier</nonterminal>
  </xbgf:vertical>
  <xbgf:add>
    <bgf:production>
      <nonterminal>InterfaceModifier</nonterminal>
      <bgf:expression>
        <terminal>protected</terminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:add>
    <bgf:production>
      <nonterminal>InterfaceModifier</nonterminal>
      <bgf:expression>
        <terminal>private</terminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:add>
    <bgf:production>
      <nonterminal>InterfaceModifier</nonterminal>
      <bgf:expression>
        <terminal>static</terminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:add>
    <bgf:production>
      <nonterminal>InterfaceModifier</nonterminal>
      <bgf:expression>
        <terminal>strictfp</terminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:horizontal>InterfaceModifier</xbgf:horizontal>
  
  <!--
     - Fail: ArrayCreationExpression.
      - [], ;([,([t(new), n(PrimitiveType), n(DimExprs), ?(n(Dims))]), ,([t(new), n(TypeName), n(DimExprs), ?(n(Dims))])])
     vs.
      - [], ;([,([t(new), n(PrimitiveType), n(DimExprs), ?(n(Dims))]), ,([t(new), n(TypeName), n(DimExprs), ?(n(Dims))]), ,([t(new), n(PrimitiveType), n(Dims), n(ArrayInitializer)]), ,([t(new), n(TypeName), n(Dims), n(ArrayInitializer)])])
  -->
  <xbgf:vertical>
    <nonterminal>ArrayCreationExpression</nonterminal>
  </xbgf:vertical>
  <xbgf:add>
    <bgf:production>
      <nonterminal>ArrayCreationExpression</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>new</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>PrimitiveType</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Dims</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ArrayInitializer</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:add>
    <bgf:production>
      <nonterminal>ArrayCreationExpression</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>new</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>TypeName</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Dims</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ArrayInitializer</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:horizontal>ArrayCreationExpression</xbgf:horizontal>
  
  <!--
     - Fail: FormalParameter.
      - [], ,([n(Type), n(VariableDeclaratorId)])
     vs.
      - [], ,([?(t(final)), n(Type), n(VariableDeclaratorId)])
  -->
  <xbgf:inject>
    <bgf:production>
      <nonterminal>FormalParameter</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <terminal>final</terminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Type</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>VariableDeclaratorId</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>
</xbgf:sequence>