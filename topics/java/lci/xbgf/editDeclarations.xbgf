<xbgf:sequence
  xmlns:bgf="http://planet-sl.org/bgf"
  xmlns:xbgf="http://planet-sl.org/xbgf">

  <xbgf:atomic>
    <xbgf:vertical>
      <nonterminal>ArrayInitializer</nonterminal>
    </xbgf:vertical>
    <xbgf:disappear>
      <bgf:production>
        <nonterminal>ArrayInitializer</nonterminal>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>{</terminal>
            </bgf:expression>
            <bgf:expression>
              <marked>
                <bgf:expression>
                  <optional>
                    <bgf:expression>
                      <terminal>,</terminal>
                    </bgf:expression>
                  </optional>
                </bgf:expression>
              </marked>
            </bgf:expression>
            <bgf:expression>
              <terminal>}</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </bgf:production>
    </xbgf:disappear>
    <xbgf:horizontal>ArrayInitializer</xbgf:horizontal>
  </xbgf:atomic>
  <xbgf:factor>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>{</terminal>
            </bgf:expression>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <nonterminal>VariableInitializer</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <star>
                    <bgf:expression>
                      <sequence>
                        <bgf:expression>
                          <terminal>,</terminal>
                        </bgf:expression>
                        <bgf:expression>
                          <nonterminal>VariableInitializer</nonterminal>
                        </bgf:expression>
                      </sequence>
                    </bgf:expression>
                  </star>
                </bgf:expression>
              </sequence>
            </bgf:expression>
            <bgf:expression>
              <optional>
                <bgf:expression>
                  <terminal>,</terminal>
                </bgf:expression>
              </optional>
            </bgf:expression>
            <bgf:expression>
              <terminal>}</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>{</terminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>}</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <terminal>{</terminal>
        </bgf:expression>
        <bgf:expression>
          <choice>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <sequence>
                    <bgf:expression>
                      <nonterminal>VariableInitializer</nonterminal>
                    </bgf:expression>
                    <bgf:expression>
                      <star>
                        <bgf:expression>
                          <sequence>
                            <bgf:expression>
                              <terminal>,</terminal>
                            </bgf:expression>
                            <bgf:expression>
                              <nonterminal>VariableInitializer</nonterminal>
                            </bgf:expression>
                          </sequence>
                        </bgf:expression>
                      </star>
                    </bgf:expression>
                  </sequence>
                </bgf:expression>
                <bgf:expression>
                  <optional>
                    <bgf:expression>
                      <terminal>,</terminal>
                    </bgf:expression>
                  </optional>
                </bgf:expression>
              </sequence>
            </bgf:expression>
            <bgf:expression>
              <epsilon/>
            </bgf:expression>
          </choice>
        </bgf:expression>
        <bgf:expression>
          <terminal>}</terminal>
        </bgf:expression>
      </sequence>
    </bgf:expression>
  </xbgf:factor>
  <xbgf:massage>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <nonterminal>VariableInitializer</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <star>
                    <bgf:expression>
                      <sequence>
                        <bgf:expression>
                          <terminal>,</terminal>
                        </bgf:expression>
                        <bgf:expression>
                          <nonterminal>VariableInitializer</nonterminal>
                        </bgf:expression>
                      </sequence>
                    </bgf:expression>
                  </star>
                </bgf:expression>
              </sequence>
            </bgf:expression>
            <bgf:expression>
              <optional>
                <bgf:expression>
                  <terminal>,</terminal>
                </bgf:expression>
              </optional>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <epsilon/>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <nonterminal>VariableInitializer</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <star>
                    <bgf:expression>
                      <sequence>
                        <bgf:expression>
                          <terminal>,</terminal>
                        </bgf:expression>
                        <bgf:expression>
                          <nonterminal>VariableInitializer</nonterminal>
                        </bgf:expression>
                      </sequence>
                    </bgf:expression>
                  </star>
                </bgf:expression>
              </sequence>
            </bgf:expression>
            <bgf:expression>
              <optional>
                <bgf:expression>
                  <terminal>,</terminal>
                </bgf:expression>
              </optional>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </optional>
    </bgf:expression>
  </xbgf:massage>

  <!-- BREFACTOR 
  Can't really match this
  
   - Fail: InterfaceMethodOrFieldRest.
      - [], ;([,([n(VariableDeclaratorRest), *(,([t((,)), n(Identifier), n(VariableDeclaratorRest)])), t((;))]), ,([n(FormalParameters), *(,([t([), t(])])), ?(,([t(throws), n(TypeList)])), t((;))])])
     vs.
      - [], ;([,([n(ConstantDeclaratorsRest), t((;))]), n(InterfaceMethodDeclaratorRest)])
 
  -->
  <xbgf:redefine>
    <bgf:production>
      <nonterminal>InterfaceMethodOrFieldRest</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>ConstantDeclaratorsRest</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>;</terminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>InterfaceMethodDeclaratorRest</nonterminal>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:redefine>
  <xbgf:vertical>
    <nonterminal>InterfaceMethodOrFieldRest</nonterminal>
  </xbgf:vertical>
  <!-- BREFACTOR -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>ConstantDeclaratorsRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ConstantDeclaratorRest</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <star>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>,</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>ConstantDeclarator</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </star>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  <!-- BREFACTOR -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>InterfaceMethodDeclaratorRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>FormalParameters</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>BracketsOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>throws</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>QualifiedIdentifierList</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  <!-- BREFACTOR -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>ConstantDeclarator</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ConstantDeclaratorRest</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  <!-- BREFACTOR -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>ConstantDeclaratorRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>BracketsOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>=</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>VariableInitializer</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>

  <!-- 
   - Fail: ClassBodyDeclaration.
      - [], ;([n(ClassMemberDeclaration), n(StaticInitializer), n(ConstructorDeclaration)])
     vs.
      - [], ;([t((;)), ,([?(t(static)), n(Block)]), ,([n(ModifiersOpt), n(MethodOrFieldDecl)]), ,([n(ModifiersOpt), t(void), n(Identifier), n(MethodDeclaratorRest)]), ,([n(ModifiersOpt), n(Identifier), n(ConstructorDeclaratorRest)]), ,([n(ModifiersOpt), n(ClassOrInterfaceDeclaration)])])
  -->
  <xbgf:horizontal>ClassMemberDeclaration</xbgf:horizontal>
  <xbgf:inline>ClassMemberDeclaration</xbgf:inline>
  <xbgf:inline>StaticInitializer</xbgf:inline>
  <xbgf:inline>ConstructorDeclaration</xbgf:inline>
  <xbgf:inline>MethodDeclaration</xbgf:inline>
  <xbgf:distribute>
    <nonterminal>ClassBodyDeclaration</nonterminal>
  </xbgf:distribute>
  <xbgf:vertical>
    <nonterminal>ClassBodyDeclaration</nonterminal>
  </xbgf:vertical>

  <!-- ISSUE EXTEND
   - Fail: ClassBodyDeclaration.
               ,([t(static), n(Block)]),
     vs.
               ,([?(t(static)), n(Block)]),
  -->
  <xbgf:widen>
    <bgf:expression>
      <terminal>static</terminal>
    </bgf:expression>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <terminal>static</terminal>
        </bgf:expression>
      </optional>
    </bgf:expression>
    <in>
      <nonterminal>ClassBodyDeclaration</nonterminal>
    </in>
  </xbgf:widen>

  <!-- 
   - Fail: ClassBodyDeclaration.
               ,([n(ModifiersOpt), t(void), n(Identifier), n(FormalParameters), *(,([t([), t(])])), ?(,([t(throws), n(TypeList)])), n(MethodBody)]),
     vs.
               ,([n(ModifiersOpt), t(void), n(Identifier), n(MethodDeclaratorRest)]),
  -->
  <xbgf:extract>
    <bgf:production>
      <nonterminal>MethodDeclaratorRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>FormalParameters</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <star>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>[</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <terminal>]</terminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </star>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>throws</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>QualifiedIdentifierList</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>MethodBody</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>
  <xbgf:fold>
    <nonterminal>BracketsOpt</nonterminal>
    <in>
      <nonterminal>MethodDeclaratorRest</nonterminal>
    </in>
  </xbgf:fold>

  <!-- 
   - Fail: ClassBodyDeclaration.
     - [], ,([n(ModifiersOpt), n(ConstructorDeclarator), ?(,([t(throws), n(TypeList)])), n(ConstructorBody)])
     vs.
     - [], ;(,([n(ModifiersOpt), n(Identifier), n(ConstructorDeclaratorRest)]),
  -->
  <xbgf:inline>ConstructorDeclarator</xbgf:inline>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>ConstructorDeclaratorRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>FormalParameters</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>throws</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>QualifiedIdentifierList</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ConstructorBody</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>

  <!-- ISSUE PERMISSIVENESS
   - Fail: ConstructorDeclaratorRest.
      - [], ,([n(FormalParameters), ?(,([t(throws), n(QualifiedIdentifierList)])), n(ConstructorBody)])
     vs.
      - [], ,([n(FormalParameters), ?(,([t(throws), n(QualifiedIdentifierList)])), n(MethodBody)])
ConstructorBody:
        "{" ExplicitConstructorInvocation ? BlockStatements "}"
MethodBody:
        Block
MethodBody:
        ";"
Block:
        "{" BlockStatements "}"
  -->
  <xbgf:disappear>
    <bgf:production>
      <nonterminal>ConstructorBody</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>{</terminal>
          </bgf:expression>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <nonterminal>ExplicitConstructorInvocation</nonterminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>BlockStatements</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>}</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:disappear>
  <xbgf:eliminate>ExplicitConstructorInvocation</xbgf:eliminate>
  <xbgf:fold>
    <nonterminal>Block</nonterminal>
  </xbgf:fold>
  <xbgf:upgrade>
    <bgf:production>
      <nonterminal>ConstructorBody</nonterminal>
      <bgf:expression>
        <marked>
          <bgf:expression>
            <nonterminal>MethodBody</nonterminal>
          </bgf:expression>
        </marked>
      </bgf:expression>
    </bgf:production>
    <bgf:production>
      <nonterminal>MethodBody</nonterminal>
      <bgf:expression>
        <nonterminal>Block</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:upgrade>
  <xbgf:inline>ConstructorBody</xbgf:inline>
  
  <!-- ISSUE EXTEND
  Empty class body declaration -->
  <xbgf:add>
    <vertical>
      <bgf:production>
        <nonterminal>ClassBodyDeclaration</nonterminal>
        <bgf:expression>
          <terminal>;</terminal>
        </bgf:expression>
      </bgf:production>
    </vertical>
  </xbgf:add>

  <!-- ISSUE EXTEND
  Inner class declaration -->
  <xbgf:add>
    <vertical>
      <bgf:production>
        <nonterminal>ClassBodyDeclaration</nonterminal>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>ModifiersOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </bgf:production>
    </vertical>
  </xbgf:add>

  <!-- 
   - Fail: ClassBodyDeclaration.
      - [], ;([,([n(ModifiersOpt), n(Type), n(VariableDeclarators), t((;))]),
               ,([n(ModifiersOpt), n(Type), n(Identifier), n(FormalParameters), *(,([t([), t(])])), ?(,([t(throws), n(TypeList)])), n(MethodBody)]),
     vs.
      - [], ;([
               ,([n(ModifiersOpt), n(MethodOrFieldDecl)]),
  -->
  <xbgf:unfold>
    <nonterminal>VariableDeclarators</nonterminal>
    <in>
      <nonterminal>ClassBodyDeclaration</nonterminal>
    </in>
  </xbgf:unfold>
  <xbgf:unfold>
    <nonterminal>VariableDeclarator</nonterminal>
    <in>
      <nonterminal>ClassBodyDeclaration</nonterminal>
    </in>
  </xbgf:unfold>
  <xbgf:disappear>
    <bgf:production>
      <nonterminal>ClassBodyDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ModifiersOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Type</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>VariableDeclaratorRest</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <star>
                  <bgf:expression>
                    <sequence>
                      <bgf:expression>
                        <terminal>,</terminal>
                      </bgf:expression>
                      <bgf:expression>
                        <nonterminal>Identifier</nonterminal>
                      </bgf:expression>
                      <bgf:expression>
                        <nonterminal>VariableDeclaratorRest</nonterminal>
                      </bgf:expression>
                    </sequence>
                  </bgf:expression>
                </star>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:disappear>
  <xbgf:project>
    <bgf:production>
      <nonterminal>ClassBodyDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ModifiersOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Type</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>VariableDeclaratorRest</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <terminal>;</terminal>
              </bgf:expression>
            </marked>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:project>

  <!-- 
      - [], ,([n(ModifiersOpt), n(Type), n(Identifier), n(MethodDeclaratorRest)])
      - [], ,([n(ModifiersOpt), n(Type), n(Identifier), n(VariableDeclaratorRest)])
  -->
  <xbgf:atomic>
    <xbgf:horizontal>ClassBodyDeclaration</xbgf:horizontal>
    <xbgf:factor>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>ModifiersOpt</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>Type</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>Identifier</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>MethodDeclaratorRest</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>ModifiersOpt</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>Type</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>Identifier</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>VariableDeclaratorRest</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </choice>
      </bgf:expression>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ModifiersOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Type</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <choice>
              <bgf:expression>
                <nonterminal>MethodDeclaratorRest</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>VariableDeclaratorRest</nonterminal>
              </bgf:expression>
            </choice>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </xbgf:factor>
    <xbgf:extract>
      <bgf:production>
        <nonterminal>MethodOrFieldRest</nonterminal>
        <bgf:expression>
          <choice>
            <bgf:expression>
              <nonterminal>MethodDeclaratorRest</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>VariableDeclaratorRest</nonterminal>
            </bgf:expression>
          </choice>
        </bgf:expression>
      </bgf:production>
    </xbgf:extract>
    <xbgf:vertical>
      <nonterminal>MethodOrFieldRest</nonterminal>
    </xbgf:vertical>
    <xbgf:extract>
      <bgf:production>
        <nonterminal>MethodOrFieldDecl</nonterminal>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>Type</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Identifier</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>MethodOrFieldRest</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </bgf:production>
    </xbgf:extract>
    <xbgf:vertical>
      <nonterminal>ClassBodyDeclaration</nonterminal>
    </xbgf:vertical>
  </xbgf:atomic>

  <!-- ISSUE  EXTEND -->
  <xbgf:add>
    <vertical>
      <bgf:production>
        <nonterminal>InterfaceBodyDeclaration</nonterminal>
        <bgf:expression>
          <terminal>;</terminal>
        </bgf:expression>
      </bgf:production>
    </vertical>
  </xbgf:add>
</xbgf:sequence>