<xbgf:sequence
  xmlns:bgf="http://planet-sl.org/bgf"
  xmlns:xbgf="http://planet-sl.org/xbgf">

  <!-- ISSUE EXTEND -->
  <xbgf:introduce>
    <bgf:production>
      <nonterminal>QualifiedIdentifierList</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>QualifiedIdentifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <star>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>,</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>QualifiedIdentifier</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </star>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:introduce>

  <!-- ISSUE PERMISSIVENESS
  multiple mismatches -->
  <!-- GENERALITY -->
  <xbgf:replace>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <terminal>throws</terminal>
        </bgf:expression>
        <bgf:expression>
          <nonterminal>TypeList</nonterminal>
        </bgf:expression>
      </sequence>
    </bgf:expression>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <terminal>throws</terminal>
        </bgf:expression>
        <bgf:expression>
          <nonterminal>QualifiedIdentifierList</nonterminal>
        </bgf:expression>
      </sequence>
    </bgf:expression>
  </xbgf:replace>

  <!--  
   - Fail: InterfaceDeclaration.
      - [], ,([?(n(Modifiers)), t(interface), n(Identifier), ?(n(ExtendsInterfaces)), n(InterfaceBody)])
     vs.
      - [], ,([t(interface), n(Identifier), ?(,([t(extends), n(TypeList)])), n(InterfaceBody)])
      
 with
   p([], 'ExtendsInterfaces', ;([','([t(extends), n('InterfaceType')]), ','([n('ExtendsInterfaces'), t((',')), n('InterfaceType')])]))
 -->
  <xbgf:deyaccify>ExtendsInterfaces</xbgf:deyaccify>
  <xbgf:fold>
    <nonterminal>TypeList</nonterminal>
    <in>
      <nonterminal>ExtendsInterfaces</nonterminal>
    </in>
  </xbgf:fold>
  <xbgf:disappear>
    <bgf:production>
      <nonterminal>InterfaceDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <nonterminal>Modifiers</nonterminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <terminal>interface</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ExtendsInterfaces</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>InterfaceBody</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:disappear>
  <xbgf:inline>ExtendsInterfaces</xbgf:inline>

  <!-- 
   - Fail: ClassDeclaration.
      - [], ,([?(n(Modifiers)), t(class), n(Identifier), ?(n(Super)), ?(n(Interfaces)), n(ClassBody)])
     vs.
      - [], ,([t(class), n(Identifier), ?(,([t(extends), n(Type)])), ?(,([t(implements), n(TypeList)])), n(ClassBody)])
  -->
  <xbgf:disappear>
    <bgf:production>
      <nonterminal>ClassDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <nonterminal>Modifiers</nonterminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <terminal>class</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>Super</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>Interfaces</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ClassBody</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:disappear>
  <xbgf:inline>Super</xbgf:inline>
  <xbgf:inline>Interfaces</xbgf:inline>

  <!-- 
   - Fail: TypeDeclaration.
      - [], ;([n(ClassDeclaration), n(InterfaceDeclaration), t((;))])
     vs.
      - [], ;([n(ClassOrInterfaceDeclaration), t((;))])
   - Fail: ClassOrInterfaceDeclaration.
      - [], ;([n(ClassDeclaration), n(InterfaceDeclaration)])
     vs.
      - [], ,([n(ModifiersOpt), ;([n(ClassDeclaration), n(InterfaceDeclaration)])])
  -->
  <xbgf:horizontal>TypeDeclaration</xbgf:horizontal>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <nonterminal>ClassDeclaration</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>InterfaceDeclaration</nonterminal>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>
  <xbgf:vertical>
    <nonterminal>TypeDeclaration</nonterminal>
  </xbgf:vertical>
  <xbgf:appear>
    <bgf:production>
      <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <nonterminal>Modifiers</nonterminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <choice>
              <bgf:expression>
                <nonterminal>ClassDeclaration</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>InterfaceDeclaration</nonterminal>
              </bgf:expression>
            </choice>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:appear>

  <!-- ISSUE EXTEND
   - Fail: FormalParameter.
      - [], ,([n(Type), n(VariableDeclaratorId)])
     vs.
      - [], ,([?(t(final)), n(Type), n(VariableDeclaratorId)])
  -->
  <xbgf:appear>
    <bgf:production>
      <nonterminal>FormalParameter</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <terminal>final</terminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Type</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>VariableDeclaratorId</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:appear>

  <!-- 
   - Fail: SwitchBlockStatementGroup.
      - [], ,([n(SwitchLabels), n(BlockStatements)])
     vs.
      - [], ,([n(SwitchLabel), n(BlockStatements)])
  with
    p([], 'SwitchLabels', ;([n('SwitchLabel'), ','([n('SwitchLabels'), n('SwitchLabel')])])),
  -->
  <xbgf:deyaccify>SwitchLabels</xbgf:deyaccify>

  <!-- 
   - Fail: ImportDeclaration.
      - [], ;([n(SingleTypeImportDeclaration), n(TypeImportOnDemandDeclaration)])
     vs.
      - [], ,([t(import), n(QualifiedIdentifier), ?(,([t(.), t(*)])), t((;))])
      
  with
     p([], 'SingleTypeImportDeclaration', ','([t(import), n('QualifiedIdentifier'), t((;))])),
     p([], 'TypeImportOnDemandDeclaration', ','([t(import), n('QualifiedIdentifier'), t('.'), t(*), t((;))])),
  -->
  <xbgf:inline>SingleTypeImportDeclaration</xbgf:inline>
  <xbgf:inline>TypeImportOnDemandDeclaration</xbgf:inline>
  <xbgf:horizontal>ImportDeclaration</xbgf:horizontal>
  <xbgf:factor>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>import</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>QualifiedIdentifier</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>;</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>import</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>QualifiedIdentifier</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>.</terminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>*</terminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>;</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <terminal>import</terminal>
        </bgf:expression>
        <bgf:expression>
          <nonterminal>QualifiedIdentifier</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <choice>
            <bgf:expression>
              <epsilon/>
            </bgf:expression>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <terminal>.</terminal>
                </bgf:expression>
                <bgf:expression>
                  <terminal>*</terminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
          </choice>
        </bgf:expression>
        <bgf:expression>
          <terminal>;</terminal>
        </bgf:expression>
      </sequence>
    </bgf:expression>
  </xbgf:factor>
  <xbgf:massage>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <epsilon/>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>.</terminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>*</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>.</terminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>*</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </optional>
    </bgf:expression>
  </xbgf:massage>

  <!--  
   - Fail: ArrayInitializer.
      - [], ,([t({), ?(n(VariableInitializers)), ?(t((,))), t(})])
     vs.
      - [], ,([t({), ?(,([n(VariableInitializer), *(,([t((,)), n(VariableInitializer)])), ?(t((,)))])), t(})])
  -->
  <xbgf:deyaccify>VariableInitializers</xbgf:deyaccify>
  <xbgf:inline>VariableInitializers</xbgf:inline>

  <!-- 
   - Fail: ClassBody.
      - [], ,([t({), ?(n(ClassBodyDeclarations)), t(})])
     vs.
      - [], ,([t({), *(n(ClassBodyDeclaration)), t(})])
  -->
  <xbgf:deyaccify>ClassBodyDeclarations</xbgf:deyaccify>
  <xbgf:inline>ClassBodyDeclarations</xbgf:inline>
  <xbgf:massage>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <plus>
            <bgf:expression>
              <nonterminal>ClassBodyDeclaration</nonterminal>
            </bgf:expression>
          </plus>
        </bgf:expression>
      </optional>
    </bgf:expression>
    <bgf:expression>
      <star>
        <bgf:expression>
          <nonterminal>ClassBodyDeclaration</nonterminal>
        </bgf:expression>
      </star>
    </bgf:expression>
  </xbgf:massage>

  <!-- 
   - Fail: InterfaceBody.
      - [], ,([t({), ?(n(InterfaceMemberDeclarations)), t(})])
     vs.
      - [], ,([t({), *(n(InterfaceBodyDeclaration)), t(})])
  -->
  <xbgf:deyaccify>InterfaceMemberDeclarations</xbgf:deyaccify>
  <xbgf:inline>InterfaceMemberDeclarations</xbgf:inline>
  <xbgf:massage>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <plus>
            <bgf:expression>
              <nonterminal>InterfaceMemberDeclaration</nonterminal>
            </bgf:expression>
          </plus>
        </bgf:expression>
      </optional>
    </bgf:expression>
    <bgf:expression>
      <star>
        <bgf:expression>
          <nonterminal>InterfaceMemberDeclaration</nonterminal>
        </bgf:expression>
      </star>
    </bgf:expression>
  </xbgf:massage>
  <xbgf:rename>
    <nonterminal>
      <from>InterfaceMemberDeclaration</from>
      <to>InterfaceBodyDeclaration</to>
    </nonterminal>
  </xbgf:rename>

  <!-- 
   - Fail: CompilationUnit.
      - [], ,([?(n(PackageDeclaration)), ?(n(ImportDeclarations)), ?(n(TypeDeclarations))])
     vs.
      - [], ,([?(,([t(package), n(QualifiedIdentifier), t((;))])), *(n(ImportDeclaration)), *(n(TypeDeclaration))])
  -->
  <xbgf:deyaccify>ImportDeclarations</xbgf:deyaccify>
  <xbgf:deyaccify>TypeDeclarations</xbgf:deyaccify>
  <xbgf:inline>ImportDeclarations</xbgf:inline>
  <xbgf:inline>TypeDeclarations</xbgf:inline>
  <xbgf:inline>PackageDeclaration</xbgf:inline>
  <xbgf:massage>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <plus>
            <bgf:expression>
              <nonterminal>ImportDeclaration</nonterminal>
            </bgf:expression>
          </plus>
        </bgf:expression>
      </optional>
    </bgf:expression>
    <bgf:expression>
      <star>
        <bgf:expression>
          <nonterminal>ImportDeclaration</nonterminal>
        </bgf:expression>
      </star>
    </bgf:expression>
  </xbgf:massage>
  <xbgf:massage>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <plus>
            <bgf:expression>
              <nonterminal>TypeDeclaration</nonterminal>
            </bgf:expression>
          </plus>
        </bgf:expression>
      </optional>
    </bgf:expression>
    <bgf:expression>
      <star>
        <bgf:expression>
          <nonterminal>TypeDeclaration</nonterminal>
        </bgf:expression>
      </star>
    </bgf:expression>
  </xbgf:massage>

  <!-- 
   - Fail: InterfaceBodyDeclaration.
      - [], ;([n(ConstantDeclaration), n(AbstractMethodDeclaration)])
     vs.
      - [], ;([t((;)), ,([n(ModifiersOpt), n(InterfaceMemberDecl)])])
  -->
  <xbgf:inline>ConstantDeclaration</xbgf:inline>
  <xbgf:inline>FieldDeclaration</xbgf:inline>
  <xbgf:inline>AbstractMethodDeclaration</xbgf:inline>
  <xbgf:horizontal>MethodHeader</xbgf:horizontal>
  <xbgf:inline>MethodHeader</xbgf:inline>

  <!-- 
   - Fail: ModifiersOpt.
      - [], ?(n(Modifiers))
     vs.
      - [], *(n(Modifier))
  -->
  <xbgf:extract>
    <bgf:production>
      <nonterminal>ModifiersOpt</nonterminal>
      <bgf:expression>
        <optional>
          <bgf:expression>
            <nonterminal>Modifiers</nonterminal>
          </bgf:expression>
        </optional>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>
  <xbgf:deyaccify>Modifiers</xbgf:deyaccify>
  <xbgf:inline>Modifiers</xbgf:inline>
  <xbgf:massage>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <plus>
            <bgf:expression>
              <nonterminal>Modifier</nonterminal>
            </bgf:expression>
          </plus>
        </bgf:expression>
      </optional>
    </bgf:expression>
    <bgf:expression>
      <star>
        <bgf:expression>
          <nonterminal>Modifier</nonterminal>
        </bgf:expression>
      </star>
    </bgf:expression>
  </xbgf:massage>

  <!-- 
   - Fail: InterfaceBodyDeclaration.
      - [], ;([,([n(ModifiersOpt), n(Type), n(VariableDeclarators), t((;))]),
               ,([n(ModifiersOpt), n(Type), n(MethodDeclarator), ?(n(Throws)), t((;))]),
               ,([n(ModifiersOpt), t(void), n(MethodDeclarator), ?(n(Throws)), t((;))])])
     vs.
      - [], ;([t((;)), ,([n(ModifiersOpt), n(InterfaceMemberDecl)])])
  -->
  <xbgf:horizontal>InterfaceBodyDeclaration</xbgf:horizontal>
  <xbgf:distribute>
    <nonterminal>InterfaceBodyDeclaration</nonterminal>
  </xbgf:distribute>
  <xbgf:factor>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>ModifiersOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Type</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>VariableDeclarators</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>;</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>ModifiersOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Type</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>MethodDeclarator</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <optional>
                <bgf:expression>
                  <nonterminal>Throws</nonterminal>
                </bgf:expression>
              </optional>
            </bgf:expression>
            <bgf:expression>
              <terminal>;</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>ModifiersOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>void</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>MethodDeclarator</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <optional>
                <bgf:expression>
                  <nonterminal>Throws</nonterminal>
                </bgf:expression>
              </optional>
            </bgf:expression>
            <bgf:expression>
              <terminal>;</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <nonterminal>ModifiersOpt</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <choice>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <nonterminal>Type</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>VariableDeclarators</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <terminal>;</terminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <nonterminal>Type</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>MethodDeclarator</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <optional>
                    <bgf:expression>
                      <nonterminal>Throws</nonterminal>
                    </bgf:expression>
                  </optional>
                </bgf:expression>
                <bgf:expression>
                  <terminal>;</terminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <terminal>void</terminal>
                </bgf:expression>
                <bgf:expression>
                  <nonterminal>MethodDeclarator</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <optional>
                    <bgf:expression>
                      <nonterminal>Throws</nonterminal>
                    </bgf:expression>
                  </optional>
                </bgf:expression>
                <bgf:expression>
                  <terminal>;</terminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
          </choice>
        </bgf:expression>
      </sequence>
    </bgf:expression>
  </xbgf:factor>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>InterfaceMemberDecl</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>Type</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>VariableDeclarators</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>;</terminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>Type</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>MethodDeclarator</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <nonterminal>Throws</nonterminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
              <bgf:expression>
                <terminal>;</terminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <terminal>void</terminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>MethodDeclarator</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <nonterminal>Throws</nonterminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
              <bgf:expression>
                <terminal>;</terminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>
  <!-- ISSUE  EXTEND -->
  <xbgf:add>
    <bgf:production>
      <nonterminal>InterfaceBodyDeclaration</nonterminal>
      <bgf:expression>
        <terminal>;</terminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>

  <!-- 
   - Fail: InterfaceMemberDecl.
      - [], ;([,([n(Type), n(VariableDeclarators), t((;))]),
               ,([n(Type), n(MethodDeclarator), ?(n(Throws)), t((;))]),
               ,([t(void), n(MethodDeclarator), ?(n(Throws)), t((;))])])
     vs.
      - [], ;([  n(InterfaceMethodOrFieldDecl),
              ,([t(void), n(Identifier), n(VoidInterfaceMethodDeclaratorRest)]),
                 n(ClassOrInterfaceDeclaration)])
  -->
  <xbgf:unfold>
    <nonterminal>VariableDeclarators</nonterminal>
    <in>
      <nonterminal>InterfaceMemberDecl</nonterminal>
    </in>
  </xbgf:unfold>
  <xbgf:deyaccify>MethodDeclarator</xbgf:deyaccify>
  <xbgf:inline>MethodDeclarator</xbgf:inline>

  <!-- 
   - Fail: InterfaceMemberDecl.
      - [], ;([,([n(Type), n(VariableDeclarator), *(,([t((,)), n(VariableDeclarator)])), t((;))]),
               ,([n(Type), n(Identifier), t((), ?(n(FormalParameterList)), t()), *(,([t([), t(])])), ?(n(Throws)), t((;))]),
               ,([t(void), n(Identifier), t((), ?(n(FormalParameterList)), t()), *(,([t([), t(])])), ?(n(Throws)), t((;))])])
     vs.
      - [], ;([n(InterfaceMethodOrFieldDecl),
               ,([t(void), n(Identifier), n(VoidInterfaceMethodDeclaratorRest)]),
               n(ClassOrInterfaceDeclaration)])
               
   p([], 'InterfaceMethodOrFieldDecl', ','([n('Type'), n('Identifier'), n('InterfaceMethodOrFieldRest')])),
  -->
  <xbgf:unfold>
    <nonterminal>VariableDeclarator</nonterminal>
    <in>
      <nonterminal>InterfaceMemberDecl</nonterminal>
    </in>
  </xbgf:unfold>
  <xbgf:factor>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>Type</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Identifier</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>VariableDeclaratorRest</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <star>
                <bgf:expression>
                  <sequence>
                    <bgf:expression>
                      <terminal>,</terminal>
                    </bgf:expression>
                    <bgf:expression>
                      <nonterminal>Identifier</nonterminal>
                    </bgf:expression>
                    <bgf:expression>
                      <nonterminal>VariableDeclaratorRest</nonterminal>
                    </bgf:expression>
                  </sequence>
                </bgf:expression>
              </star>
            </bgf:expression>
            <bgf:expression>
              <terminal>;</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>Type</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Identifier</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <terminal>(</terminal>
            </bgf:expression>
            <bgf:expression>
              <optional>
                <bgf:expression>
                  <nonterminal>FormalParameterList</nonterminal>
                </bgf:expression>
              </optional>
            </bgf:expression>
            <bgf:expression>
              <terminal>)</terminal>
            </bgf:expression>
            <bgf:expression>
              <star>
                <bgf:expression>
                  <sequence>
                    <bgf:expression>
                      <terminal>[</terminal>
                    </bgf:expression>
                    <bgf:expression>
                      <terminal>]</terminal>
                    </bgf:expression>
                  </sequence>
                </bgf:expression>
              </star>
            </bgf:expression>
            <bgf:expression>
              <optional>
                <bgf:expression>
                  <nonterminal>Throws</nonterminal>
                </bgf:expression>
              </optional>
            </bgf:expression>
            <bgf:expression>
              <terminal>;</terminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <nonterminal>Type</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <nonterminal>Identifier</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <choice>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <nonterminal>VariableDeclaratorRest</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <star>
                    <bgf:expression>
                      <sequence>
                        <bgf:expression>
                          <terminal>,</terminal>
                        </bgf:expression>
                        <bgf:expression>
                          <nonterminal>Identifier</nonterminal>
                        </bgf:expression>
                        <bgf:expression>
                          <nonterminal>VariableDeclaratorRest</nonterminal>
                        </bgf:expression>
                      </sequence>
                    </bgf:expression>
                  </star>
                </bgf:expression>
                <bgf:expression>
                  <terminal>;</terminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <terminal>(</terminal>
                </bgf:expression>
                <bgf:expression>
                  <optional>
                    <bgf:expression>
                      <nonterminal>FormalParameterList</nonterminal>
                    </bgf:expression>
                  </optional>
                </bgf:expression>
                <bgf:expression>
                  <terminal>)</terminal>
                </bgf:expression>
                <bgf:expression>
                  <star>
                    <bgf:expression>
                      <sequence>
                        <bgf:expression>
                          <terminal>[</terminal>
                        </bgf:expression>
                        <bgf:expression>
                          <terminal>]</terminal>
                        </bgf:expression>
                      </sequence>
                    </bgf:expression>
                  </star>
                </bgf:expression>
                <bgf:expression>
                  <optional>
                    <bgf:expression>
                      <nonterminal>Throws</nonterminal>
                    </bgf:expression>
                  </optional>
                </bgf:expression>
                <bgf:expression>
                  <terminal>;</terminal>
                </bgf:expression>
              </sequence>
            </bgf:expression>
          </choice>
        </bgf:expression>
      </sequence>
    </bgf:expression>
  </xbgf:factor>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>InterfaceMethodOrFieldRest</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>VariableDeclaratorRest</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <star>
                  <bgf:expression>
                    <sequence>
                      <bgf:expression>
                        <terminal>,</terminal>
                      </bgf:expression>
                      <bgf:expression>
                        <nonterminal>Identifier</nonterminal>
                      </bgf:expression>
                      <bgf:expression>
                        <nonterminal>VariableDeclaratorRest</nonterminal>
                      </bgf:expression>
                    </sequence>
                  </bgf:expression>
                </star>
              </bgf:expression>
              <bgf:expression>
                <terminal>;</terminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <terminal>(</terminal>
              </bgf:expression>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <nonterminal>FormalParameterList</nonterminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
              <bgf:expression>
                <terminal>)</terminal>
              </bgf:expression>
              <bgf:expression>
                <star>
                  <bgf:expression>
                    <sequence>
                      <bgf:expression>
                        <terminal>[</terminal>
                      </bgf:expression>
                      <bgf:expression>
                        <terminal>]</terminal>
                      </bgf:expression>
                    </sequence>
                  </bgf:expression>
                </star>
              </bgf:expression>
              <bgf:expression>
                <optional>
                  <bgf:expression>
                    <nonterminal>Throws</nonterminal>
                  </bgf:expression>
                </optional>
              </bgf:expression>
              <bgf:expression>
                <terminal>;</terminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>InterfaceMethodOrFieldDecl</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Type</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>InterfaceMethodOrFieldRest</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>VoidInterfaceMethodDeclaratorRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>FormalParameterList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
          <bgf:expression>
            <star>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>[</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <terminal>]</terminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </star>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>Throws</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
    <in>
      <nonterminal>InterfaceMemberDecl</nonterminal>
    </in>
  </xbgf:extract>

  <!-- ISSUE EXTEND
   - Fail: InterfaceMemberDecl.
      - [], ;([n(InterfaceMethodOrFieldDecl), ,([t(void), n(Identifier), n(VoidInterfaceMethodDeclaratorRest)])])
     vs.
      - [], ;([n(InterfaceMethodOrFieldDecl), ,([t(void), n(Identifier), n(VoidInterfaceMethodDeclaratorRest)]), n(ClassOrInterfaceDeclaration)])
  -->
  <xbgf:vertical>
    <nonterminal>InterfaceMemberDecl</nonterminal>
  </xbgf:vertical>
  <xbgf:add>
    <bgf:production>
      <nonterminal>InterfaceMemberDecl</nonterminal>
      <bgf:expression>
        <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>

  <!-- 
   - Fail: VoidInterfaceMethodDeclaratorRest.
      - [], ,([t((), ?(n(FormalParameterList)), t()), *(,([t([), t(])])), ?(n(Throws)), t((;))])
     vs.
      - [], ,([n(FormalParameters), n(BracketsOpt), ?(,([t(throws), n(QualifiedIdentifierList)])), t((;))])
  -->
  <xbgf:deyaccify>FormalParameterList</xbgf:deyaccify>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>FormalParameters</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>FormalParameterList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>
  <xbgf:inline>FormalParameterList</xbgf:inline>
  <xbgf:inline>Throws</xbgf:inline>
  <xbgf:fold>
    <nonterminal>BracketsOpt</nonterminal>
    <in>
      <nonterminal>VoidInterfaceMethodDeclaratorRest</nonterminal>
    </in>
  </xbgf:fold>

  <!-- ISSUE CORRECT
  Fixing brutally
  
   - Fail: ArrayInitializer.
      - [], ,([t({), ?(,([n(VariableInitializer), *(,([t((,)), n(VariableInitializer)]))])), ?(t((,))), t(})])
     vs.
      - [], ,([t({), ?(,([n(VariableInitializer), *(,([t((,)), n(VariableInitializer)])), ?(t((,)))])), t(})])
  -->
  <!-- REVISE -->
  <xbgf:replace>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <optional>
            <bgf:expression>
              <sequence>
                <bgf:expression>
                  <nonterminal>VariableInitializer</nonterminal>
                </bgf:expression>
                <bgf:expression>
                  <star>
                    <bgf:expression>
                      <sequence>
                        <bgf:expression>
                          <terminal>,</terminal>
                        </bgf:expression>
                        <bgf:expression>
                          <nonterminal>VariableInitializer</nonterminal>
                        </bgf:expression>
                      </sequence>
                    </bgf:expression>
                  </star>
                </bgf:expression>
              </sequence>
            </bgf:expression>
          </optional>
        </bgf:expression>
        <bgf:expression>
          <optional>
            <bgf:expression>
              <terminal>,</terminal>
            </bgf:expression>
          </optional>
        </bgf:expression>
      </sequence>
    </bgf:expression>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>VariableInitializer</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <star>
                <bgf:expression>
                  <sequence>
                    <bgf:expression>
                      <terminal>,</terminal>
                    </bgf:expression>
                    <bgf:expression>
                      <nonterminal>VariableInitializer</nonterminal>
                    </bgf:expression>
                  </sequence>
                </bgf:expression>
              </star>
            </bgf:expression>
            <bgf:expression>
              <optional>
                <bgf:expression>
                  <terminal>,</terminal>
                </bgf:expression>
              </optional>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </optional>
    </bgf:expression>
    <in>
      <nonterminal>ArrayInitializer</nonterminal>
    </in>
  </xbgf:replace>

  <!-- BREFACTOR 
  Can't really match this
  
   - Fail: InterfaceMethodOrFieldRest.
      - [], ;([,([n(VariableDeclaratorRest), *(,([t((,)), n(Identifier), n(VariableDeclaratorRest)])), t((;))]), ,([n(FormalParameters), *(,([t([), t(])])), ?(,([t(throws), n(TypeList)])), t((;))])])
     vs.
      - [], ;([,([n(ConstantDeclaratorsRest), t((;))]), n(InterfaceMethodDeclaratorRest)])
 
  -->
  <xbgf:redefine>
    <bgf:production>
      <nonterminal>InterfaceMethodOrFieldRest</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>ConstantDeclaratorsRest</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>;</terminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>InterfaceMethodDeclaratorRest</nonterminal>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:redefine>
  <xbgf:vertical>
    <nonterminal>InterfaceMethodOrFieldRest</nonterminal>
  </xbgf:vertical>
  <!-- BREFACTOR -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>ConstantDeclaratorsRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ConstantDeclaratorRest</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <star>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>,</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>ConstantDeclarator</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </star>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  <!-- BREFACTOR -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>InterfaceMethodDeclaratorRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>FormalParameters</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>BracketsOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>throws</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>QualifiedIdentifierList</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  <!-- BREFACTOR -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>ConstantDeclarator</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ConstantDeclaratorRest</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  <!-- BREFACTOR -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>ConstantDeclaratorRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>BracketsOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>=</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>VariableInitializer</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>

  <!-- 
   - Fail: ClassBodyDeclaration.
      - [], ;([n(ClassMemberDeclaration), n(StaticInitializer), n(ConstructorDeclaration)])
     vs.
      - [], ;([t((;)), ,([?(t(static)), n(Block)]), ,([n(ModifiersOpt), n(MethodOrFieldDecl)]), ,([n(ModifiersOpt), t(void), n(Identifier), n(MethodDeclaratorRest)]), ,([n(ModifiersOpt), n(Identifier), n(ConstructorDeclaratorRest)]), ,([n(ModifiersOpt), n(ClassOrInterfaceDeclaration)])])
  -->
  <xbgf:horizontal>ClassMemberDeclaration</xbgf:horizontal>
  <xbgf:inline>ClassMemberDeclaration</xbgf:inline>
  <xbgf:inline>StaticInitializer</xbgf:inline>
  <xbgf:inline>ConstructorDeclaration</xbgf:inline>
  <xbgf:inline>MethodDeclaration</xbgf:inline>
  <xbgf:distribute>
    <nonterminal>ClassBodyDeclaration</nonterminal>
  </xbgf:distribute>
  <xbgf:vertical>
    <nonterminal>ClassBodyDeclaration</nonterminal>
  </xbgf:vertical>

  <!-- ISSUE EXTEND
   - Fail: ClassBodyDeclaration.
               ,([t(static), n(Block)]),
     vs.
               ,([?(t(static)), n(Block)]),
  -->
  <xbgf:widen>
    <bgf:expression>
      <terminal>static</terminal>
    </bgf:expression>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <terminal>static</terminal>
        </bgf:expression>
      </optional>
    </bgf:expression>
    <in>
      <nonterminal>ClassBodyDeclaration</nonterminal>
    </in>
  </xbgf:widen>

  <!-- 
   - Fail: ClassBodyDeclaration.
               ,([n(ModifiersOpt), t(void), n(Identifier), n(FormalParameters), *(,([t([), t(])])), ?(,([t(throws), n(TypeList)])), n(MethodBody)]),
     vs.
               ,([n(ModifiersOpt), t(void), n(Identifier), n(MethodDeclaratorRest)]),
  -->
  <xbgf:extract>
    <bgf:production>
      <nonterminal>MethodDeclaratorRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>FormalParameters</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <star>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>[</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <terminal>]</terminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </star>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>throws</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>QualifiedIdentifierList</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>MethodBody</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>
  <xbgf:fold>
    <nonterminal>BracketsOpt</nonterminal>
    <in>
      <nonterminal>MethodDeclaratorRest</nonterminal>
    </in>
  </xbgf:fold>

  <!-- 
   - Fail: ClassBodyDeclaration.
     - [], ,([n(ModifiersOpt), n(ConstructorDeclarator), ?(,([t(throws), n(TypeList)])), n(ConstructorBody)])
     vs.
     - [], ;(,([n(ModifiersOpt), n(Identifier), n(ConstructorDeclaratorRest)]),
  -->
  <xbgf:inline>ConstructorDeclarator</xbgf:inline>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>ConstructorDeclaratorRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>FormalParameters</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <sequence>
                  <bgf:expression>
                    <terminal>throws</terminal>
                  </bgf:expression>
                  <bgf:expression>
                    <nonterminal>QualifiedIdentifierList</nonterminal>
                  </bgf:expression>
                </sequence>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ConstructorBody</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>

  <!-- ISSUE PERMISSIVENESS
   - Fail: ConstructorDeclaratorRest.
      - [], ,([n(FormalParameters), ?(,([t(throws), n(QualifiedIdentifierList)])), n(ConstructorBody)])
     vs.
      - [], ,([n(FormalParameters), ?(,([t(throws), n(QualifiedIdentifierList)])), n(MethodBody)])
  -->
  <!-- GENERALITY -->
  <xbgf:replace>
    <bgf:expression>
      <nonterminal>ConstructorBody</nonterminal>
    </bgf:expression>
    <bgf:expression>
      <nonterminal>MethodBody</nonterminal>
    </bgf:expression>
    <in>
      <nonterminal>ConstructorDeclaratorRest</nonterminal>
    </in>
  </xbgf:replace>
  <xbgf:eliminate>ConstructorBody</xbgf:eliminate>
  <xbgf:eliminate>ExplicitConstructorInvocation</xbgf:eliminate>

  <!-- ISSUE EXTEND
  Empty class body declaration -->
  <xbgf:add>
    <bgf:production>
      <nonterminal>ClassBodyDeclaration</nonterminal>
      <bgf:expression>
        <terminal>;</terminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>

  <!-- ISSUE EXTEND
  Inner class declaration -->
  <xbgf:add>
    <bgf:production>
      <nonterminal>ClassBodyDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ModifiersOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>

  <!-- 
   - Fail: ClassBodyDeclaration.
      - [], ;([,([n(ModifiersOpt), n(Type), n(VariableDeclarators), t((;))]),
               ,([n(ModifiersOpt), n(Type), n(Identifier), n(FormalParameters), *(,([t([), t(])])), ?(,([t(throws), n(TypeList)])), n(MethodBody)]),
     vs.
      - [], ;([
               ,([n(ModifiersOpt), n(MethodOrFieldDecl)]),
  -->
  <xbgf:unfold>
    <nonterminal>VariableDeclarators</nonterminal>
    <in>
      <nonterminal>ClassBodyDeclaration</nonterminal>
    </in>
  </xbgf:unfold>
  <xbgf:unfold>
    <nonterminal>VariableDeclarator</nonterminal>
    <in>
      <nonterminal>ClassBodyDeclaration</nonterminal>
    </in>
  </xbgf:unfold>
  <xbgf:disappear>
    <bgf:production>
      <nonterminal>ClassBodyDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ModifiersOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Type</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>VariableDeclaratorRest</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <star>
                  <bgf:expression>
                    <sequence>
                      <bgf:expression>
                        <terminal>,</terminal>
                      </bgf:expression>
                      <bgf:expression>
                        <nonterminal>Identifier</nonterminal>
                      </bgf:expression>
                      <bgf:expression>
                        <nonterminal>VariableDeclaratorRest</nonterminal>
                      </bgf:expression>
                    </sequence>
                  </bgf:expression>
                </star>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:disappear>
  <!-- REVISE -->
  <xbgf:project>
    <bgf:production>
      <nonterminal>ClassBodyDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ModifiersOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Type</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>VariableDeclaratorRest</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <terminal>;</terminal>
              </bgf:expression>
            </marked>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:project>

  <!-- 
      - [], ,([n(ModifiersOpt), n(Type), n(Identifier), n(MethodDeclaratorRest)])
      - [], ,([n(ModifiersOpt), n(Type), n(Identifier), n(VariableDeclaratorRest)])
  -->
  <xbgf:horizontal>ClassBodyDeclaration</xbgf:horizontal>
  <xbgf:factor>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>ModifiersOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Type</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Identifier</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>MethodDeclaratorRest</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <nonterminal>ModifiersOpt</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Type</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Identifier</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>VariableDeclaratorRest</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <nonterminal>ModifiersOpt</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <nonterminal>Type</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <nonterminal>Identifier</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <choice>
            <bgf:expression>
              <nonterminal>MethodDeclaratorRest</nonterminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>VariableDeclaratorRest</nonterminal>
            </bgf:expression>
          </choice>
        </bgf:expression>
      </sequence>
    </bgf:expression>
  </xbgf:factor>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>MethodOrFieldRest</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <nonterminal>MethodDeclaratorRest</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>VariableDeclaratorRest</nonterminal>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>
  <xbgf:vertical>
    <nonterminal>MethodOrFieldRest</nonterminal>
  </xbgf:vertical>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>MethodOrFieldDecl</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Type</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>MethodOrFieldRest</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>
  <xbgf:vertical>
    <nonterminal>ClassBodyDeclaration</nonterminal>
  </xbgf:vertical>
</xbgf:sequence>