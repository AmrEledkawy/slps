<xbgf:sequence
  xmlns:bgf="http://planet-sl.org/bgf"
  xmlns:xbgf="http://planet-sl.org/xbgf">

  <!--
  Expressions in the syntax appendix look like this:
  
  ClassDeclaration is defined as:
     "class" Identifier [ "extends" Type ] [ "implements" TypeList ] ClassBody
  ClassBody is defined as:
     "{" { ClassBodyDeclaration } "}"
  ClassBodyDeclaration is defined as:
     ";"
     [ "static" ] Block
     ModifiersOpt MemberDecl
  MemberDecl is defined as:
     MethodOrFieldDecl
     "void" Identifier MethodDeclaratorRest
     Identifier ConstructorDeclaratorRest
     ClassOrInterfaceDeclaration
  MethodOrFieldDecl is defined as:
     Type Identifier MethodOrFieldRest
  MethodOrFieldRest is defined as:
     VariableDeclaratorRest
     MethodDeclaratorRest
  VariableDeclaratorRest is defined as:
     BracketsOpt [ "=" VariableInitializer ]
  VariableInitializer is defined as:
     ArrayInitializer
     Expression
  MethodDeclaratorRest is defined as:
     FormalParameters BracketsOpt [ "throws" QualifiedIdentifierList ] ( MethodBody | ";" )


  While in the text of the spec it is yaccified:

  ClassDeclaration is defined as:
     [ ClassModifiers ] "class" Identifier [ Super ] [ Interfaces ] ClassBody
  Super is defined as:
     "extends" ClassType
  Interfaces is defined as:
     "implements" InterfaceTypeList
  ClassBody is defined as:
     { [ ClassBodyDeclarations ] }
  ClassBodyDeclarations is defined as:
     ClassBodyDeclaration
     ClassBodyDeclarations ClassBodyDeclaration
  ClassBodyDeclaration is defined as:
     ClassMemberDeclaration
     InstanceInitializer
     StaticInitializer
     ConstructorDeclaration
  ClassMemberDeclaration is defined as:
     FieldDeclaration
     MethodDeclaration
     ClassDeclaration
     InterfaceDeclaration
     ";"
  FieldDeclaration is defined as:
     [ FieldModifiers ] Type VariableDeclarators ";"
  MethodDeclaration is defined as:
     MethodHeader MethodBody
  MethodHeader is defined as:
     [ MethodModifiers ] ResultType MethodDeclarator [ Throws ]
  -->

  <!-- 
   - Fail: TypeDeclaration.
      - [], ;([n(ClassOrInterfaceDeclaration), t((;))])
     vs.
      - [], ;([n(ClassDeclaration), n(InterfaceDeclaration), t((;))])
  -->
  <xbgf:horizontal>TypeDeclaration</xbgf:horizontal>
  <xbgf:horizontal>ClassBodyDeclaration</xbgf:horizontal>
  <xbgf:horizontal>ClassMemberDeclaration</xbgf:horizontal>
  <xbgf:horizontal>InterfaceMemberDeclaration</xbgf:horizontal>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <nonterminal>ClassDeclaration</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>InterfaceDeclaration</nonterminal>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>
  <xbgf:vertical>
    <nonterminal>TypeDeclaration</nonterminal>
  </xbgf:vertical>
  <xbgf:vertical>
    <nonterminal>InterfaceMemberDeclaration</nonterminal>
  </xbgf:vertical>

  <!-- 
   - Fail: ClassOrInterfaceDeclaration.
      - [], ,([n(ModifiersOpt), ;([n(ClassDeclaration), n(InterfaceDeclaration)])])
     vs.
      - [], ;([n(ClassDeclaration), n(InterfaceDeclaration)])
      
   Later with factor/distribute this should be done better!
  -->
  <xbgf:appear>
    <bgf:production>
      <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <star>
                  <bgf:expression>
                    <nonterminal>Modifier</nonterminal>
                  </bgf:expression>
                </star>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <choice>
              <bgf:expression>
                <nonterminal>ClassDeclaration</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>InterfaceDeclaration</nonterminal>
              </bgf:expression>
            </choice>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:appear>
  <xbgf:fold>
    <nonterminal>ModifiersOpt</nonterminal>
    <in>
      <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
    </in>
  </xbgf:fold>

  <!-- 
   - Fail: ClassBody.
      - [], ,([t({), *(n(ClassBodyDeclaration)), t(})])
     vs.
      - [], ,([t({), ?(n(ClassBodyDeclarations)), t(})])
  -->
  <xbgf:deyaccify>ClassBodyDeclarations</xbgf:deyaccify>
  <xbgf:inline>ClassBodyDeclarations</xbgf:inline>
  <xbgf:massage>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <plus>
            <bgf:expression>
              <nonterminal>ClassBodyDeclaration</nonterminal>
            </bgf:expression>
          </plus>
        </bgf:expression>
      </optional>
    </bgf:expression>
    <bgf:expression>
      <star>
        <bgf:expression>
          <nonterminal>ClassBodyDeclaration</nonterminal>
        </bgf:expression>
      </star>
    </bgf:expression>
  </xbgf:massage>

  <!--   
   - Fail: ClassDeclaration.
      - [], ,([t(class), n(Identifier), ?(,([t(extends), n(Type)])), ?(,([t(implements), n(TypeList)])), n(ClassBody)])
     vs.
      - [], ,([n(ModifiersOpt), t(class), n(Identifier), ?(n(Super)), ?(n(Interfaces)), n(ClassBody)])
  -->
  <xbgf:unfold>
    <nonterminal>ModifiersOpt</nonterminal>
    <in>
      <nonterminal>ClassDeclaration</nonterminal>
    </in>
  </xbgf:unfold>
  <xbgf:disappear>
    <bgf:production>
      <nonterminal>ClassDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <star>
                  <bgf:expression>
                    <nonterminal>Modifier</nonterminal>
                  </bgf:expression>
                </star>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <terminal>class</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>Super</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>Interfaces</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ClassBody</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:disappear>
  <xbgf:inline>Super</xbgf:inline>
  <xbgf:inline>Interfaces</xbgf:inline>


  <!-- 
   - Fail: ClassBodyDeclaration.
      - [], ;([t((;)), ,([?(t(static)), n(Block)]), ,([n(ModifiersOpt), n(MemberDecl)])])
     vs.
      - [], ;([n(ClassMemberDeclaration), n(InstanceInitializer), n(StaticInitializer), n(ConstructorDeclaration)])
  -->
  <xbgf:inline>ClassMemberDeclaration</xbgf:inline>
  <xbgf:inline>InstanceInitializer</xbgf:inline>
  <xbgf:inline>StaticInitializer</xbgf:inline>
  <xbgf:inline>ConstructorDeclaration</xbgf:inline>
  <xbgf:inline>MethodDeclaration</xbgf:inline>
  <xbgf:inline>ConstructorDeclarator</xbgf:inline>
  <xbgf:horizontal>ResultType</xbgf:horizontal>
  <xbgf:inline>ResultType</xbgf:inline>
  <xbgf:inline>MethodHeader</xbgf:inline>

  <!-- refactor alternatives to BNF optional -->
  <xbgf:factor>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <nonterminal>Block</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <sequence>
            <bgf:expression>
              <terminal>static</terminal>
            </bgf:expression>
            <bgf:expression>
              <nonterminal>Block</nonterminal>
            </bgf:expression>
          </sequence>
        </bgf:expression>
      </choice>
    </bgf:expression>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <choice>
              <bgf:expression>
                <epsilon/>
              </bgf:expression>
              <bgf:expression>
                <terminal>static</terminal>
              </bgf:expression>
            </choice>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Block</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
  </xbgf:factor>
  <xbgf:massage>
    <bgf:expression>
      <choice>
        <bgf:expression>
          <epsilon/>
        </bgf:expression>
        <bgf:expression>
          <terminal>static</terminal>
        </bgf:expression>
      </choice>
    </bgf:expression>
    <bgf:expression>
      <optional>
        <bgf:expression>
          <terminal>static</terminal>
        </bgf:expression>
      </optional>
    </bgf:expression>
  </xbgf:massage>

  <!-- next step -->
  <xbgf:extract>
    <bgf:production>
      <nonterminal>FormalParameters</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>FormalParameterList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>
  <xbgf:deyaccify>FormalParameterList</xbgf:deyaccify>
  <xbgf:inline>FormalParameterList</xbgf:inline>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>ConstructorDeclaratorRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>FormalParameters</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>Throws</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ConstructorBody</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>

  <!-- 
  MethodDeclaratorRest is defined as:
     FormalParameters BracketsOpt [ "throws" QualifiedIdentifierList ] ( MethodBody | ";" )
     
   p([], 'ClassBodyDeclaration',
   ','([n('ModifiersOpt'), t(void), n('Identifier'), n('FormalParameters'), ?(','([t(throws), n('TypeList')])), n('MethodBody')])),

  -->
  <xbgf:deyaccify>MethodDeclarator</xbgf:deyaccify>
  <xbgf:fold>
    <nonterminal>BracketsOpt</nonterminal>
    <in>
      <nonterminal>MethodDeclarator</nonterminal>
    </in>
  </xbgf:fold>
  <xbgf:inline>MethodDeclarator</xbgf:inline>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>MethodDeclaratorRest</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>FormalParameters</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>BracketsOpt</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>Throws</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>MethodBody</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>
  <xbgf:distribute>
    <nonterminal>ClassBodyDeclaration</nonterminal>
  </xbgf:distribute>
  <xbgf:vertical><nonterminal>ClassBodyDeclaration</nonterminal></xbgf:vertical>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>MethodOrFieldDecl</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Type</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>MethodDeclaratorRest</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:extract>
  <xbgf:extract>
    <bgf:production>
      <nonterminal>MethodOrFieldRest</nonterminal>
      <bgf:expression>
        <nonterminal>MethodDeclaratorRest</nonterminal>
      </bgf:expression>
    </bgf:production>
    <in>
      <nonterminal>MethodOrFieldDecl</nonterminal>
    </in>
  </xbgf:extract>
  <xbgf:add>
    <bgf:production>
      <nonterminal>MethodOrFieldRest</nonterminal>
      <bgf:expression>
        <nonterminal>VariableDeclaratorRest</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>

  <!-- modifiers -->
  <xbgf:designate>
    <bgf:production>
      <label>target</label>
      <nonterminal>ClassBodyDeclaration</nonterminal>
      <bgf:expression>
        <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:designate>
  <xbgf:appear>
    <bgf:production>
      <label>target</label>
      <nonterminal>ClassBodyDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <marked>
              <bgf:expression>
                <star>
                  <bgf:expression>
                    <nonterminal>Modifier</nonterminal>
                  </bgf:expression>
                </star>
              </bgf:expression>
            </marked>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ClassOrInterfaceDeclaration</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:appear>
  <xbgf:unlabel>
    <label>target</label>
  </xbgf:unlabel>
  <xbgf:fold>
    <nonterminal>ModifiersOpt</nonterminal>
  </xbgf:fold>

  <!-- finishing touches -->
  <xbgf:remove>
    <bgf:production>
      <nonterminal>ClassBodyDeclaration</nonterminal>
      <bgf:expression>
        <nonterminal>FieldDeclaration</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:remove>
  <xbgf:eliminate>FieldDeclaration</xbgf:eliminate>
  
</xbgf:sequence>