<xbgf:sequence
  xmlns:bgf="http://planet-sl.org/bgf"
  xmlns:xbgf="http://planet-sl.org/xbgf">

  <!--
  The type system of the syntax appendix looks like this:
  
  Type is defined as:
     Identifier [ TypeArguments ] { "." Identifier [ TypeArguments ] } { "[" "]" }
     BasicType
  BasicType is defined as:
     "byte"
     "short"
     "char"
     "int"
     "long"
     "float"
     "double"
     "boolean"
  TypeList is defined as:
     Type { "," Type }
  
  While the collected version is more complicated:
  
  Type is defined as:
     PrimitiveType
     ReferenceType
  PrimitiveType is defined as:
     NumericType
     "boolean"
  NumericType is defined as:
     IntegralType
     FloatingPointType
  IntegralType is defined as:
     "byte"
     "short"
     "int"
     "long"
     "char"
  FloatingPointType is defined as:
     "float"
     "double"
  ReferenceType is defined as:
     ClassOrInterfaceType
     ArrayType
  ClassOrInterfaceType is defined as:
     ClassType
     InterfaceType
  ClassType is defined as:
     TypeName
  ClassTypeList is defined as:
     ClassType
     ClassTypeList "," ClassType
  InterfaceType is defined as:
     TypeName
  InterfaceTypeList is defined as:
     InterfaceType
     InterfaceTypeList "," InterfaceType
  TypeName is defined as:
     Identifier
     PackageOrTypeName "." Identifier
  PackageOrTypeName is defined as:
     Identifier
     PackageOrTypeName "." Identifier
  ArrayType is defined as:
     Type "[" "]"
  ResultType is defined as:
     Type
     "void"
     
  TypeDeclSpecifier is defined as:
     TypeName
     ClassOrInterfaceType "." Identifier
  -->

  <!-- First composing BasicType out of PrimitiveType, NumericType, FloatingPointType & IntegralType -->
  <xbgf:inline>IntegralType</xbgf:inline>
  <xbgf:inline>FloatingPointType</xbgf:inline>
  <xbgf:inline>NumericType</xbgf:inline>
  <xbgf:distribute>
    <nonterminal>PrimitiveType</nonterminal>
  </xbgf:distribute>
  <xbgf:rename>
    <nonterminal>
      <from>PrimitiveType</from>
      <to>BasicType</to>
    </nonterminal>
  </xbgf:rename>
  <!-- Merging interfaces with classes and making lists and other things conform -->
  <xbgf:replace>
    <bgf:expression>
      <nonterminal>InterfaceType</nonterminal>
    </bgf:expression>
    <bgf:expression>
      <nonterminal>Type</nonterminal>
    </bgf:expression>
    <in>
      <nonterminal>InterfaceTypeList</nonterminal>
    </in>
  </xbgf:replace>
  <xbgf:replace>
    <bgf:expression>
      <nonterminal>InterfaceType</nonterminal>
    </bgf:expression>
    <bgf:expression>
      <nonterminal>Type</nonterminal>
    </bgf:expression>
    <in>
      <nonterminal>ExtendsInterfaces</nonterminal>
    </in>
  </xbgf:replace>
  <xbgf:replace>
    <bgf:expression>
      <nonterminal>ClassType</nonterminal>
    </bgf:expression>
    <bgf:expression>
      <nonterminal>Type</nonterminal>
    </bgf:expression>
    <in>
      <nonterminal>Super</nonterminal>
    </in>
  </xbgf:replace>
  <xbgf:unite>
    <add>InterfaceType</add>
    <to>ClassType</to>
  </xbgf:unite>
  <!--xbgf:unite>
    <add>InterfaceTypeList</add>
    <to>ClassTypeList</to>
  </xbgf:unite-->
  <xbgf:rename>
    <nonterminal>
      <from>InterfaceTypeList</from>
      <to>TypeList</to>
    </nonterminal>
  </xbgf:rename>
  <xbgf:deyaccify>TypeList</xbgf:deyaccify>
  <!-- Introducing brackets brutally, too hard to derive -->
  <xbgf:inject>
    <bgf:production>
      <nonterminal>ClassOrInterfaceType</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>ClassType</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>BracketsOpt</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>
  <xbgf:vertical>
    <nonterminal>ReferenceType</nonterminal>
  </xbgf:vertical>
  <xbgf:undefine>ArrayType</xbgf:undefine>
  <xbgf:remove>
    <bgf:production>
      <nonterminal>ReferenceType</nonterminal>
      <bgf:expression>
        <nonterminal>ArrayType</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:remove>
  <xbgf:inline>TypeVariable</xbgf:inline>
  <xbgf:remove>
    <bgf:production>
      <nonterminal>ReferenceType</nonterminal>
      <bgf:expression>
        <nonterminal>Identifier</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:remove>
  <!-- Finishing touches -->
  <xbgf:inline>ClassOrInterfaceType</xbgf:inline>
  <xbgf:inline>ClassType</xbgf:inline>
  <xbgf:inline>ReferenceType</xbgf:inline>
  
  <!--
  p([], 'TypeDeclSpecifier',
  ;([n('QualifiedIdentifier'),
    ','([n('TypeDeclSpecifier'), ?(n('TypeArguments')), n('BracketsOpt'), t('.'), n('Identifier')])])),
    
  vs
  
  p([], 'Type', ','([n('Identifier'), ?(n('TypeArguments')), *(','([t('.'), n('Identifier'), ?(n('TypeArguments'))])), n('BracketsOpt')])),
  p([], 'Type', n('BasicType')),
  -->
  <xbgf:deyaccify>TypeDeclSpecifier</xbgf:deyaccify>
  
  <!-- QUICK FIX - this file needs to be rewritten anyhow -->
  <xbgf:replace>
    <bgf:expression>
      <sequence>
        <bgf:expression>
          <nonterminal>TypeDeclSpecifier</nonterminal>
        </bgf:expression>
        <bgf:expression>
          <optional>
            <bgf:expression>
              <nonterminal>TypeArguments</nonterminal>
            </bgf:expression>
          </optional>
        </bgf:expression>
        <bgf:expression>
          <nonterminal>BracketsOpt</nonterminal>
        </bgf:expression>
      </sequence>
    </bgf:expression>
    <bgf:expression>
      <nonterminal>Type</nonterminal>
    </bgf:expression>
    <in>
      <nonterminal>RelationalExpression</nonterminal>
    </in>
  </xbgf:replace>
  
</xbgf:sequence>