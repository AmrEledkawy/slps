<xbgf:sequence
  xmlns:bgf="http://planet-sl.org/bgf"
  xmlns:xbgf="http://planet-sl.org/xbgf">

  <!--
  Local substitution:
  
     - Fail: TypeImportOnDemandDeclaration.
      - [], ,([t(import), n(PackageName), t(.), t(*), t((;))])
     vs.
      - [], ,([t(import), n(PackageOrTypeName), t(.), t(*), t((;))])
  -->
  <xbgf:project>
    <bgf:production>
      <nonterminal>TypeImportOnDemandDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>import</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>*</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:project>
  <xbgf:inject>
    <bgf:production>
      <nonterminal>TypeImportOnDemandDeclaration</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>import</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>PackageOrTypeName</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>*</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>;</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>

  <!--
  Local substitution:
     - Fail: TypeName.
      - [], ;([n(Identifier), ,([n(PackageName), t(.), n(Identifier)])])
     vs.
      - [], ;([n(Identifier), ,([n(PackageOrTypeName), t(.), n(Identifier)])])
   -->
  <xbgf:vertical>
    <nonterminal>TypeName</nonterminal>
  </xbgf:vertical>
  <xbgf:designate>
    <bgf:production>
      <label>target</label>
      <nonterminal>TypeName</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>PackageName</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:designate>
  <xbgf:project>
    <bgf:production>
      <label>target</label>
      <nonterminal>TypeName</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:project>
  <xbgf:inject>
    <bgf:production>
      <label>target</label>
      <nonterminal>TypeName</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>PackageOrTypeName</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>
  <xbgf:horizontal>TypeName</xbgf:horizontal>
  <xbgf:strip>
    <selector>target</selector>
  </xbgf:strip>

  <!--
  Resolve brutally. Is there a better way?
  
     - Fail: PrimaryNoNewArray.
      - [], ;([n(Literal), t(this), ,([t((), n(Expression), t())]), n(ClassInstanceCreationExpression), n(FieldAccess), n(MethodInvocation), n(ArrayAccess)])
     vs.
      - [], ;([n(Literal), ,([n(Type), t(.), t(class)]), ,([t(void), t(.), t(class)]), t(this), ,([t(ClassName), t(.), t(this)]), ,([t((), n(Expression), t())]), n(ClassInstanceCreationExpression), n(FieldAccess), n(MethodInvocation), n(ArrayAccess)])
    -->
  <xbgf:undefine>PrimaryNoNewArray</xbgf:undefine>
  <xbgf:define>
    <bgf:production>
      <nonterminal>PrimaryNoNewArray</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <nonterminal>Literal</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>Type</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>.</terminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>class</terminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <terminal>void</terminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>.</terminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>class</terminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <terminal>this</terminal>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <terminal>ClassName</terminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>.</terminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>this</terminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <terminal>(</terminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>Expression</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>)</terminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ClassInstanceCreationExpression</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>FieldAccess</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>MethodInvocation</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ArrayAccess</nonterminal>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>

  <!--
  Local substitute + add + horizontal:
     - Fail: ClassInstanceCreationExpression.
      - [], ,([t(new), n(ClassType), t((), ?(n(ArgumentList)), t())])
     vs.
      - [], ;([,([t(new), n(ClassOrInterfaceType), t((), ?(n(ArgumentList)), t()), ?(n(ClassBody))]),
               ,([n(Primary), t(.), t(new), n(Identifier), t((), ?(n(ArgumentList)), t()), ?(n(ClassBody))])])
  -->
  <xbgf:project>
    <bgf:production>
      <nonterminal>ClassInstanceCreationExpression</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>new</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ArgumentList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:project>
  <xbgf:inject>
    <bgf:production>
      <nonterminal>ClassInstanceCreationExpression</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <terminal>new</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>ClassOrInterfaceType</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ArgumentList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ClassBody</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:inject>
  <xbgf:add>
    <bgf:production>
      <nonterminal>ClassInstanceCreationExpression</nonterminal>
      <bgf:expression>
        <sequence>
          <bgf:expression>
            <nonterminal>Primary</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>.</terminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>new</terminal>
          </bgf:expression>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <terminal>(</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ArgumentList</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
          <bgf:expression>
            <terminal>)</terminal>
          </bgf:expression>
          <bgf:expression>
            <optional>
              <bgf:expression>
                <nonterminal>ClassBody</nonterminal>
              </bgf:expression>
            </optional>
          </bgf:expression>
        </sequence>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:horizontal>ClassInstanceCreationExpression</xbgf:horizontal>
  
  <!-- last bits -->
  <xbgf:define>
    <bgf:production>
      <nonterminal>PackageOrTypeName</nonterminal>
      <bgf:expression>
        <choice>
          <bgf:expression>
            <nonterminal>Identifier</nonterminal>
          </bgf:expression>
          <bgf:expression>
            <sequence>
              <bgf:expression>
                <nonterminal>PackageOrTypeName</nonterminal>
              </bgf:expression>
              <bgf:expression>
                <terminal>.</terminal>
              </bgf:expression>
              <bgf:expression>
                <nonterminal>Identifier</nonterminal>
              </bgf:expression>
            </sequence>
          </bgf:expression>
        </choice>
      </bgf:expression>
    </bgf:production>
  </xbgf:define>
  <!--xbgf:vertical>
    <nonterminal>ClassBodyDeclaration</nonterminal>
  </xbgf:vertical>
  <xbgf:add>
    <bgf:production>
      <nonterminal>ClassBodyDeclaration</nonterminal>
      <bgf:expression>
        <nonterminal>InstanceInitializer</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:add>
  <xbgf:horizontal>ClassBodyDeclaration</xbgf:horizontal>
  <xbgf:define>
    <bgf:production>
      <nonterminal>InstanceInitializer</nonterminal>
      <bgf:expression>
        <nonterminal>Block</nonterminal>
      </bgf:expression>
    </bgf:production>
  </xbgf:define-->
</xbgf:sequence>
