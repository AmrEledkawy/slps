module Trace2Term

imports ExtractTrace
        basic/IdentifierCon

hiddens
context-free start-symbols
  Term Stmt*

exports
sorts Term

context-free syntax
  %% Toplevel function taking Jimple producing a trace term
  trace(Stmt*) -> Term  

context-free syntax
  "'" BaseType "'"          -> Term                                                                 
  "'" MethodSignature "'"   -> Term                                                                 
  IdCon "(" {Term ","}* ")" -> Term                                                                 
  "(" Term "," Term ")"     -> Term                                                                 
  "[" {Term ","}* "]"       -> Term                                                                 
  OID                       -> Term                                                                 
  "_"                       -> Term                                                                 
  "_G" NatCon               -> Term      {prefer}                                                   
  "[" Term "|" Term "]"     -> Term                                                                 
  Constant                  -> Term                                                                 
  "oid"                     -> IdCon     {reject}                                                   
  "term2trace"              -> IdCon     {reject} 

  "_G" NatCon               -> LocalName                                                            
  "_"                       -> LocalName                                                            
  "<" Stmt* "," Stmt* ">"   -> Stmt                                                                 

context-free syntax
  term2trace(Term)      -> Stmt*             
  term2stat(Term)       -> Stmt              
  term2parameters(Term) -> {Immediate ","}*  
  term2signature(Term)  -> MethodSignature   
  idcon2calltype(IdCon) -> NonStaticInvoke   

context-free syntax
  trace2term(Stmt*)       -> Term                                       
  trace2term(Stmt*, Term) -> Term {traversal(top-down, accu, continue)} 
  trace2term(Stmt, Term)  -> Term {traversal(top-down, accu, continue)} 
  stat2term(Stmt)         -> Term                                       

context-free syntax
  calltype(InvokeExpr, Term)       -> Term {traversal(bottom-up, accu, break)} 
  calltype(NonStaticInvoke, Term)  -> Term {traversal(bottom-up, accu, break)} 
  signature(InvokeExpr, Term)      -> Term {traversal(bottom-up, accu, break)} 
  signature(MethodSignature, Term) -> Term {traversal(bottom-up, accu, break)} 
  parameters(InvokeExpr, Term)     -> Term {traversal(bottom-up, accu, break)} 
  parameters(LocalName, Term)      -> Term {traversal(bottom-up, accu, break)} 
  parameters(Constant, Term)       -> Term {traversal(bottom-up, accu, break)} 

hiddens
variables
  "&term" [0-9\']*        -> Term              
  "&term*" [0-9\']*       -> {Term ","}*       
  "&term+" [0-9\']*       -> {Term ","}+       
  "&value" [0-9\']*       -> Value             
  "&patterns" [0-9\']*    -> Patterns          
  "&pattern" [0-9\']*     -> Pattern           
  "&pattern*" [0-9\']*    -> {Pattern ","}*    
  "&pattern+" [0-9\']*    -> {Pattern ","}+    
  "&hole" [0-9\']*        -> Hole              
  "&hole*" [0-9\']*       -> {Hole ","}*       
  "&hole+" [0-9\']*       -> {Hole ","}+       
  "&idcon" [0-9\']*       -> IdCon             
  "&mem" [0-9\']*         -> Memory            
  "&heap" [0-9\']*        -> Heap              
  "&fieldref" [0-9\']*    -> FieldRef          
  "&type" [0-9\']*        -> Type              
  "&nonvoidtype" [0-9\']* -> NonVoidType       
  "&atid" [0-9\']*        -> AtIdentifier      
  "&btype" [0-9\']*       -> BaseType          
  "&n" [0-9\']*           -> Integer           
  "&natcon" [0-9\']*      -> NatCon            
  "&oid" [0-9\']*         -> OID               
  "&var" [0-9\']*         -> Variable          
  "&idlex" [0-9\']*       -> IdentifierLex     
  "&id" [0-9\']*          -> Identifier        
  "&stmt" [0-9\']*        -> Stmt              
  "&stmt*" [0-9\']*       -> Stmt*             
  "&stmt+" [0-9\']*       -> Stmt+             
  "&expr" [0-9\']*        -> Expr              
  "&name" [0-9\']*        -> Name              
  "&lname" [0-9\']*       -> LocalName         
  "&label" [0-9\']*       -> LabelName         
  "&atid" [0-9\']*        -> AtIdentifier      
  "&immed" [0-9\']*       -> Immediate         
  "&invoke" [0-9\']*      -> InvokeExpr        
  "&nonstatic" [0-9\']*   -> NonStaticInvoke   
  "&sig" [0-9\']*         -> MethodSignature   
  "&immed*" [0-9\']*      -> {Immediate ","}*  
  "&const" [0-9\']*       -> Constant          
  "&bool" [0-9\']*        -> BoolExpr          
  "&new" [0-9\']*         -> NewExpr           
